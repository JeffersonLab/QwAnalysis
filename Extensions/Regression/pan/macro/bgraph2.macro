{
    gROOT->Reset();

    c1 = new TCanvas("c1","Charge Asymmetry Feedback - Time Variation",200,10,700,500);

    c1->SetFillColor(42);
    c1->SetGrid();
    c1->GetFrame()->SetFillColor(21);
    c1->GetFrame()->SetBorderSize(12);

    Int_t npt=138;

    Float_t run[npt];
    for (Int_t j = 0; j < npt; j++) {
        if (j <= 35) run[j] = 10+j;
        if (j > 35) run[j] = 20+j;
     }
// = { 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44,45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145  };

    Float_t erun[npt];
    for (Int_t i = 0; i < npt ; i++) erun[i] = 0.1;

    Float_t asy[npt] = { 366, -139, 16, -17, 39, 9, 38, -83, 45, 22, -34, -41, 85, -66, 40, -23, 40, -21, 3, -2, 21, -28, -18, 42, -47, 3, -49, 54, 19, 20, 1, 42, -56, -20, 38, 108, 809, 9, -75, -13, -41, -23, -50, 51, 10, 45, -49, -48, 52, 136, -36, 5, 32, -15, -39, -27, 9, -29, -6, 0, -12, 1, -6, 6, 83, -28, 143, -158, -66, -20, -28, 69, -87, -51, 69, -85, 25, 6, 28, -20, -22, 36, -15, -6, -18, -12, -11, 66, -57, -1, -18, -15, 49, -21, 5, -15, 81, -51, -26, 22, 3, 4, 1, 53, -32, 20, -57, 91, 15, -70, -29, 5, 67, -159, -56, 36, -26, 16, 88, -63, -43, -10, -4, 89, -32, -24, -34, -34, 24, -26, -57, 86, 25, -31, 67, -32, 47, -53  };

    Float_t easy[npt] = { 18, 22, 21, 19, 18, 20, 19, 22, 21, 21, 22, 25, 20, 18, 18, 20, 18, 20, 18, 19, 19, 20, 18, 18, 18, 18, 20, 16, 18, 15, 23, 22, 18, 26, 18, 18, 19, 17, 22, 18, 14, 14, 14, 15, 20, 20, 19, 18, 17, 14, 16, 14, 15, 18, 18, 16, 14, 13, 14, 13, 13, 13, 18, 30, 20, 19, 20, 17, 16, 16, 22, 17, 15, 15, 16, 27, 17, 15, 18, 22, 15, 20, 17, 18, 14, 17, 15, 13, 14, 16, 19, 14, 14, 14, 14, 15, 16, 15, 14, 16, 18, 20, 16, 18, 14, 17, 14, 15, 19, 13, 16, 18, 22, 18, 16, 17, 19, 18, 13, 14, 19, 14, 15, 17, 13, 17, 17, 20, 19, 14, 20, 16, 14, 14, 16, 16, 21, 19 };


    Flaot_t sum = 0;
    Float_t sumsq = 0;
    Float_t cnt = 0;
    Float_t samsum = 0;
    Float_t sampsq = 0;
    for (Int_t k = 0; k < npt; k++) {
       if (asy[k] > 200) cout << "here is big asy "<<k<<"  "<<asy[k]<<endl;
       if (asy[k] < 200) {  // throw out the 2 glitches
           cout << "easy "<<k<<" "<<asy[k]<<"  "<<easy[k]<<endl;
           sum = sum + asy[k]/(easy[k]*easy[k]);
           sumsq = sumsq + 1./(easy[k]*easy[k]);
           cnt = cnt + 1.;
           samsum = samsum + easy[k];
           sampsq = sampsq + easy[k]*easy[k];
       }
    }
    Float_t avg = sum/sumsq;
    Float_t sig = sqrt(1./sumsq);
    sig = sig / (sqrt(cnt));
    cout << "Final avg = " << avg << "  +/-  " << sig <<endl;         
    Float_t samavg = samsum / cnt;
    Float_t samdev = sqrt(sampsq/cnt - samavg*samavg);
    cout << "Sample avg "<< samavg << " +/- " << samdev << endl;


    gr1 = new TGraphErrors(npt, run, asy, erun, easy);
    gr1->SetTitle("Charge Asymmetry (ppm) vs MiniRun Number");
    gr1->SetMarkerColor(4);
    gr1->SetMarkerStyle(21);
 
    gr1->Draw("AP");

    c1->Update();

}

