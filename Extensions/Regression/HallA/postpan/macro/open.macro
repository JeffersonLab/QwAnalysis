TaRootRep    *pandef;
TaRootRegDef *regdef;
TaRootDitDef *ditdef;
TFile *f;
TFile *f_reg;
TFile *f_dit;
TTree *raw;
TTree *asy;
TTree *reg;
TTree *dit;
TTree *ditslps;

Int_t open (Int_t run = 0, TString atype = "standard")
{
  if (run <= 0)
    {
      cout << "Enter run number : ";
      cin >> run;
    }
  if (atype == "")
    {
      cout << "Enter analysis type: ";
      cin >> atype;
    }
     
  cout << "Run " << run << " analysis type " << atype << endl;

  TaFileName::Setup (run,"standard");
  TString file = (TaFileName ("root")).Tstring();
  cout << "ROOT file is \n\t" << file << endl;
  f = new TFile(file);
  
  pandef = (TaRootRep*)gROOT->FindObject("TaRootRep;1");
  raw = (TTree*)gROOT->FindObject("R");
  asy = (TTree*)gROOT->FindObject("P");
  


  if(atype=="reg" || atype=="red") {

    TaFileName::Setup (run, "regress");
    TString file2 = (TaFileName ("root")).Tstring();
    cout << "ROOT file is \n\t" << file2 << endl;
    f_reg = new TFile(file2);
  
    if (f_reg) {
      
      reg = (TTree*)gROOT->FindObject("reg");

      if (reg!=NULL) {
	asy->AddFriend("reg",file2);
	cout << "reg tree friended to asy tree" << endl;
//
// the below doesn't work, and god help you if you try it.
//
//	regdef = (TaRootRegDef*)gROOT->FindObject("TaRootRegDef;1");
//	if (regdef) regdef->Print();
      }
    }
    
  }	

  if(atype=="dit" || atype=="red") {

    TaFileName::Setup (run, "dither");
    TString file3 = (TaFileName ("root")).Tstring();
    cout << "ROOT file is \n\t" << file3 << endl;
    f_dit = new TFile(file3);
    
    if (f_dit) {
      dit = (TTree*)gROOT->FindObject("dit");
      ditslps = (TTree*)gROOT->FindObject("ditslps");
      
      if (dit!=NULL) {
	asy->AddFriend("dit",file3);
	cout << "dit tree friended to asy tree" << endl;
      }

      f_dit->cd();
      ditdef = (TaRootDitDef*)gROOT->FindObject("TaRootDitDef;1");
      if (ditdef) ditdef->Print();
    }
  } else {
    
  }

  return run;  
}
