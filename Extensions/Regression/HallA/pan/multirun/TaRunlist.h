//////////////////////////////////////////////////////////////////////
//
// TaRunlist.h
//   Bryan Moffit - July 2005
//
//   Multirun class to take care of the runlist generated by 
//     the MySQL database.  
//    For now, uses the output from a perl script.  Later on, may
//    be adapted to obtain data directly from the database (if
//    ROOT is compiled with the libMysql).
//
//////////////////////////////////////////////////////////////////////

#ifndef TaRunlist_h
#define TaRunlist_h

#include <vector>
#include <map>
#include "TString.h"

using namespace std;

struct Run {
  Int_t runnumber;
  Int_t slug;
  Int_t slowsign;
  Int_t curmon;
  Int_t LeftDetLo;
  Int_t LeftDetHi;
  Int_t RightDetLo;
  Int_t RightDetHi;
};

class TaRunlist {

 public:
  TaRunlist();
  TaRunlist(TString filename);
  virtual ~TaRunlist() {};
  Int_t GetRunnumber(Int_t run) {return mapRunlist[run].runnumber;};
  Int_t GetSlug(Int_t run) {return mapRunlist[run].slug;};
  Int_t GetSlowSign(Int_t run) {return mapRunlist[run].slowsign;};
  Int_t GetCurmon(Int_t run) {return mapRunlist[run].curmon;};
  Int_t GetLeftDetLo(Int_t run) {return mapRunlist[run].LeftDetLo;};
  Int_t GetLeftDetHi(Int_t run) {return mapRunlist[run].LeftDetHi;};
  Int_t GetRightDetLo(Int_t run) {return mapRunlist[run].RightDetLo;};
  Int_t GetRightDetHi(Int_t run) {return mapRunlist[run].RightDetHi;};
  Bool_t IsInRunlist(Int_t run) {return (mapRunlist.find(run)!=mapRunlist.end());};
  Bool_t GoodRunlist() {return isLoaded;};
  Int_t GetNumberOfRuns() {return mapRunlist.size();};
  vector <Int_t> GetListOfRuns(Int_t slug);
  vector <Int_t> GetListOfRuns();
  Int_t GetRunByIndex(Int_t index);

 private:

  Bool_t isLoaded;
  TString perl_filename;
  map <Int_t,Run> mapRunlist;

  Bool_t Load();
};


#endif
