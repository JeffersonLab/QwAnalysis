%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: pandb_talk.dvi
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Helvetica Courier
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips pandb_talk -o pandb_talk.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.12.12:1053
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks 97 - Version 97, 93/05/07.
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
% END pst-dots.pro

%%EndProcSet
%%BeginProcSet: 8r.enc
% @@psencodingfile@{
%   author = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry",
%   version = "0.6",
%   date = "1 July 1998",
%   filename = "8r.enc",
%   email = "tex-fonts@@tug.org",
%   docstring = "Encoding for TrueType or Type 1 fonts
%                to be used with TeX."
% @}
% 
% Idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard Encoding + ISO Latin 1 + extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% 
% (4) Remaining positions left undefined are for use in (hopefully)
% upward-compatible revisions, if someday more characters are generally
% available.
% 
% (5) hyphen appears twice for compatibility with both 
% ASCII and Windows.
% 
/TeXBase1Encoding [
% 0x00 (encoded characters from Adobe Standard not in Windows 3.1)
  /.notdef /dotaccent /fi /fl
  /fraction /hungarumlaut /Lslash /lslash
  /ogonek /ring /.notdef
  /breve /minus /.notdef 
% These are the only two remaining unencoded characters, so may as
% well include them.
  /Zcaron /zcaron 
% 0x10
 /caron /dotlessi 
% (unusual TeX characters available in, e.g., Lucida Bright)
 /dotlessj /ff /ffi /ffl 
 /.notdef /.notdef /.notdef /.notdef
 /.notdef /.notdef /.notdef /.notdef
 % very contentious; it's so painful not having quoteleft and quoteright
 % at 96 and 145 that we move the things normally found there to here.
 /grave /quotesingle 
% 0x20 (ASCII begins)
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three /four /five /six /seven
 /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
 /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
 /P /Q /R /S /T /U /V /W
 /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
 /p /q /r /s /t /u /v /w
 /x /y /z /braceleft /bar /braceright /asciitilde
 /.notdef % rubout; ASCII ends
% 0x80
 /.notdef /.notdef /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /.notdef /.notdef /.notdef
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /.notdef /.notdef /Ydieresis
% 0xA0
 /.notdef % nobreakspace
 /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot
 /hyphen % Y&Y (also at 45); Windows' softhyphen
 /registered
 /macron
% 0xD0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 2074 600 600 (pandb_talk.dvi)
@start /Fa 134[71 1[102 71 79 39 71 47 1[79 79 79 118
31 2[31 79 79 39 79 79 71 79 79 11[102 86 94 1[110 94
1[102 118 79 3[102 3[102 2[94 6[39 7[79 79 2[39 47 7[126
37[{TeXBase1Encoding ReEncodeFont}38 141.195 /Helvetica
rf
%DVIPSBitmapFont: Fb cmmi5 10.37 1
/Fb 1 59 df<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B0B728A27>58
D E
%EndDVIPSBitmapFont
/Fc 107[24 24 25[35 35 1[35 39 20 35 24 1[39 39 39 59
16 35 1[16 39 39 20 39 39 35 39 39 8[47 1[47 51 1[47
51 1[47 1[51 1[39 2[20 51 1[43 47 3[47 6[20 39 39 39
39 39 39 39 39 39 39 1[20 24 41[35 3[{TeXBase1Encoding ReEncodeFont}51
70.5976 /Helvetica rf /Fd 134[51 51 51 51 51 51 51 51
51 51 51 51 51 51 51 1[51 51 51 51 51 51 51 51 51 19[51
3[51 3[51 51 1[51 51 7[51 51 51 51 51 51 51 51 51 51
1[51 51 51 2[51 51 4[51 35[{TeXBase1Encoding ReEncodeFont}46
84.8025 /Courier rf /Fe 138[147 1[147 147 1[147 1[147
1[147 2[147 4[147 147 147 147 34[147 147 10[147 147 147
1[147 46[{TeXBase1Encoding ReEncodeFont}17 244.231 /Courier
rf
%DVIPSBitmapFont: Ff cmsy10 29.8656 1
/Ff 1 16 df<EFFFFE041FEBFFF093B612FE0307EDFFC0031F16F0037F16FC4AB9FC0207
18C04A844A84027F18FC91BA7E498549864986498649864986A2498690BC7E4887A2481C
80A2481CC0A2481CE0A2481CF0A3481CF8A3481CFCA5BE12FEAF6C1CFCA56C1CF8A36C1C
F0A36C1CE0A26C1CC0A26C1C80A26C1C00A26C636D626D62A26D626D626D626D626D97C7
FC6D616E60021F18F06E606E60020195C8FC6E6C16FC031F16F0030716C003004BC9FC04
1F14F0040049CAFC5F5F72ED7C>15 D E
%EndDVIPSBitmapFont
/Fg 107[68 26[102 102 147 102 113 57 102 68 113 113 113
113 169 45 102 45 45 113 113 57 113 113 102 113 113 9[192
2[124 136 147 158 136 158 1[169 113 136 1[57 2[124 1[147
147 136 136 6[57 5[113 113 113 113 1[57 57 68 57 119
1[68 68 45 35[102 102 2[{TeXBase1Encoding ReEncodeFont}57
203.321 /Helvetica rf /Fh 141[33 4[82 7[55 1[49 55 29[71
17[55 55 55 48[{TeXBase1Encoding ReEncodeFont}9 98.8366
/Helvetica rf
%DVIPSBitmapFont: Fi cmbx10 20.74 29
/Fi 29 122 df<EB3F803801FFF0487F000F13FE487FA24814804814C0A3B612E0A76C14
C0A36C14806C1400A26C5B000313F86C5B38003F801B1B729A37>46
D<1AFE963803FF80A24F7FA24F7FA34F7FA24F7FA34F7FA296B57EA24E80A34E81A24E81
A34E81A24E81A34E81A2DE7FEF80A2DEFFC780A219874D018380A24D010181A218FE0507
6D81A24D486D80A260051F6E8060053F6E80A260057F6E806005FF6E80A24C496D80A295
C7FC4C6F81A24C486E81A25F040F7080A24C486F80A25F043F70805F047F7080A24C486F
80A25F4B7180A24B90C96C8194BBFCA24B87A24B87A34B8704F0CA123F033F7280A25E03
7F72805E03FF7280A24A497180A293CBFC4A7381A24A487281A25D020F7480A24A487380
A25D023F74805D4A6C7380010FB57EB800E0030FB912FEA8877879F796>65
D<BD12E0F4FF801DF81DFF1EE01EF81EFF1FC0C7001F02E0C8001F81090015F80A1F800A
0314FF0A00810B3F800B0F14F0778077800B0080787F8A78808D78808A8D78808A8D7880
A28D8B2280A28B22C0A37914E0A322F0A47914F8A622FCB222F8A55514F0A422E0A36722
C0A2228067A222009CB6FC69A2545C6966545C6966545C545C5491C7FC9BB55A535C535C
0B0F5C535C0B7F5C0A03B6C8FC0A0F5C99B65A091F15F0C012C09CC9FC1EFC1EF01E800B
F8CAFC1D800AE0CBFC86767AF598>68 D<BA00FE49BA12FCA8C7001F02F0CB003F02E0C7
FCB3B3A994BDFCA805F0CB123FB3B3ADBA00FE49BA12FCA88E767AF59B>72
D<BA12FEA8C7001F02F0C7FCB3B3B3B3B3ACBA12FEA83F767AF54B>I<BB12E0A8C7001F
02F0CCFCB3B3B3A91EFFA4651EFEA51D03A41EFC1D07A31D0FA21D1FA3F53FF81D7FA21D
FF64A26464641C3F5213F051B5FC631B1F98B6FC1A0FBFFCA31EE0A568767AF577>76
D<B800E00A0FB712FE05F81C3F7164A27199B8FCA37163C7001F10F0C7FC72F203FBA203
F76EF207F3A203F36EF20FE3A203F16EF21FC3A303F06EF23F83A2706DF27F03A2706D1A
FEA2706DF101FCA2706EF003F8A3706EF007F0A2706EF00FE0A2706EF01FC0A2706EF03F
80A2716DF07F00A3716D18FEA2716D4D5AA2716E4C5AA2716E4C5AA3716E4C5AA2716E4C
5AA2716E4C5AA2726D4CC7FCA2726D16FEA3726D4B5AA2726E4A5AA2726E4A5AA2726E4A
5AA2726E4A5AA3726E4A5AA2736D4AC8FCA2736D14FEA2736D495AA2736E485AA3736E48
5AA2736E485AA2736E485AA2736E485AA2746D48C9FCA374EBFEFEA2746D5AA2745CA274
5CA2745CA3745CA2745CA27590CAFC0103B57EB800FE6F48031FB912FEA2755AA3755A75
5A755AAF767AF5BC>I<BDFC1CFCF4FFC01DFC1DFF1EC01EF01EFCC7001F02E0C86C8009
076E7E0900810A3F800A0F807680768076808B8820808920C0A220E08920F0A420F8AB20
F0A320E0A26520C0A220809AB6FC2000525C6764525C0A1F5C5214C099B65A090792C7FC
98B612FC94BA5A1EE09BC8FC1DFC1DE052C9FC99CAFC05F0CEFCB3B3A8BA12FEA875767A
F587>80 D<0603B5FC4DB612FE051FEDFFE094B812FC0407EFFF80043F18F093BA12FC03
03DB800714FF030F02F8C76C14C04B02C0020F80037F91C8000314F892B500FC03008002
0302F0043F13FF4A4A70804A02800407804A91CA6C804A4971804A49718091B548727F49
4A727F4989494A7280494A7280498A4C84498A4991CC6C80A290B5487380A2484A7380A2
488B4B86482080A2484A7414C0A34820E0A24B864820F0A54820F84B86A5B61EFCB16C20
F8A56F626C20F0A46C20E0A26F62A26C20C0A26C20806F62A26C20006F97B6FC6C67A26C
6EDB3FF04A5C953801FFFC6D6D020701FF4A5C6D4C02C05E70496E5B6D4C02F85E6D6E90
277FE01FFC495C6D6E9027FF0003FE495C4D486D7E6D02F0496D4A91C7FC6D02F8496E6C
485B6DDAFC036F6CB55A6E01FE49DA1FE15C6E01FF05F35C6E0283DB0FF75C020702C393
B612806E02F396C8FC6EDAFFF86E5C6E6C1AF86F6E4A5C030F02FF027F14C00303DBC007
B6C9FC030092B712FC043F18F004074E153C040172157EDC001F8305014B7FDD00030200
7F95C96D15FE7813017601E013070CFC137F9BB6FC21FC88A47616F8A38821F0A27616E0
A27616C0A2761680210088775C68775C775C0B075C7714800B0049C7FCF61FF07F9975F7
95>I<BC12E0F3FFC01CFEF4FFC01DF81DFEF5FFC01EF0C7001F02E0C7000381E0001F14
FE090380090015C00A3F807680768076808876808B7681A28CA2898CA38CAA68A3689AB6
FC68A25292C9FC676764525C525C5214C0525C99B6CAFC090314FC091F14F00803B612C0
94BACBFC1DFC1DE052CCFC767E1DF005E0C7000F14FC080180746C6D7E7580090F807580
8A75807580878A8B888BA2888BA78BA78BA6FA07E079EC0FF0A388A28B76171F23E07680
76EF3FC08CBA00FC6E6FEB7F807617FF77DAF00113000B1F9138FC0FFE7791B55A0B035E
0B005E0C1F5DD100011580E4000301FCC7FC8C787AF594>I<922603FFFCED0780033FD9
FFF0EC0FC00203B600FE141F020FDBFFC0133F023F04F0137F91B800FC13FF0103EFFF03
49DA800714874901F8C7003F13EF4901C0020790B5FC017F4914004AC9123F4948824849
160748498248844A707E5A4A83488586484983A2865A86A286B5FC801B7FA280A2806E18
3FA280806E6CEF1F806F94C7FC6C14F015FEEDFFE016FF6C16F0EFFF806C17FCF0FFC06C
18FC19FF6C19C01AF06C19FC6C85747E6C866D856D856D856D856D850101857F023F1980
020F19C01403020019E0150F030018F01607DC007F16F81703EF001F060115FCF0003F19
0F85070114FE858686127EB48586A286A46D84A21CFCA27FA21CF87FA26D4E13F07FA26D
4E13E07F6D4E13C014C06E4D13806E4D130002FC4D5A02FF5E03E04B5B03FC030F5BDBFF
C0023F5B01FD02FF0103B55AD9F87F91B71280496C95C7FCD9C00F17FCD980015F90C76C
16E048020F93C8FC48DA007F14F80078030191C9FC577A75F76E>I<BA6C90BA6C023FB7
12F0A8D800010380C900010380CA0007EC8000A19126001FF8C7FC6D6F70765A7A181F6E
A15B71716E183FA26E6E71647A187F6EA15B71716E18FFA26E6E7199C8FC7A5F6EA15A71
837A17036EA15A71716E1707656E6F68536F160F6EA15A7274161F656F6E68536F163F6F
6B7286531A7F6F6B72059F6E16FF1DFF6F6E050F97C9FC52705D6F6A724C6C6E15031C03
6F6E4C6C610A077015076F6A734B6C6F140F1C0F6F6F4B6C617C141F1C1F706E4B6D600A
3F71143F7069734B6D6E147F1C7F706E4B6D600AFF7114FF709ECAFC7392C76C6E5B6370
6E4A6E5F09037213037068734A80090772130770680880496EED800F1B0F7003C0496E5F
091FF1C01F716708E0496FECE03F1B3F7102F0496F5E097FF1F07F716708F8496FECF8FF
1BFF7193C96C93CBFC741AFD1AFD71DAFFFE705D23FF71665182A2714B705DA271665182
A2724A715CA3724A715CA272655183A27291CB6C91CCFCA272645084A27249725BA27264
5084A272645084A27348735A073F63DF1F80F11F80C4777CF5CD>87
D<030FB5FC0203B612F8021F15FF91B812E0010317F84917FE011F9026FC001F6D7E4901
800103806F010080496D6E13F890B56F7F6F80727F486E6E7F8784878487A26C5C72806D
5BA26D5B6D5BD907FEC9FCEB00F091CAFCA5183F0403B7FC93B8FC151F92B9FC140F023F
150049B612C0010702FCC7FC4914E0013F14804949C8FC48B512F84814E0485C5D4891C9
FC485B5A5C5A5CA2B5FC5CA360A360806C5F6E5D6C18DF6EED1F9F6C6D037F14FC6C6EDA
FF1FEBFF806C02E0902603FE0FECFF806C02F8D90FFC16C06C02FF9038FFF8076C92B548
7E013FEEC001010F4C7E01014BC7123FD9001F02F002031480DA007F90CCFC5A507BCE60
>97 D<93383FFFE00307B67E033F15F04AB712FE0207707E021F83027F8391B526FC003F
7F010302E001077F490280497F4949C78049495C495B49494A7F90B55AA2485C5A5D5A92
C86C5B5A725B485B725B48715B060013C0071EC7FC4895C8FC5CA4B5FCAF7EA280A27EA3
6C7FA2F20FC06CF11FE0816C193F6F17C06C197F6C806FEEFF806C4E13006D6D5D6D6D4B
5A6D6D4B5A6D6D6C141F6D02E0EC7FF86D02F8903803FFF0010002FF013F13C06E91B65A
021F94C7FC020716FC020116F0DA003F15C0030702FCC8FCDB003F13C04B5079CE58>99
D<93381FFFE00303B6FC033F15E092B712F8020716FE021F707E4AD9FC0114E091B526E0
001F7F49028001077F010749C76C7F494902007F49496F7E49496F1380494917C08590B5
486F13E0485C487213F0A24891C914F885481AFC5C5A7313FE5AA25C5AA21BFF85A2B5FC
A291BBFCA51BFE02FCCCFCA67EA3807EA37EA26C7F1B7E1BFF6C807E6F5E6C1AFE6C6E16
036FEE07FC6D180F6D6DEE1FF86D6DEE3FF06D01FFEEFFE06D6E4A13C06D02E0020F1380
010002FC023F13006E903AFFC007FFFE021F91B65A020717F0020117C06E6C93C7FC030F
15FC030115C0DB000701F8C8FC50507BCE5B>101 D<EF7FFE041FB512C093B612F00307
15FC031F15FF037F168092B5D8F01F13C00203EC803F4A49484813E04A4915F04A4990B5
FC4A5B4A494814F816C091B51280A25B16005B7114F05D497013E0A27213C0060F130072
5A95C8FCB2B912E0A8D8000791CAFCB3B3B3A7007FB712FEA845797AF83C>I<ECFFFEB6
FCA8C67E131F7FB3AD953803FFF0063FEBFF804DB612E0050715F8051F15FE057F819426
FFFC07804CD9C001804C48C780DC07F8804C4882EE1FC04C486E7F4CC8FC047E835E6F48
81A24C835EA25EA35EA493C9FCB3B3A6B8D8F001B812E0A8637879F76E>104
D<14FE903803FF80010F13E0497F497F497F90B57EA24880A24881A76C92C7FCA26C5CA2
6D5B6D5B6D5B6D5B01031380D900FEC8FC91C9FCB0ECFFFE007FB5FCA8C67E131F7FB3B3
B3A5B812C0A82A7979F836>I<ECFFFEB6FCA8C67E131F7FB3AE96B71280A8070791C7FC
070113F04F13C04F5B4F90C8FCF13FFEF17FF84F5A4E5B06075B4E5B4E48C9FC4E5A4E5A
4D485A4D13C04D5B4D90CAFCEF3FFEEF7FF84D5A4C7F4C7F160F4C7F4C7F4C8092B77EA2
85858516FCDCF07F7F4C6C7F4C6C7F0480814B487E4B6D80718086718083727F727F8684
72807280877280847280737F8785737F73808873804F14F8B8D8C001B712FCA85E787AF7
68>107 D<ECFFFEB6FCA8C67E131F7FB3B3B3B3B3ABB812E0A82B7879F736>I<902601FF
FC912603FFF0933807FFE0B6033FD9FF80037F13FF4DB600E00203B612C0050703F8020F
15F0051F03FE023F15FC057F6F91B77E9426FFFC076E48D9F80F7F4CD9C0016E48D98003
804C48C79128E007FC000180C66CDA07F86EDA0FF07F011F4A48704848826DDA1FC0EF3F
804C486E6D48C86C7F4CC815FE047E7148834CEFFDF8DBFDF86FD9FFF081A2DBFFF04E83
4C60A24C60A34C95C9FCA493C95CB3B3A6B8D8F001B8D8E003B812C0A89A4E79CDA5>I<
902601FFFC913803FFF0B6033FEBFF804DB612E0050715F8051F15FE057F819426FFFC07
804CD9C001804C48C780C66CDA07F880011F4A48826DEC1FC04C486E7F4CC8FC047E835E
DBFDF881A2DBFFF0835EA25EA35EA493C9FCB3B3A6B8D8F001B812E0A8634E79CD6E>I<
93380FFFF04BB67E031F15F892B8FC020317C0020F17F0023F49C66C13FC4A01E001077F
49B5008001016D7E4949C86C7F49496F7F49496F7F49496F7F49496F7F49496F7F90B548
6F7F481B8092CAFC481BC0481BE04A83481BF0A2481BF8A348497113FCA3481BFEA5B51A
FFAE6C1BFEA46C1BFC6E5FA26C1BF8A36C6D94B512F0A26C1BE06F5D6C1BC06C1B806F5D
6C6E4B14006D6D4B5B6D6D4B5B6D6D4B5B6D6D4B5B6D6D6C49B55A010102E0010714806D
02FE017F91C7FC023F90B712FC6E5F020717E0020094C8FC031F15F8030315C0DB000F01
F0C9FC58507BCE63>I<DAFFFEEC7FFEB60207B512F0053F14FF4CB712C0040716F0041F
16FC4C16FF93B5D8803F8092B526F8000780C66C03C06D14F0011F92C8806D4A6F7F04F8
6F7F4C814C6F7F4C18804C6F14C093C97E1DE0A27414F0A27414F8A21DFCA2871DFEA487
1DFFAE1DFEA263A31DFCA298B5FC1DF8A21DF0621DE0621DC062701880704B1400A2704B
5B704B5B704B5B04FE92B55A704A5C05C00107148005F0011F91C7FCDC7FFE90B512FC04
1FB75A7016E0040393C8FC040015FC051F14C0050101F8C9FC94CCFCB3A6B812F0A8606F
7ACD6E>I<902601FFF8903803FF80B6021F13F0057F13FC94B6FC040315804C15C09326
0FFE0F13E093261FF01F13F005E014F8C66C91383F803F011FEC7F006D027E4913FC16FE
EDF9FC5E5E15FB5E03FF6E13F8A24C6D13F07213E07213C04C01011300F0007C96C7FC93
CAFCA65DB3B3A2B812FCA8464E7ACD52>114 D<912603FFFEEB03C0027F9039FFE00FE0
0103B6EAFC3F010F92B5FC133F49EB00072601FFF0EB007F480180141F4890C812074848
814981484881003F177F5B183F127FA2181F12FF7FA27F7F6D6CED0FC06E92C7FC14F814
FF6C14FCEDFFE0EEFF806C16F017FC6C16FF18C06C17F06C836C836C836C836D1780011F
17C0010717E0010117F06D7E020F16F81400030315FCED000F1600051F13FE83007E1603
B48283187F6D163FA36D161FA219FC7FA27F6DEE3FF8A26D17F06D167F6D17E06E15FF02
E0020313C06E4A138002FE021F1300913AFFC003FFFE92B65A01E316F001C016C0D9003F
92C7FC48010714F80078D9007F90C8FC3F5079CE4E>I<ED7F80A715FFA55CA35CA35CA2
5CA25C5CA25C91B5FC5B5B5B5B133F90B912C01207BAFCA6D800070280C8FCB3B3A3F007
F8AE180F6D6E14F0A2181F6D17E070133F6D17C070137F6E6DEBFF806ED9FF0313006E91
B5FC6E5D02035D6E15F06E6C5C030F14809226007FFCC7FC3D6E7CEC4D>I<91B5933801
FFFEB74AB6FCA8C66C93C7FC011F183F6D84B3B3A962A362A397B5FC6D5FA2616D6E5CF1
0FEF6DDD1FCF7F70DA3F8F14C06D6E02FFEDFFE06E6D0103130F6E01FFEB1FFE6E91B512
F8020716F0020116E06E6C1580030FECFC00DB007F01E003E0C7FC634F79CD6E>I<B86C
023FB512FEA8D8001F91C90001EBFC006D6E9238003FE0A26D6E4C5AA26D6E4C5AA26D6E
4B90C7FCA26D6E5E1A036E6D5E1A07A26E6D4B5AA26E6D4B5AA26E6E4A5AA26E6E4A5AA2
6E6E5D1AFF6E6E92C8FC61A26E6E495AA26F6D495AA26F6D495AA26F6D495AA26F02805B
193F6F02C05B197FA26F6E485AA26F02F190C9FCA26FECFBFEA270EBFFFCA2705CA2705C
A3705CA2705CA2705CA27091CAFCA2705BA2715AA3715AA2715AA24D5AA24D5AA26017FF
95CBFCD801F85CEA07FE261FFF80495A487F486D495AA24C5AB57E4C5AA24C5A4C5A16FF
4A5C6C4A90CCFCED07FE4A485A6C49485A6C9038007FF09039FE03FFE06CB65A6C92CDFC
00015C6C14F8013F13C0D907FECEFC5F6F7CCC68>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
-57 1327 3957 7 v -57 1792 7 465 v Blue 683 1571 a Fi(MySQL)66
b(In)-6 b(terface)66 b(for)g(P)-6 b(arit)g(y)p Black
3893 1792 V -57 1799 3957 7 v 19 1861 3895 69 v 3893
1861 69 474 v 1434 2467 a(R.)67 b(Suleiman)p 615 3687
2614 7 v 615 4462 7 775 v Red 993 3927 a(Hall)i(A)c(Data)i(Analysis)
1487 4170 y(W)-17 b(orkshop)p Black 1570 4414 a Fh(December)29
b(2001)p 3222 4462 V 615 4469 2614 7 v 691 4531 2551
69 v 3222 4531 69 793 v 4125 5565 a
 0 setgray
 4125 5565 a eop
%%Page: 2 2
2 1 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1341 413 1180 7 v 1341 667 7 254 v Blue 1399 612 a Fg(Introduction)p
Black 2513 667 V 1341 674 1180 7 v 2517 742 73 268 v
1410 742 1180 73 v -135 1263 a Ff(\017)70 b Fg(The)57
b(database)f(is)g(implemented)i(in)e(MySQL)p Blue 59
1665 a(http://www)-12 b(.m)m(ysql.org)p 59 1750 1872
10 v Black -135 2153 a Ff(\017)70 b Fg(C++)56 b(class)g(\(T)-24
b(aMysql\))55 b(wr)s(itten)h(in)g(R)l(OO)-8 b(T)57 b(to)59
2519 y(interf)-6 b(ace)55 b(with)h(the)g(database)p Blue
59 2921 a(http://root.cer)5 b(n.ch)p 59 3003 1588 10
v Black -135 3409 a Ff(\017)70 b Fg(Scr)s(ipt)55 b(to)h(gener)n(ate)g
(ascii)h(\002les)f(from)g(the)59 3775 y(database)m(,)g(and)g(one)h(to)f
(do)h(the)f(re)-6 b(v)h(erse)m(,)59 4141 y(gener)n(ate)56
b(a)h(database)f(from)g(the)g(\002le:)206 4624 y Fe(>)146
b(ascii2db.pl)206 5355 y(>)g(db2ascii.pl)141 b(run=100)4125
5565 y
 0 setgray
 4125 5565 a eop
%%Page: 3 3
3 2 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1474 579 914 7 v 1474 832 7 254 v Blue 1532 777 a Fg(F)-6
b(eatures)p Black 2380 832 V 1474 839 914 7 v 2384 908
73 268 v 1543 908 914 73 v -135 1428 a Ff(\017)70 b Fg(F)-6
b(or)57 b(the)f(\224P)-8 b(an\224)55 b(code)m(,)h(the)g(database)g
(contains:)17 1871 y(1.)70 b(Logical)56 b(P)-8 b(ar)n(ameters)56
b(that)f(aff)-6 b(ect)55 b(prog)n(r)n(am)257 2237 y(\003o)m(w)17
2664 y(2.)70 b(DataMap)56 b(\(correspondence)f(of)h('k)l(e)l(ys')g(to)
257 3029 y(e)-6 b(v)h(ent)55 b(b)l(uff)-6 b(er\))17 3456
y(3.)70 b(Calibr)n(ation)56 b(P)-8 b(ar)n(ameters)55
b(used)h(b)l(y)h(prog)n(r)n(am)17 3883 y(4.)70 b(Cuts)55
b(and)i(the)f(e)-6 b(v)h(ent)56 b(inter)6 b(v)-5 b(als)55
b(associated)-135 4371 y Ff(\017)70 b Fg(Run)57 b(inde)-6
b(x)g(ed)56 b(lookup)g(of)g(constants)-135 4858 y Ff(\017)70
b Fg(K)-8 b(eep)56 b(a)h(change)f(log:)70 b(user)-10
b(,)55 b(date)m(,)h(time)m(,)59 5224 y(comment)4125 5565
y
 0 setgray
 4125 5565 a eop
%%Page: 4 4
4 3 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1194 322 1474 7 v 1194 575 7 254 v Blue 1253 520 a Fg(Ascii)55
b(Database)p Black 2660 575 V 1194 582 1474 7 v 2664
651 73 268 v 1263 651 1474 73 v -195 979 a Fd(#)c(Default)f(control)g
(file.)101 b(If)51 b(the)f(file)h(for)f(your)h(run)f(is)h(not)-195
1099 y(#)g(around,)f(this)g(file)h(will)f(be)h(used)f(to)h(control)f
(the)g(code.)9 1219 y(runtype)g(BEAM)9 1339 y(lobeam)101
b(12000)152 b(#)50 b(cut)h(to)g(define)f(beam)g(too)h(low)9
1459 y(burpcut)f(5000)9 1580 y(oversamp)100 b(10)204
b(#)50 b(oversampling)g(factor)9 1700 y(windelay)100
b(8)255 b(#)50 b(helicity)g(delay)h(in)f(windows)9 1820
y(pairtype)100 b(quad)9 1940 y(dacnoise)49 b(adc)i(0)g(chan)f(0)h
(slope)f(0.901)h(int)f(42.1)9 2060 y(dacnoise)f(adc)i(0)g(chan)f(1)h
(slope)f(0.902)h(int)f(42.2)9 2181 y(dacnoise)f(adc)i(1)g(chan)f(0)h
(slope)f(0.911)h(int)f(44.1)9 2301 y(dacnoise)f(adc)i(1)g(chan)f(1)h
(slope)f(0.912)h(int)f(44.2)9 2421 y(dacnoise)f(adc)i(2)g(chan)f(0)h
(slope)f(0.921)h(int)f(44.1)9 2541 y(dacnoise)f(adc)i(2)g(chan)f(1)h
(slope)f(0.922)h(int)f(44.2)9 2661 y(ped)g(adc)h(0)f(chan)h(0)g(value)f
(101.3)9 2781 y(ped)g(adc)h(0)f(chan)h(1)g(value)f(103.3)9
2902 y(ped)g(adc)h(1)f(chan)h(0)g(value)f(111.3)9 3022
y(ped)g(adc)h(1)f(chan)h(1)g(value)f(113.3)9 3142 y(ped)g(adc)h(2)f
(chan)h(0)g(value)f(121.3)9 3262 y(ped)g(adc)h(2)f(chan)h(1)g(value)f
(123.3)9 3382 y(header)g(adc)356 b(ffadc000)49 b(fffff000)9
3503 y(header)h(timeboard)g(fffbd000)f(fffff000)9 3623
y(header)h(tir)356 b(ffdaf000)49 b(fffff000)9 3743 y(header)h(scaler)
203 b(fffca000)49 b(fffff000)-195 3863 y(#)153 b(table)101
b(device-type)49 b(device-name)h(adc)g(startchan)g(evbuff-offset)g
(channel-names\(keys\))9 3983 y(datamap)151 b(bcm)407
b(bcm1)356 b(0)203 b(0)458 b(22)661 b(bcm1)9 4103 y(datamap)151
b(bcm)407 b(bcm2)356 b(0)203 b(3)458 b(24)661 b(bcm2)9
4224 y(datamap)151 b(bpm)407 b(bpm8)356 b(1)203 b(0)458
b(30)203 b(bpm8xp)50 b(bpm8xm)h(bpm8yp)f(bpm8ym)9 4344
y(datamap)151 b(tir)407 b(tir)g(0)203 b(0)458 b(34)407
b(helicity)50 b(realtime)9 4464 y(datamap)151 b(timeboard)101
b(timeboard)g(0)203 b(0)509 b(0)763 b(dac)9 4584 y(ncuts)50
b(14)9 4704 y(evlo)g(10)h(10)f(10)h(10)g(10)f(10)h(0)g(0)f(0)h(0)g(20)g
(20)f(40)h(30)9 4825 y(evhi)f(40)h(40)f(40)h(40)g(40)f(20)h(0)g(0)f(0)h
(0)g(60)g(60)f(70)h(60)9 4945 y(evint)f(21232)101 b(23442)50
b(4)102 b(1)9 5065 y(evint)50 b(32232)101 b(34554)50
b(6)102 b(1)9 5185 y(evint)50 b(35665)101 b(37440)50
b(4)102 b(1)9 5305 y(evint)50 b(42112)101 b(43443)50
b(7)102 b(1)9 5425 y(evint)50 b(56712)101 b(58142)50
b(8)102 b(1)4125 5565 y
 0 setgray
 4125 5565 a eop
%%Page: 5 5
5 4 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
906 423 2050 7 v 906 680 7 257 v Blue 964 625 a Fg(Database)56
b(Schematic)p Black 2948 680 V 906 687 2050 7 v 2952
756 73 271 v 975 756 2050 73 v 173 5338 a @beginspecial
0 @llx 0 @lly 602 @urx 521 @ury 2073 @rwi 2520 @rhi @setspecial
%%BeginDocument: dbdiag.eps
%!PS-Adobe-2.0 EPSF-2.0
%%Title: dbdiag.eps
%%Creator: fig2dev Version 3.2 Patchlevel 0-beta3
%%CreationDate: Sat Oct 13 11:20:21 2001
%%For: suleiman@alquds.jlab.org (Riad Suleiman)
%%Orientation: Portrait
%%BoundingBox: 0 0 602 521
%%Pages: 0
%%BeginSetup
%%EndSetup
%%Magnification: 0.9700
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
-51.0 566.0 translate
1 -1 scale
.9 .9 scale % to make patterns same scale as in xfig

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index show		% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% this is the pattern fill program from the Second edition Reference Manual
% with changes to call the above pattern fill
% left30
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 16 true [ 32 0 0 -16 0 16 ]
	{<c000c000300030000c000c000300030000c000c000300030
	000c000c00030003c000c000300030000c000c0003000300
	00c000c000300030000c000c00030003>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P1 exch def
1.1111 1.1111 scale %restore scale

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def
%%EndProlog

$F2psBegin
10 setmiterlimit
n -1000 10712 m -1000 -1000 l 12212 -1000 l 12212 10712 l cp clip
 0.05820 0.05820 sc
7.500 slw
% Ellipse
n 9636 8738 54 54 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 638.80 578.93]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 10236 8738 54 54 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 678.80 578.93]  PATmp PATsp ef gr PATusp gs col0 s gr

% Ellipse
n 9937 8737 54 54 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P1 [16 0 0 -8 658.87 578.87]  PATmp PATsp ef gr PATusp gs col0 s gr

% Polyline
n 3000 1800 m 4200 1800 l gs col0 s gr 
% Polyline
n 3900 1800 m 4200 1500 l gs col0 s gr 
% Polyline
n 3900 1800 m 4200 2100 l gs col0 s gr 
% Polyline
n 6600 1800 m 7800 1800 l gs col0 s gr 
% Polyline
n 7500 1800 m 7800 1500 l gs col0 s gr 
% Polyline
n 7500 1800 m 7800 2100 l gs col0 s gr 
% Polyline
n 900 1350 m 3000 1350 l gs col0 s gr 
% Polyline
n 4200 1350 m 6600 1350 l gs col0 s gr 
% Polyline
n 7800 1350 m 10200 1350 l gs col0 s gr 
% Polyline
n 900 7050 m 2700 7050 l gs col0 s gr 
% Polyline
n 900 900 m 3000 900 l 3000 2600 l 900 2600 l cp gs col0 s gr 
% Polyline
n 4200 900 m 6600 900 l 6600 2800 l 4200 2800 l cp gs col0 s gr 
% Polyline
n 7800 800 m 10200 800 l 10200 3000 l 7800 3000 l cp gs col0 s gr 
% Polyline
n 6825 4275 m 11125 4275 l gs col0 s gr 
% Polyline
n 8775 3525 m 8475 3825 l gs col0 s gr 
% Polyline
n 8775 3525 m 9075 3825 l gs col0 s gr 
% Polyline
n 8775 3000 m 8775 3825 l gs col0 s gr 
% Polyline
n 6900 3800 m 11200 3800 l 11200 6600 l 6900 6600 l cp gs col0 s gr 
% Polyline
n 8100 6600 m 8100 7200 l gs col0 s gr 
% Polyline
n 7800 6600 m 8100 6900 l gs col0 s gr 
% Polyline
n 8400 6600 m 8100 6900 l gs col0 s gr 
% Polyline
n 6900 7200 m 9450 7200 l 9450 9700 l 6900 9700 l cp gs col0 s gr 
% Polyline
n 6900 7650 m 9450 7650 l gs col0 s gr 
% Polyline
n 2696 7950 m 2704 7950 l gs col0 s gr
% Polyline
n 900 6600 m 2700 6600 l 2700 9300 l 900 9300 l cp gs col0 s gr 
/Times-Roman ff 270.00 scf sf
1200 1200 m
gs 1 -1 sc (System) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 1200 m
gs 1 -1 sc (Item) col0 sh gr
/Times-Roman ff 270.00 scf sf
4500 1200 m
gs 1 -1 sc (SubSystem) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 2400 m
gs 1 -1 sc (description) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 2025 m
gs 1 -1 sc (systemName) col0 sh gr
/Times-Roman ff 270.00 scf sf
4500 2700 m
gs 1 -1 sc (description) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 1650 m
gs 1 -1 sc (systemId*) col0 sh gr
/Times-Roman ff 270.00 scf sf
4500 1650 m
gs 1 -1 sc (subsystemId*) col0 sh gr
/Times-Roman ff 270.00 scf sf
4500 2025 m
gs 1 -1 sc (subsystemName) col0 sh gr
/Times-Roman ff 270.00 scf sf
4500 2325 m
gs 1 -1 sc (systemId) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 1650 m
gs 1 -1 sc (itemId*) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 2100 m
gs 1 -1 sc (subsystemId) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 2325 m
gs 1 -1 sc (length) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 2550 m
gs 1 -1 sc (type) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 2850 m
gs 1 -1 sc (description) col0 sh gr
/Times-Roman ff 270.00 scf sf
8100 1875 m
gs 1 -1 sc (itemName) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 6375 m
gs 1 -1 sc (comment) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 6150 m
gs 1 -1 sc (time) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 4575 m
gs 1 -1 sc (RunIndexId*) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 5475 m
gs 1 -1 sc (itemId) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 5700 m
gs 1 -1 sc (itemValueId) col0 sh gr
/Times-Roman ff 270.00 scf sf
8325 4125 m
gs 1 -1 sc (RunIndex) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 7950 m
gs 1 -1 sc (itemValueId*) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 8775 m
gs 1 -1 sc (value) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 9075 m
gs 1 -1 sc (author) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 9600 m
gs 1 -1 sc (comment) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 9375 m
gs 1 -1 sc (time) col0 sh gr
/Times-Roman ff 270.00 scf sf
7050 7500 m
gs 1 -1 sc (item_name_VALUE) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 5025 m
gs 1 -1 sc (RunNumber) col0 sh gr
/Times-Roman ff 270.00 scf sf
7125 5925 m
gs 1 -1 sc (author) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 7530 m
gs 1 -1 sc (RunNumber*) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 8790 m
gs 1 -1 sc (time) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 9105 m
gs 1 -1 sc (comment) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 6900 m
gs 1 -1 sc (RunInfo) col0 sh gr
/Times-Roman ff 270.00 scf sf
1200 8160 m
gs 1 -1 sc (Experiment) col0 sh gr
$F2psEnd
rs
end

%%EndDocument
 @endspecial 4125 5565 a
 0 setgray
 4125 5565 a eop
%%Page: 6 6
6 5 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1089 322 1683 7 v 1089 575 7 254 v Blue 1148 520 a Fg(Database)56
b(T)-24 b(ab)l(les)p Black 2765 575 V 1089 582 1683 7
v 2768 651 73 268 v 1158 651 1683 73 v 690 836 2550 7
v 687 982 7 147 v 1842 939 a Fc(RunInf)n(o)p 3236 982
V 690 989 2550 7 v 687 1136 7 147 v 794 1092 a(column)20
b(name)p 1317 1136 V 207 w(type)p 1795 1136 V 344 w(e)n(xample)p
2657 1136 V 598 w(comment)p 3236 1136 V 690 1143 2550
7 v 690 1177 V 687 1323 7 147 v 794 1279 a(RunNumber)p
1317 1323 V 250 w(int)p 1795 1323 V 402 w(2000)p 2657
1323 V 706 w(Pr)q(imar)r(y)f(k)o(e)o(y)p 3236 1323 V
687 1470 V 794 1426 a(Exper)q(iment)p 1317 1470 V 272
w(v)n(archar)p 1795 1470 V 244 w(\223HAPPEXII\224)p 2657
1470 V 3236 1470 V 687 1616 V 794 1572 a(time)p 1317
1616 V 496 w(datetime)p 1795 1616 V 206 w(2003-12-09)i(11:30:45)p
2657 1616 V 3236 1616 V 687 1762 V 794 1718 a(comment)p
1317 1762 V 340 w(te)n(xt)p 1795 1762 V 2657 1762 V 3236
1762 V 690 1769 2550 7 v 629 2045 2673 7 v 626 2192 7
147 v 1847 2148 a(System)p 3298 2192 V 629 2198 2673
7 v 626 2345 7 147 v 732 2301 a(column)f(name)p 1255
2345 V 207 w(type)p 1696 2345 V 307 w(e)n(xample)p 2232
2345 V 273 w(comment)p 3298 2345 V 629 2352 2673 7 v
629 2386 V 626 2532 7 147 v 732 2489 a(systemId)p 1255
2532 V 348 w(int)p 1696 2532 V 365 w(1)p 2232 2532 V
498 w(Pr)q(imar)r(y)f(k)o(e)o(y)g(auto)h(increment)p
3298 2532 V 626 2679 V 732 2635 a(systemName)p 1255 2679
V 219 w(v)n(archar)p 1696 2679 V 207 w(\223dacnoise\224)p
2232 2679 V 3298 2679 V 626 2825 V 732 2781 a(descr)q(iption)p
1255 2825 V 288 w(te)n(xt)p 1696 2825 V 2232 2825 V 3298
2825 V 629 2832 2673 7 v 572 3108 2785 7 v 569 3254 7
147 v 1784 3211 a(SubSystem)p 3354 3254 V 572 3261 2785
7 v 569 3408 7 147 v 676 3364 a(column)g(name)p 1301
3408 V 309 w(type)p 1742 3408 V 307 w(e)n(xample)p 2213
3408 V 208 w(comment)p 3354 3408 V 572 3415 2785 7 v
572 3449 V 569 3595 7 147 v 676 3551 a(subsystemId)p
1301 3595 V 337 w(int)p 1742 3595 V 365 w(1)p 2213 3595
V 433 w(Pr)q(imar)r(y)f(k)o(e)o(y)g(auto)h(increment)p
3354 3595 V 569 3742 V 676 3698 a(subsystemName)p 1301
3742 V 208 w(v)n(archar)p 1742 3742 V 207 w(\223adc0\224)p
2213 3742 V 3354 3742 V 569 3888 V 676 3844 a(systemId)p
1301 3888 V 450 w(int)p 1742 3888 V 365 w(1)p 2213 3888
V 433 w(F)n(oreign)f(k)o(e)o(y)h(ref)n(erence)g(System)p
3354 3888 V 569 4034 V 676 3990 a(descr)q(iption)p 1301
4034 V 390 w(te)n(xt)p 1742 4034 V 2213 4034 V 3354 4034
V 572 4041 2785 7 v 561 4317 2809 7 v 558 4464 7 147
v 1896 4420 a(Item)p 3366 4464 V 561 4470 2809 7 v 558
4617 7 147 v 664 4573 a(column)g(name)p 1188 4617 V 207
w(type)p 1628 4617 V 308 w(e)n(xample)p 2099 4617 V 207
w(comment)p 3366 4617 V 561 4624 2809 7 v 561 4658 V
558 4804 7 147 v 664 4760 a(itemId)p 1188 4804 V 437
w(int)p 1628 4804 V 366 w(1)p 2099 4804 V 432 w(Pr)q(imar)r(y)f(k)o(e)o
(y)g(auto)h(increment)p 3366 4804 V 558 4951 V 664 4907
a(itemName)p 1188 4951 V 308 w(v)n(archar)p 1628 4951
V 208 w(\223chan0\224)p 2099 4951 V 3366 4951 V 558 5097
V 664 5053 a(subsystemId)p 1188 5097 V 235 w(int)p 1628
5097 V 366 w(1)p 2099 5097 V 432 w(F)n(oreign)g(k)o(e)o(y)f(ref)n
(erence)h(SubSystem)p 3366 5097 V 558 5243 V 664 5199
a(length)p 1188 5243 V 438 w(int)p 1628 5243 V 366 w(2)p
2099 5243 V 432 w(Number)f(of)h(elements)p 3366 5243
V 558 5390 V 664 5346 a(type)p 1188 5390 V 497 w(v)n(archar)p
1628 5390 V 208 w(\223\003oat\224)p 2099 5390 V 3366
5390 V 558 5536 V 664 5492 a(descr)q(iption)p 1188 5536
V 288 w(te)n(xt)p 1628 5536 V 2099 5536 V 3366 5536 V
561 5543 2809 7 v 4125 5565 a
 0 setgray
 4125 5565 a eop
%%Page: 7 7
7 6 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
259 1012 3412 7 v 256 1158 7 147 v 1815 1114 a Fc(RunInde)n(x)p
3667 1158 V 259 1165 3412 7 v 256 1311 7 147 v 363 1268
a(column)20 b(name)p 886 1311 V 207 w(type)p 1419 1311
V 399 w(e)n(xample)p 2175 1311 V 492 w(comment)p 3667
1311 V 259 1318 3412 7 v 259 1353 V 256 1499 7 147 v
363 1455 a(RunInde)n(xId)p 886 1499 V 272 w(int)p 1419
1499 V 457 w(1)p 2175 1499 V 717 w(Pr)q(imar)r(y)f(k)o(e)o(y)h(auto)g
(increment)p 3667 1499 V 256 1645 V 363 1601 a(RunNumber)p
886 1645 V 250 w(int)p 1419 1645 V 457 w(2000)p 2175
1645 V 3667 1645 V 256 1792 V 363 1748 a(itemId)p 886
1792 V 437 w(int)p 1419 1792 V 457 w(1)p 2175 1792 V
717 w(F)n(oreign)g(k)o(e)o(y)g(ref)n(erence)g(Item)p
3667 1792 V 256 1938 V 363 1894 a(itemV)-5 b(alueId)p
886 1938 V 262 w(int)p 1419 1938 V 457 w(1)p 2175 1938
V 717 w(F)n(oreign)20 b(k)o(e)o(y)g(ref)n(erence)g(item)p
3119 1894 22 7 v 24 w(name)p 3319 1894 V 26 w(V)-6 b(ALUE)p
3667 1938 7 147 v 256 2084 V 363 2040 a(author)p 886
2084 V 430 w(v)n(archar)p 1419 2084 V 299 w(\223dbmanager\224)p
2175 2084 V 3667 2084 V 256 2231 V 363 2187 a(time)p
886 2231 V 496 w(timestamp)p 1419 2231 V 206 w(20000502165717)p
2175 2231 V 3667 2231 V 256 2377 V 363 2333 a(comment)p
886 2377 V 340 w(te)n(xt)p 1419 2377 V 2175 2377 V 3667
2377 V 259 2384 3412 7 v 473 2733 2985 7 v 470 2879 7
147 v 1500 2835 a(dacnoise)p 1785 2835 22 7 v 27 w(adc0)p
1964 2835 V 26 w(chan0)p 2181 2835 V 27 w(V)g(ALUE)p
3454 2879 7 147 v 473 2886 2985 7 v 470 3032 7 147 v
576 2988 a(column)20 b(name)p 1099 3032 V 207 w(type)p
1632 3032 V 399 w(e)n(xample)p 2388 3032 V 493 w(comment)p
3454 3032 V 473 3039 2985 7 v 473 3073 V 470 3220 7 147
v 576 3176 a(itemV)-5 b(alueId)p 1099 3220 V 262 w(int)p
1632 3220 V 457 w(1)p 2388 3220 V 718 w(Pr)q(imar)r(y)18
b(k)o(e)o(y)i(auto)g(increment)p 3454 3220 V 470 3366
V 576 3322 a(v)n(alue)p 746 3322 22 7 v 26 w(1)p 1099
3366 7 147 v 399 w(\223\003oat\224)p 1632 3366 V 351
w(1.82)p 2388 3366 V 3454 3366 V 470 3512 V 576 3468
a(author)p 1099 3512 V 430 w(v)n(archar)p 1632 3512 V
299 w(\223smith\224)p 2388 3512 V 3454 3512 V 470 3659
V 576 3615 a(time)p 1099 3659 V 496 w(timestamp)p 1632
3659 V 206 w(20000502165717)p 2388 3659 V 3454 3659 V
470 3805 V 576 3761 a(comment)p 1099 3805 V 340 w(te)n(xt)p
1632 3805 V 2388 3805 V 3454 3805 V 473 3812 2985 7 v
1955 4065 a(.)1955 4134 y(.)1955 4203 y(.)p 620 4426
2690 7 v 617 4573 7 147 v 1739 4529 a Fb(:)h(:)h(:)p
1944 4529 22 7 v 66 w Fc(V)-6 b(ALUE)p 3306 4573 7 147
v 620 4580 2690 7 v 1955 4833 a(.)1955 4902 y(.)1955
4971 y(.)4125 5565 y
 0 setgray
 4125 5565 a eop
%%Page: 8 8
8 7 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1125 793 1612 7 v 1125 1089 7 296 v Blue 1183 992 a Fg(Access)55
b(Pr)s(ivilege)p Black 2729 1089 V 1125 1096 1612 7 v
2733 1164 73 310 v 1194 1164 1612 73 v -195 1604 a(There)i(are)f(tw)n
(o)g(diff)-6 b(erent)55 b(le)-6 b(v)h(els)56 b(of)g(access)f(to)h(the)
-195 1970 y(database:)-135 2490 y Ff(\017)70 b Fg(database)56
b(manager)-135 2978 y Ff(\017)70 b Fg(users)p 287 3296
3356 7 v 284 3588 7 293 v 1656 3500 a Fa(user)38 b(tab)m(le)p
3639 3588 V 287 3595 3356 7 v 284 3888 7 293 v 391 3800
a(Host)p 1048 3888 V 472 w(User)p 1968 3888 V 622 w(P)-6
b(ass)l(w)o(ord)p 2818 3888 V 239 w(Pr)r(ivileges)p 3639
3888 V 287 3895 3356 7 v 287 3929 V 284 4222 7 293 v
391 4134 a(localhost)p 1048 4222 V 204 w(dbmanager)p
1968 4222 V 203 w(non-NULL)p 2818 4222 V 204 w(none)p
3639 4222 V 284 4514 V 391 4426 a(\045)p 1048 4514 V
637 w(db)m(user)p 1968 4514 V 490 w(NULL)p 2818 4514
V 488 w(none)p 3639 4514 V 287 4521 3356 7 v -195 4825
a(T)-17 b(ab)m(le)49 b(1:)71 b(MySQL)48 b(user)h(tab)m(le)n(.)81
b(An)n(y)49 b(user)g(from)g(an)n(y)g(host)g(can)g(connect)e(to)-195
5069 y(the)39 b(database)n(.)4125 5565 y
 0 setgray
 4125 5565 a
eop
%%Page: 9 9
9 8 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
546 1905 2838 7 v 543 2198 7 293 v 1715 2110 a Fa(db)38
b(tab)m(le)p 3380 2198 V 546 2205 2838 7 v 543 2497 7
293 v 650 2410 a(Host)p 1040 2497 V 205 w(Db)p 1639 2497
V 419 w(User)p 2560 2497 V 621 w(Pr)r(ivileges)p 3380
2497 V 546 2504 2838 7 v 546 2539 V 543 2831 7 293 v
650 2743 a(\045)p 1040 2831 V 370 w(pandb)p 1639 2831
V 205 w(dbmanager)p 2560 2831 V 202 w(all)p 3380 2831
V 543 3124 V 650 3036 a(\045)p 1040 3124 V 370 w(pandb)p
1639 3124 V 205 w(\045)p 2560 3124 V 794 w(select)p 3380
3124 V 546 3131 2838 7 v -195 3435 a(T)-17 b(ab)m(le)54
b(2:)80 b(MySQL)54 b(db)g(tab)m(le)n(.)95 b(The)54 b(dbmanager)d(has)i
(all)j(pr)r(ivileges)d(in)i(the)-195 3679 y(pandb)31
b(database)n(.)43 b(An)n(y)33 b(user)f(that)g(can)g(connect)f(can)h
(read)g(an)n(y)f(of)i(the)g(tab)m(les)-195 3923 y(in)39
b(the)g(pandb)d(database)n(.)4125 5565 y
 0 setgray
 4125 5565 a
eop
%%Page: 10 10
10 9 bop -195 5565 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.72322 SLW 0. setgray  14.22636 false 11.17674
neg 11.17674 neg 262.05904 316.06854 .5 Frame  gsave 0.72322 SLW 0.
setgray 0 setlinecap stroke  grestore end
 
@endspecial
1245 850 1371 7 v 1245 1105 7 256 v Blue 1304 1050 a
Fg(W)-6 b(eb)56 b(Interf)-6 b(ace)p Black 2609 1105 V
1245 1112 1371 7 v 2612 1181 73 269 v 1314 1181 1371
73 v -79 2946 a(-)70 b(db)l(user)6 b(:)p Blue 59 3348
a(http://alquds)m(.jlab)-8 b(.org/panDB)p 59 3433 2498
10 v Black -79 4458 a(-)70 b(dbmanager)6 b(:)p Blue 59
4861 a(http://alquds)m(.jlab)-8 b(.org/pandb)p 59 4946
2442 10 v Black 4125 5565 a
 0 setgray
 4125 5565 a eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
