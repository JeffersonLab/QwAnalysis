//
// File generated by /u/apps/root/5.26-00/root/bin/rootcint at Tue Jun 14 16:31:47 2011

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TaDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void string_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void string_Dictionary();
   static void *new_string(void *p = 0);
   static void *newArray_string(Long_t size, void *p);
   static void delete_string(void *p);
   static void deleteArray_string(void *p);
   static void destruct_string(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const string*)
   {
      string *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(string),0);
      static ::ROOT::TGenericClassInfo 
         instance("string", "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/string", 39,
                  typeid(string), DefineBehavior(ptr, ptr),
                  0, &string_Dictionary, isa_proxy, 0,
                  sizeof(string) );
      instance.SetNew(&new_string);
      instance.SetNewArray(&newArray_string);
      instance.SetDelete(&delete_string);
      instance.SetDeleteArray(&deleteArray_string);
      instance.SetDestructor(&destruct_string);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const string*)
   {
      return GenerateInitInstanceLocal((string*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const string*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void string_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const string*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void TaBlind_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaBlind(void *p = 0);
   static void *newArray_TaBlind(Long_t size, void *p);
   static void delete_TaBlind(void *p);
   static void deleteArray_TaBlind(void *p);
   static void destruct_TaBlind(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaBlind*)
   {
      ::TaBlind *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaBlind >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaBlind", ::TaBlind::Class_Version(), "./TaBlind.hh", 67,
                  typeid(::TaBlind), DefineBehavior(ptr, ptr),
                  &::TaBlind::Dictionary, isa_proxy, 0,
                  sizeof(::TaBlind) );
      instance.SetNew(&new_TaBlind);
      instance.SetNewArray(&newArray_TaBlind);
      instance.SetDelete(&delete_TaBlind);
      instance.SetDeleteArray(&deleteArray_TaBlind);
      instance.SetDestructor(&destruct_TaBlind);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaBlind*)
   {
      return GenerateInitInstanceLocal((::TaBlind*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaBlind*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaFileName_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaFileName(void *p = 0);
   static void *newArray_TaFileName(Long_t size, void *p);
   static void delete_TaFileName(void *p);
   static void deleteArray_TaFileName(void *p);
   static void destruct_TaFileName(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaFileName*)
   {
      ::TaFileName *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaFileName >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaFileName", ::TaFileName::Class_Version(), "./TaFileName.hh", 29,
                  typeid(::TaFileName), DefineBehavior(ptr, ptr),
                  &::TaFileName::Dictionary, isa_proxy, 0,
                  sizeof(::TaFileName) );
      instance.SetNew(&new_TaFileName);
      instance.SetNewArray(&newArray_TaFileName);
      instance.SetDelete(&delete_TaFileName);
      instance.SetDeleteArray(&deleteArray_TaFileName);
      instance.SetDestructor(&destruct_TaFileName);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaFileName*)
   {
      return GenerateInitInstanceLocal((::TaFileName*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaFileName*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaIResultsFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TaIResultsFile(void *p);
   static void deleteArray_TaIResultsFile(void *p);
   static void destruct_TaIResultsFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaIResultsFile*)
   {
      ::TaIResultsFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaIResultsFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaIResultsFile", ::TaIResultsFile::Class_Version(), "./TaIResultsFile.hh", 31,
                  typeid(::TaIResultsFile), DefineBehavior(ptr, ptr),
                  &::TaIResultsFile::Dictionary, isa_proxy, 0,
                  sizeof(::TaIResultsFile) );
      instance.SetDelete(&delete_TaIResultsFile);
      instance.SetDeleteArray(&deleteArray_TaIResultsFile);
      instance.SetDestructor(&destruct_TaIResultsFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaIResultsFile*)
   {
      return GenerateInitInstanceLocal((::TaIResultsFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaIResultsFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaLabelledQuantity_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaLabelledQuantity(void *p = 0);
   static void *newArray_TaLabelledQuantity(Long_t size, void *p);
   static void delete_TaLabelledQuantity(void *p);
   static void deleteArray_TaLabelledQuantity(void *p);
   static void destruct_TaLabelledQuantity(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaLabelledQuantity*)
   {
      ::TaLabelledQuantity *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaLabelledQuantity >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaLabelledQuantity", ::TaLabelledQuantity::Class_Version(), "./TaLabelledQuantity.hh", 26,
                  typeid(::TaLabelledQuantity), DefineBehavior(ptr, ptr),
                  &::TaLabelledQuantity::Dictionary, isa_proxy, 0,
                  sizeof(::TaLabelledQuantity) );
      instance.SetNew(&new_TaLabelledQuantity);
      instance.SetNewArray(&newArray_TaLabelledQuantity);
      instance.SetDelete(&delete_TaLabelledQuantity);
      instance.SetDeleteArray(&deleteArray_TaLabelledQuantity);
      instance.SetDestructor(&destruct_TaLabelledQuantity);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaLabelledQuantity*)
   {
      return GenerateInitInstanceLocal((::TaLabelledQuantity*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaLabelledQuantity*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaOResultsFile_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TaOResultsFile(void *p);
   static void deleteArray_TaOResultsFile(void *p);
   static void destruct_TaOResultsFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaOResultsFile*)
   {
      ::TaOResultsFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaOResultsFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaOResultsFile", ::TaOResultsFile::Class_Version(), "./TaOResultsFile.hh", 30,
                  typeid(::TaOResultsFile), DefineBehavior(ptr, ptr),
                  &::TaOResultsFile::Dictionary, isa_proxy, 0,
                  sizeof(::TaOResultsFile) );
      instance.SetDelete(&delete_TaOResultsFile);
      instance.SetDeleteArray(&deleteArray_TaOResultsFile);
      instance.SetDestructor(&destruct_TaOResultsFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaOResultsFile*)
   {
      return GenerateInitInstanceLocal((::TaOResultsFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaOResultsFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaStatistics_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_TaStatistics(void *p);
   static void deleteArray_TaStatistics(void *p);
   static void destruct_TaStatistics(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaStatistics*)
   {
      ::TaStatistics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaStatistics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaStatistics", ::TaStatistics::Class_Version(), "./TaStatistics.hh", 46,
                  typeid(::TaStatistics), DefineBehavior(ptr, ptr),
                  &::TaStatistics::Dictionary, isa_proxy, 0,
                  sizeof(::TaStatistics) );
      instance.SetDelete(&delete_TaStatistics);
      instance.SetDeleteArray(&deleteArray_TaStatistics);
      instance.SetDestructor(&destruct_TaStatistics);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaStatistics*)
   {
      return GenerateInitInstanceLocal((::TaStatistics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaStatistics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaString_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaString(void *p = 0);
   static void *newArray_TaString(Long_t size, void *p);
   static void delete_TaString(void *p);
   static void deleteArray_TaString(void *p);
   static void destruct_TaString(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaString*)
   {
      ::TaString *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaString >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaString", ::TaString::Class_Version(), "./TaString.hh", 36,
                  typeid(::TaString), DefineBehavior(ptr, ptr),
                  &::TaString::Dictionary, isa_proxy, 0,
                  sizeof(::TaString) );
      instance.SetNew(&new_TaString);
      instance.SetNewArray(&newArray_TaString);
      instance.SetDelete(&delete_TaString);
      instance.SetDeleteArray(&deleteArray_TaString);
      instance.SetDestructor(&destruct_TaString);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaString*)
   {
      return GenerateInitInstanceLocal((::TaString*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaString*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaRun_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaRun(void *p = 0);
   static void *newArray_TaRun(Long_t size, void *p);
   static void delete_TaRun(void *p);
   static void deleteArray_TaRun(void *p);
   static void destruct_TaRun(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaRun*)
   {
      ::TaRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaRun", ::TaRun::Class_Version(), "./TaRun.hh", 58,
                  typeid(::TaRun), DefineBehavior(ptr, ptr),
                  &::TaRun::Dictionary, isa_proxy, 0,
                  sizeof(::TaRun) );
      instance.SetNew(&new_TaRun);
      instance.SetNewArray(&newArray_TaRun);
      instance.SetDelete(&delete_TaRun);
      instance.SetDeleteArray(&deleteArray_TaRun);
      instance.SetDestructor(&destruct_TaRun);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaRun*)
   {
      return GenerateInitInstanceLocal((::TaRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void VaAnalysis_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void delete_VaAnalysis(void *p);
   static void deleteArray_VaAnalysis(void *p);
   static void destruct_VaAnalysis(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::VaAnalysis*)
   {
      ::VaAnalysis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VaAnalysis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VaAnalysis", ::VaAnalysis::Class_Version(), "./VaAnalysis.hh", 131,
                  typeid(::VaAnalysis), DefineBehavior(ptr, ptr),
                  &::VaAnalysis::Dictionary, isa_proxy, 0,
                  sizeof(::VaAnalysis) );
      instance.SetDelete(&delete_VaAnalysis);
      instance.SetDeleteArray(&deleteArray_VaAnalysis);
      instance.SetDestructor(&destruct_VaAnalysis);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::VaAnalysis*)
   {
      return GenerateInitInstanceLocal((::VaAnalysis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VaAnalysis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaAnalysisManager_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaAnalysisManager(void *p = 0);
   static void *newArray_TaAnalysisManager(Long_t size, void *p);
   static void delete_TaAnalysisManager(void *p);
   static void deleteArray_TaAnalysisManager(void *p);
   static void destruct_TaAnalysisManager(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaAnalysisManager*)
   {
      ::TaAnalysisManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaAnalysisManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaAnalysisManager", ::TaAnalysisManager::Class_Version(), "./TaAnalysisManager.hh", 35,
                  typeid(::TaAnalysisManager), DefineBehavior(ptr, ptr),
                  &::TaAnalysisManager::Dictionary, isa_proxy, 0,
                  sizeof(::TaAnalysisManager) );
      instance.SetNew(&new_TaAnalysisManager);
      instance.SetNewArray(&newArray_TaAnalysisManager);
      instance.SetDelete(&delete_TaAnalysisManager);
      instance.SetDeleteArray(&deleteArray_TaAnalysisManager);
      instance.SetDestructor(&destruct_TaAnalysisManager);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaAnalysisManager*)
   {
      return GenerateInitInstanceLocal((::TaAnalysisManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaAnalysisManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaCutList_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaCutList(void *p = 0);
   static void *newArray_TaCutList(Long_t size, void *p);
   static void delete_TaCutList(void *p);
   static void deleteArray_TaCutList(void *p);
   static void destruct_TaCutList(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaCutList*)
   {
      ::TaCutList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaCutList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaCutList", ::TaCutList::Class_Version(), "./TaCutList.hh", 42,
                  typeid(::TaCutList), DefineBehavior(ptr, ptr),
                  &::TaCutList::Dictionary, isa_proxy, 0,
                  sizeof(::TaCutList) );
      instance.SetNew(&new_TaCutList);
      instance.SetNewArray(&newArray_TaCutList);
      instance.SetDelete(&delete_TaCutList);
      instance.SetDeleteArray(&deleteArray_TaCutList);
      instance.SetDestructor(&destruct_TaCutList);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaCutList*)
   {
      return GenerateInitInstanceLocal((::TaCutList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaCutList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaMultiplet_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaMultiplet(void *p = 0);
   static void *newArray_TaMultiplet(Long_t size, void *p);
   static void delete_TaMultiplet(void *p);
   static void deleteArray_TaMultiplet(void *p);
   static void destruct_TaMultiplet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaMultiplet*)
   {
      ::TaMultiplet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaMultiplet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaMultiplet", ::TaMultiplet::Class_Version(), "./TaMultiplet.hh", 31,
                  typeid(::TaMultiplet), DefineBehavior(ptr, ptr),
                  &::TaMultiplet::Dictionary, isa_proxy, 0,
                  sizeof(::TaMultiplet) );
      instance.SetNew(&new_TaMultiplet);
      instance.SetNewArray(&newArray_TaMultiplet);
      instance.SetDelete(&delete_TaMultiplet);
      instance.SetDeleteArray(&deleteArray_TaMultiplet);
      instance.SetDestructor(&destruct_TaMultiplet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaMultiplet*)
   {
      return GenerateInitInstanceLocal((::TaMultiplet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaMultiplet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void VaEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_VaEvent(void *p = 0);
   static void *newArray_VaEvent(Long_t size, void *p);
   static void delete_VaEvent(void *p);
   static void deleteArray_VaEvent(void *p);
   static void destruct_VaEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::VaEvent*)
   {
      ::VaEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VaEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VaEvent", ::VaEvent::Class_Version(), "./VaEvent.hh", 49,
                  typeid(::VaEvent), DefineBehavior(ptr, ptr),
                  &::VaEvent::Dictionary, isa_proxy, 0,
                  sizeof(::VaEvent) );
      instance.SetNew(&new_VaEvent);
      instance.SetNewArray(&newArray_VaEvent);
      instance.SetDelete(&delete_VaEvent);
      instance.SetDeleteArray(&deleteArray_VaEvent);
      instance.SetDestructor(&destruct_VaEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::VaEvent*)
   {
      return GenerateInitInstanceLocal((::VaEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VaEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void VaPair_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_VaPair(void *p = 0);
   static void *newArray_VaPair(Long_t size, void *p);
   static void delete_VaPair(void *p);
   static void deleteArray_VaPair(void *p);
   static void destruct_VaPair(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::VaPair*)
   {
      ::VaPair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::VaPair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("VaPair", ::VaPair::Class_Version(), "./VaPair.hh", 35,
                  typeid(::VaPair), DefineBehavior(ptr, ptr),
                  &::VaPair::Dictionary, isa_proxy, 0,
                  sizeof(::VaPair) );
      instance.SetNew(&new_VaPair);
      instance.SetNewArray(&newArray_VaPair);
      instance.SetDelete(&delete_VaPair);
      instance.SetDeleteArray(&deleteArray_VaPair);
      instance.SetDestructor(&destruct_VaPair);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::VaPair*)
   {
      return GenerateInitInstanceLocal((::VaPair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::VaPair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaStandardAna_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaStandardAna(void *p = 0);
   static void *newArray_TaStandardAna(Long_t size, void *p);
   static void delete_TaStandardAna(void *p);
   static void deleteArray_TaStandardAna(void *p);
   static void destruct_TaStandardAna(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaStandardAna*)
   {
      ::TaStandardAna *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaStandardAna >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaStandardAna", ::TaStandardAna::Class_Version(), "./TaStandardAna.hh", 30,
                  typeid(::TaStandardAna), DefineBehavior(ptr, ptr),
                  &::TaStandardAna::Dictionary, isa_proxy, 0,
                  sizeof(::TaStandardAna) );
      instance.SetNew(&new_TaStandardAna);
      instance.SetNewArray(&newArray_TaStandardAna);
      instance.SetDelete(&delete_TaStandardAna);
      instance.SetDeleteArray(&deleteArray_TaStandardAna);
      instance.SetDestructor(&destruct_TaStandardAna);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaStandardAna*)
   {
      return GenerateInitInstanceLocal((::TaStandardAna*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaStandardAna*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaDebugAna_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaDebugAna(void *p = 0);
   static void *newArray_TaDebugAna(Long_t size, void *p);
   static void delete_TaDebugAna(void *p);
   static void deleteArray_TaDebugAna(void *p);
   static void destruct_TaDebugAna(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaDebugAna*)
   {
      ::TaDebugAna *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaDebugAna >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaDebugAna", ::TaDebugAna::Class_Version(), "./TaDebugAna.hh", 30,
                  typeid(::TaDebugAna), DefineBehavior(ptr, ptr),
                  &::TaDebugAna::Dictionary, isa_proxy, 0,
                  sizeof(::TaDebugAna) );
      instance.SetNew(&new_TaDebugAna);
      instance.SetNewArray(&newArray_TaDebugAna);
      instance.SetDelete(&delete_TaDebugAna);
      instance.SetDeleteArray(&deleteArray_TaDebugAna);
      instance.SetDestructor(&destruct_TaDebugAna);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaDebugAna*)
   {
      return GenerateInitInstanceLocal((::TaDebugAna*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaDebugAna*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaRootRep_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaRootRep(void *p = 0);
   static void *newArray_TaRootRep(Long_t size, void *p);
   static void delete_TaRootRep(void *p);
   static void deleteArray_TaRootRep(void *p);
   static void destruct_TaRootRep(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaRootRep*)
   {
      ::TaRootRep *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaRootRep >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaRootRep", ::TaRootRep::Class_Version(), "./TaDataBase.hh", 124,
                  typeid(::TaRootRep), DefineBehavior(ptr, ptr),
                  &::TaRootRep::Dictionary, isa_proxy, 0,
                  sizeof(::TaRootRep) );
      instance.SetNew(&new_TaRootRep);
      instance.SetNewArray(&newArray_TaRootRep);
      instance.SetDelete(&delete_TaRootRep);
      instance.SetDeleteArray(&deleteArray_TaRootRep);
      instance.SetDestructor(&destruct_TaRootRep);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaRootRep*)
   {
      return GenerateInitInstanceLocal((::TaRootRep*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaRootRep*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaDataBase_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaDataBase(void *p = 0);
   static void *newArray_TaDataBase(Long_t size, void *p);
   static void delete_TaDataBase(void *p);
   static void deleteArray_TaDataBase(void *p);
   static void destruct_TaDataBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaDataBase*)
   {
      ::TaDataBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaDataBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaDataBase", ::TaDataBase::Class_Version(), "./TaDataBase.hh", 315,
                  typeid(::TaDataBase), DefineBehavior(ptr, ptr),
                  &::TaDataBase::Dictionary, isa_proxy, 0,
                  sizeof(::TaDataBase) );
      instance.SetNew(&new_TaDataBase);
      instance.SetNewArray(&newArray_TaDataBase);
      instance.SetDelete(&delete_TaDataBase);
      instance.SetDeleteArray(&deleteArray_TaDataBase);
      instance.SetDestructor(&destruct_TaDataBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaDataBase*)
   {
      return GenerateInitInstanceLocal((::TaDataBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaDataBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaDevice_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaDevice(void *p = 0);
   static void *newArray_TaDevice(Long_t size, void *p);
   static void delete_TaDevice(void *p);
   static void deleteArray_TaDevice(void *p);
   static void destruct_TaDevice(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaDevice*)
   {
      ::TaDevice *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaDevice >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaDevice", ::TaDevice::Class_Version(), "./TaDevice.hh", 37,
                  typeid(::TaDevice), DefineBehavior(ptr, ptr),
                  &::TaDevice::Dictionary, isa_proxy, 0,
                  sizeof(::TaDevice) );
      instance.SetNew(&new_TaDevice);
      instance.SetNewArray(&newArray_TaDevice);
      instance.SetDelete(&delete_TaDevice);
      instance.SetDeleteArray(&deleteArray_TaDevice);
      instance.SetDestructor(&destruct_TaDevice);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaDevice*)
   {
      return GenerateInitInstanceLocal((::TaDevice*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaDevice*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaCutInterval_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaCutInterval(void *p = 0);
   static void *newArray_TaCutInterval(Long_t size, void *p);
   static void delete_TaCutInterval(void *p);
   static void deleteArray_TaCutInterval(void *p);
   static void destruct_TaCutInterval(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaCutInterval*)
   {
      ::TaCutInterval *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaCutInterval >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaCutInterval", ::TaCutInterval::Class_Version(), "./TaCutInterval.hh", 27,
                  typeid(::TaCutInterval), DefineBehavior(ptr, ptr),
                  &::TaCutInterval::Dictionary, isa_proxy, 0,
                  sizeof(::TaCutInterval) );
      instance.SetNew(&new_TaCutInterval);
      instance.SetNewArray(&newArray_TaCutInterval);
      instance.SetDelete(&delete_TaCutInterval);
      instance.SetDeleteArray(&deleteArray_TaCutInterval);
      instance.SetDestructor(&destruct_TaCutInterval);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaCutInterval*)
   {
      return GenerateInitInstanceLocal((::TaCutInterval*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaCutInterval*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaEvent(void *p = 0);
   static void *newArray_TaEvent(Long_t size, void *p);
   static void delete_TaEvent(void *p);
   static void deleteArray_TaEvent(void *p);
   static void destruct_TaEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaEvent*)
   {
      ::TaEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaEvent", ::TaEvent::Class_Version(), "./TaEvent.hh", 40,
                  typeid(::TaEvent), DefineBehavior(ptr, ptr),
                  &::TaEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TaEvent) );
      instance.SetNew(&new_TaEvent);
      instance.SetNewArray(&newArray_TaEvent);
      instance.SetDelete(&delete_TaEvent);
      instance.SetDeleteArray(&deleteArray_TaEvent);
      instance.SetDestructor(&destruct_TaEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaEvent*)
   {
      return GenerateInitInstanceLocal((::TaEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaSimEvent_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaSimEvent(void *p = 0);
   static void *newArray_TaSimEvent(Long_t size, void *p);
   static void delete_TaSimEvent(void *p);
   static void deleteArray_TaSimEvent(void *p);
   static void destruct_TaSimEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaSimEvent*)
   {
      ::TaSimEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaSimEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaSimEvent", ::TaSimEvent::Class_Version(), "./TaSimEvent.hh", 50,
                  typeid(::TaSimEvent), DefineBehavior(ptr, ptr),
                  &::TaSimEvent::Dictionary, isa_proxy, 0,
                  sizeof(::TaSimEvent) );
      instance.SetNew(&new_TaSimEvent);
      instance.SetNewArray(&newArray_TaSimEvent);
      instance.SetDelete(&delete_TaSimEvent);
      instance.SetDeleteArray(&deleteArray_TaSimEvent);
      instance.SetDestructor(&destruct_TaSimEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaSimEvent*)
   {
      return GenerateInitInstanceLocal((::TaSimEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaSimEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaEpics_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaEpics(void *p = 0);
   static void *newArray_TaEpics(Long_t size, void *p);
   static void delete_TaEpics(void *p);
   static void deleteArray_TaEpics(void *p);
   static void destruct_TaEpics(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaEpics*)
   {
      ::TaEpics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaEpics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaEpics", ::TaEpics::Class_Version(), "./TaEpics.hh", 60,
                  typeid(::TaEpics), DefineBehavior(ptr, ptr),
                  &::TaEpics::Dictionary, isa_proxy, 0,
                  sizeof(::TaEpics) );
      instance.SetNew(&new_TaEpics);
      instance.SetNewArray(&newArray_TaEpics);
      instance.SetDelete(&delete_TaEpics);
      instance.SetDeleteArray(&deleteArray_TaEpics);
      instance.SetDestructor(&destruct_TaEpics);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaEpics*)
   {
      return GenerateInitInstanceLocal((::TaEpics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaEpics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaPairFromOctet_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaPairFromOctet(void *p = 0);
   static void *newArray_TaPairFromOctet(Long_t size, void *p);
   static void delete_TaPairFromOctet(void *p);
   static void deleteArray_TaPairFromOctet(void *p);
   static void destruct_TaPairFromOctet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaPairFromOctet*)
   {
      ::TaPairFromOctet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaPairFromOctet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaPairFromOctet", ::TaPairFromOctet::Class_Version(), "./TaPairFromOctet.hh", 29,
                  typeid(::TaPairFromOctet), DefineBehavior(ptr, ptr),
                  &::TaPairFromOctet::Dictionary, isa_proxy, 0,
                  sizeof(::TaPairFromOctet) );
      instance.SetNew(&new_TaPairFromOctet);
      instance.SetNewArray(&newArray_TaPairFromOctet);
      instance.SetDelete(&delete_TaPairFromOctet);
      instance.SetDeleteArray(&deleteArray_TaPairFromOctet);
      instance.SetDestructor(&destruct_TaPairFromOctet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaPairFromOctet*)
   {
      return GenerateInitInstanceLocal((::TaPairFromOctet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaPairFromOctet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaPairFromPair_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaPairFromPair(void *p = 0);
   static void *newArray_TaPairFromPair(Long_t size, void *p);
   static void delete_TaPairFromPair(void *p);
   static void deleteArray_TaPairFromPair(void *p);
   static void destruct_TaPairFromPair(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaPairFromPair*)
   {
      ::TaPairFromPair *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaPairFromPair >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaPairFromPair", ::TaPairFromPair::Class_Version(), "./TaPairFromPair.hh", 28,
                  typeid(::TaPairFromPair), DefineBehavior(ptr, ptr),
                  &::TaPairFromPair::Dictionary, isa_proxy, 0,
                  sizeof(::TaPairFromPair) );
      instance.SetNew(&new_TaPairFromPair);
      instance.SetNewArray(&newArray_TaPairFromPair);
      instance.SetDelete(&delete_TaPairFromPair);
      instance.SetDeleteArray(&deleteArray_TaPairFromPair);
      instance.SetDestructor(&destruct_TaPairFromPair);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaPairFromPair*)
   {
      return GenerateInitInstanceLocal((::TaPairFromPair*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaPairFromPair*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaPairFromQuad_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaPairFromQuad(void *p = 0);
   static void *newArray_TaPairFromQuad(Long_t size, void *p);
   static void delete_TaPairFromQuad(void *p);
   static void deleteArray_TaPairFromQuad(void *p);
   static void destruct_TaPairFromQuad(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaPairFromQuad*)
   {
      ::TaPairFromQuad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaPairFromQuad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaPairFromQuad", ::TaPairFromQuad::Class_Version(), "./TaPairFromQuad.hh", 28,
                  typeid(::TaPairFromQuad), DefineBehavior(ptr, ptr),
                  &::TaPairFromQuad::Dictionary, isa_proxy, 0,
                  sizeof(::TaPairFromQuad) );
      instance.SetNew(&new_TaPairFromQuad);
      instance.SetNewArray(&newArray_TaPairFromQuad);
      instance.SetDelete(&delete_TaPairFromQuad);
      instance.SetDeleteArray(&deleteArray_TaPairFromQuad);
      instance.SetDestructor(&destruct_TaPairFromQuad);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaPairFromQuad*)
   {
      return GenerateInitInstanceLocal((::TaPairFromQuad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaPairFromQuad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaFeedbackAna_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaFeedbackAna(void *p = 0);
   static void *newArray_TaFeedbackAna(Long_t size, void *p);
   static void delete_TaFeedbackAna(void *p);
   static void deleteArray_TaFeedbackAna(void *p);
   static void destruct_TaFeedbackAna(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaFeedbackAna*)
   {
      ::TaFeedbackAna *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaFeedbackAna >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaFeedbackAna", ::TaFeedbackAna::Class_Version(), "./TaFeedbackAna.hh", 26,
                  typeid(::TaFeedbackAna), DefineBehavior(ptr, ptr),
                  &::TaFeedbackAna::Dictionary, isa_proxy, 0,
                  sizeof(::TaFeedbackAna) );
      instance.SetNew(&new_TaFeedbackAna);
      instance.SetNewArray(&newArray_TaFeedbackAna);
      instance.SetDelete(&delete_TaFeedbackAna);
      instance.SetDeleteArray(&deleteArray_TaFeedbackAna);
      instance.SetDestructor(&destruct_TaFeedbackAna);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaFeedbackAna*)
   {
      return GenerateInitInstanceLocal((::TaFeedbackAna*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaFeedbackAna*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TaADCCalib_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_TaADCCalib(void *p = 0);
   static void *newArray_TaADCCalib(Long_t size, void *p);
   static void delete_TaADCCalib(void *p);
   static void deleteArray_TaADCCalib(void *p);
   static void destruct_TaADCCalib(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TaADCCalib*)
   {
      ::TaADCCalib *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TaADCCalib >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TaADCCalib", ::TaADCCalib::Class_Version(), "./TaADCCalib.hh", 39,
                  typeid(::TaADCCalib), DefineBehavior(ptr, ptr),
                  &::TaADCCalib::Dictionary, isa_proxy, 0,
                  sizeof(::TaADCCalib) );
      instance.SetNew(&new_TaADCCalib);
      instance.SetNewArray(&newArray_TaADCCalib);
      instance.SetDelete(&delete_TaADCCalib);
      instance.SetDeleteArray(&deleteArray_TaADCCalib);
      instance.SetDestructor(&destruct_TaADCCalib);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TaADCCalib*)
   {
      return GenerateInitInstanceLocal((::TaADCCalib*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TaADCCalib*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TaBlind::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaBlind::Class_Name()
{
   return "TaBlind";
}

//______________________________________________________________________________
const char *TaBlind::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaBlind*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaBlind::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaBlind*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaBlind::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaBlind*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaBlind::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaBlind*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaFileName::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaFileName::Class_Name()
{
   return "TaFileName";
}

//______________________________________________________________________________
const char *TaFileName::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaFileName*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaFileName::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaFileName*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaFileName::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaFileName*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaFileName::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaFileName*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaIResultsFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaIResultsFile::Class_Name()
{
   return "TaIResultsFile";
}

//______________________________________________________________________________
const char *TaIResultsFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaIResultsFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaIResultsFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaIResultsFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaIResultsFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaIResultsFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaIResultsFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaIResultsFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaLabelledQuantity::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaLabelledQuantity::Class_Name()
{
   return "TaLabelledQuantity";
}

//______________________________________________________________________________
const char *TaLabelledQuantity::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaLabelledQuantity*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaLabelledQuantity::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaLabelledQuantity*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaLabelledQuantity::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaLabelledQuantity*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaLabelledQuantity::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaLabelledQuantity*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaOResultsFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaOResultsFile::Class_Name()
{
   return "TaOResultsFile";
}

//______________________________________________________________________________
const char *TaOResultsFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaOResultsFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaOResultsFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaOResultsFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaOResultsFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaOResultsFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaOResultsFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaOResultsFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaStatistics::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaStatistics::Class_Name()
{
   return "TaStatistics";
}

//______________________________________________________________________________
const char *TaStatistics::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaStatistics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaStatistics::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaStatistics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaStatistics::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaStatistics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaStatistics::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaStatistics*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaString::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaString::Class_Name()
{
   return "TaString";
}

//______________________________________________________________________________
const char *TaString::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaString*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaString::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaString*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaString::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaString*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaString::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaString*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaRun::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaRun::Class_Name()
{
   return "TaRun";
}

//______________________________________________________________________________
const char *TaRun::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaRun::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaRun::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaRun::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaRun*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *VaAnalysis::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *VaAnalysis::Class_Name()
{
   return "VaAnalysis";
}

//______________________________________________________________________________
const char *VaAnalysis::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaAnalysis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VaAnalysis::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaAnalysis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VaAnalysis::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaAnalysis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VaAnalysis::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaAnalysis*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaAnalysisManager::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaAnalysisManager::Class_Name()
{
   return "TaAnalysisManager";
}

//______________________________________________________________________________
const char *TaAnalysisManager::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaAnalysisManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaAnalysisManager::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaAnalysisManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaAnalysisManager::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaAnalysisManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaAnalysisManager::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaAnalysisManager*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaCutList::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaCutList::Class_Name()
{
   return "TaCutList";
}

//______________________________________________________________________________
const char *TaCutList::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaCutList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaCutList::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaCutList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaCutList::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaCutList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaCutList::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaCutList*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaMultiplet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaMultiplet::Class_Name()
{
   return "TaMultiplet";
}

//______________________________________________________________________________
const char *TaMultiplet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaMultiplet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaMultiplet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaMultiplet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaMultiplet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaMultiplet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaMultiplet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaMultiplet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *VaEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *VaEvent::Class_Name()
{
   return "VaEvent";
}

//______________________________________________________________________________
const char *VaEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VaEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VaEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VaEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *VaPair::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *VaPair::Class_Name()
{
   return "VaPair";
}

//______________________________________________________________________________
const char *VaPair::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaPair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int VaPair::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::VaPair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void VaPair::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaPair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *VaPair::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::VaPair*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaStandardAna::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaStandardAna::Class_Name()
{
   return "TaStandardAna";
}

//______________________________________________________________________________
const char *TaStandardAna::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaStandardAna*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaStandardAna::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaStandardAna*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaStandardAna::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaStandardAna*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaStandardAna::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaStandardAna*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaDebugAna::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaDebugAna::Class_Name()
{
   return "TaDebugAna";
}

//______________________________________________________________________________
const char *TaDebugAna::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDebugAna*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaDebugAna::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDebugAna*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaDebugAna::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDebugAna*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaDebugAna::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDebugAna*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaRootRep::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaRootRep::Class_Name()
{
   return "TaRootRep";
}

//______________________________________________________________________________
const char *TaRootRep::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaRootRep*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaRootRep::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaRootRep*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaRootRep::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaRootRep*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaRootRep::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaRootRep*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaDataBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaDataBase::Class_Name()
{
   return "TaDataBase";
}

//______________________________________________________________________________
const char *TaDataBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDataBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaDataBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDataBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaDataBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDataBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaDataBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDataBase*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaDevice::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaDevice::Class_Name()
{
   return "TaDevice";
}

//______________________________________________________________________________
const char *TaDevice::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDevice*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaDevice::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaDevice*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaDevice::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDevice*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaDevice::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaDevice*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaCutInterval::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaCutInterval::Class_Name()
{
   return "TaCutInterval";
}

//______________________________________________________________________________
const char *TaCutInterval::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaCutInterval*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaCutInterval::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaCutInterval*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaCutInterval::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaCutInterval*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaCutInterval::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaCutInterval*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaEvent::Class_Name()
{
   return "TaEvent";
}

//______________________________________________________________________________
const char *TaEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaSimEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaSimEvent::Class_Name()
{
   return "TaSimEvent";
}

//______________________________________________________________________________
const char *TaSimEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaSimEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaSimEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaSimEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaSimEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaSimEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaSimEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaSimEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaEpics::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaEpics::Class_Name()
{
   return "TaEpics";
}

//______________________________________________________________________________
const char *TaEpics::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaEpics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaEpics::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaEpics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaEpics::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaEpics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaEpics::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaEpics*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaPairFromOctet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaPairFromOctet::Class_Name()
{
   return "TaPairFromOctet";
}

//______________________________________________________________________________
const char *TaPairFromOctet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromOctet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaPairFromOctet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromOctet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaPairFromOctet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromOctet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaPairFromOctet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromOctet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaPairFromPair::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaPairFromPair::Class_Name()
{
   return "TaPairFromPair";
}

//______________________________________________________________________________
const char *TaPairFromPair::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromPair*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaPairFromPair::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromPair*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaPairFromPair::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromPair*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaPairFromPair::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromPair*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaPairFromQuad::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaPairFromQuad::Class_Name()
{
   return "TaPairFromQuad";
}

//______________________________________________________________________________
const char *TaPairFromQuad::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromQuad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaPairFromQuad::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromQuad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaPairFromQuad::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromQuad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaPairFromQuad::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaPairFromQuad*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaFeedbackAna::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaFeedbackAna::Class_Name()
{
   return "TaFeedbackAna";
}

//______________________________________________________________________________
const char *TaFeedbackAna::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaFeedbackAna*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaFeedbackAna::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaFeedbackAna*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaFeedbackAna::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaFeedbackAna*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaFeedbackAna::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaFeedbackAna*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TaADCCalib::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TaADCCalib::Class_Name()
{
   return "TaADCCalib";
}

//______________________________________________________________________________
const char *TaADCCalib::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaADCCalib*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TaADCCalib::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TaADCCalib*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TaADCCalib::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaADCCalib*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TaADCCalib::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TaADCCalib*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TaADCCalib::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaADCCalib.

   VaAnalysis::Streamer(R__b);
}

//______________________________________________________________________________
void TaADCCalib::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaADCCalib.
      TClass *R__cl = ::TaADCCalib::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "typeFlag", &typeFlag);
      R__insp.Inspect(R__cl, R__parent, "chanExists[30][4]", chanExists);
      R__insp.Inspect(R__cl, R__parent, "*hfile", &hfile);
      R__insp.Inspect(R__cl, R__parent, "*phist", &phist);
      R__insp.Inspect(R__cl, R__parent, "fSumX", (void*)&fSumX);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumX, R__insp, strcat(R__parent,"fSumX."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumX2", (void*)&fSumX2);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumX2, R__insp, strcat(R__parent,"fSumX2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "nEntries", (void*)&nEntries);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&nEntries, R__insp, strcat(R__parent,"nEntries."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumY", (void*)&fSumY);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumY, R__insp, strcat(R__parent,"fSumY."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumXY", (void*)&fSumXY);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumXY, R__insp, strcat(R__parent,"fSumXY."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*dgraphs", &dgraphs);
      R__insp.Inspect(R__cl, R__parent, "*rgraphs", &rgraphs);
      R__insp.Inspect(R__cl, R__parent, "dEntries", (void*)&dEntries);
      ::ROOT::GenericShowMembers("vector<vector<Int_t> >", (void*)&dEntries, R__insp, strcat(R__parent,"dEntries."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dADCsum", (void*)&dADCsum);
      ::ROOT::GenericShowMembers("vector<vector<Double_t> >", (void*)&dADCsum, R__insp, strcat(R__parent,"dADCsum."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dADCsum2", (void*)&dADCsum2);
      ::ROOT::GenericShowMembers("vector<vector<Double_t> >", (void*)&dADCsum2, R__insp, strcat(R__parent,"dADCsum2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dDACval[65536]", dDACval);
      R__insp.Inspect(R__cl, R__parent, "dEDACval[65536]", dEDACval);
      R__insp.Inspect(R__cl, R__parent, "dADCavg[65536]", dADCavg);
      R__insp.Inspect(R__cl, R__parent, "dADCvar[65536]", dADCvar);
      R__insp.Inspect(R__cl, R__parent, "dRes[65536]", dRes);
      VaAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaADCCalib(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaADCCalib : new ::TaADCCalib;
   }
   static void *newArray_TaADCCalib(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaADCCalib[nElements] : new ::TaADCCalib[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaADCCalib(void *p) {
      delete ((::TaADCCalib*)p);
   }
   static void deleteArray_TaADCCalib(void *p) {
      delete [] ((::TaADCCalib*)p);
   }
   static void destruct_TaADCCalib(void *p) {
      typedef ::TaADCCalib current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaADCCalib

//______________________________________________________________________________
void TaAnalysisManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaAnalysisManager.

   ::Error("TaAnalysisManager::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaAnalysisManager::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaAnalysisManager.
      TClass *R__cl = ::TaAnalysisManager::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__parent, "*fAnalysis", &fAnalysis);
      R__insp.Inspect(R__cl, R__parent, "fOnlFlag", &fOnlFlag);
      R__insp.Inspect(R__cl, R__parent, "dbcommand", (void*)&dbcommand);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&dbcommand, R__insp, strcat(R__parent,"dbcommand."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaAnalysisManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaAnalysisManager : new ::TaAnalysisManager;
   }
   static void *newArray_TaAnalysisManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaAnalysisManager[nElements] : new ::TaAnalysisManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaAnalysisManager(void *p) {
      delete ((::TaAnalysisManager*)p);
   }
   static void deleteArray_TaAnalysisManager(void *p) {
      delete [] ((::TaAnalysisManager*)p);
   }
   static void destruct_TaAnalysisManager(void *p) {
      typedef ::TaAnalysisManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaAnalysisManager

//______________________________________________________________________________
void TaDataBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaDataBase.

   ::Error("TaDataBase::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaDataBase::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaDataBase.
      TClass *R__cl = ::TaDataBase::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "runnum", &runnum);
      R__insp.Inspect(R__cl, R__parent, "tables", (void*)&tables);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&tables, R__insp, strcat(R__parent,"tables."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "database", (void*)&database);
      ::ROOT::GenericShowMembers("multimap<string,vector<dtype*> >", (void*)&database, R__insp, strcat(R__parent,"database."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*rootdb", &rootdb);
      R__insp.Inspect(R__cl, R__parent, "*AnaTDatime", &AnaTDatime);
      R__insp.Inspect(R__cl, R__parent, "fileRead", (void*)&fileRead);
      ::ROOT::GenericShowMembers("string", (void*)&fileRead, R__insp, strcat(R__parent,"fileRead."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dbcommand", (void*)&dbcommand);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&dbcommand, R__insp, strcat(R__parent,"dbcommand."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "datamap", (void*)&datamap);
      ::ROOT::GenericShowMembers("map<string,TaKeyMap>", (void*)&datamap, R__insp, strcat(R__parent,"datamap."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dbput", (void*)&dbput);
      ::ROOT::GenericShowMembers("map<string,Bool_t>", (void*)&dbput, R__insp, strcat(R__parent,"dbput."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "cdmapiter", (void*)&cdmapiter);
      ::ROOT::GenericShowMembers("map<string,TaKeyMap,less<string>,allocator<pair<const string,TaKeyMap> > >::const_iterator", (void*)&cdmapiter, R__insp, strcat(R__parent,"cdmapiter."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dmapiter", (void*)&dmapiter);
      ::ROOT::GenericShowMembers("map<string,TaKeyMap,less<string>,allocator<pair<const string,TaKeyMap> > >::iterator", (void*)&dmapiter, R__insp, strcat(R__parent,"dmapiter."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "dbinit", (void*)&dbinit);
      ::ROOT::GenericShowMembers("map<string,int>", (void*)&dbinit, R__insp, strcat(R__parent,"dbinit."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "colsize", (void*)&colsize);
      ::ROOT::GenericShowMembers("map<string,int>", (void*)&colsize, R__insp, strcat(R__parent,"colsize."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "didinit", &didinit);
      R__insp.Inspect(R__cl, R__parent, "didread", &didread);
      R__insp.Inspect(R__cl, R__parent, "didput", &didput);
      R__insp.Inspect(R__cl, R__parent, "initdm", &initdm);
      R__insp.Inspect(R__cl, R__parent, "firstiter", &firstiter);
      R__insp.Inspect(R__cl, R__parent, "usemysql", &usemysql);
      R__insp.Inspect(R__cl, R__parent, "useroot", &useroot);
      R__insp.Inspect(R__cl, R__parent, "usectrl", &usectrl);
      R__insp.Inspect(R__cl, R__parent, "*dacparam", &dacparam);
      R__insp.Inspect(R__cl, R__parent, "*dacxparam", &dacxparam);
      R__insp.Inspect(R__cl, R__parent, "*adcped", &adcped);
      R__insp.Inspect(R__cl, R__parent, "*adcxped", &adcxped);
      R__insp.Inspect(R__cl, R__parent, "*vqwkped", &vqwkped);
      R__insp.Inspect(R__cl, R__parent, "*scalped", &scalped);
      R__insp.Inspect(R__cl, R__parent, "*fFirstgdn", &fFirstgdn);
      R__insp.Inspect(R__cl, R__parent, "*fFirstAdcPed", &fFirstAdcPed);
      R__insp.Inspect(R__cl, R__parent, "*fFirstAdcxPed", &fFirstAdcxPed);
      R__insp.Inspect(R__cl, R__parent, "*fFirstScalPed", &fFirstScalPed);
      R__insp.Inspect(R__cl, R__parent, "*fFirstVqwkPed", &fFirstVqwkPed);
      R__insp.Inspect(R__cl, R__parent, "nbadev", &nbadev);
      R__insp.Inspect(R__cl, R__parent, "fCksum", &fCksum);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaDataBase(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDataBase : new ::TaDataBase;
   }
   static void *newArray_TaDataBase(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDataBase[nElements] : new ::TaDataBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaDataBase(void *p) {
      delete ((::TaDataBase*)p);
   }
   static void deleteArray_TaDataBase(void *p) {
      delete [] ((::TaDataBase*)p);
   }
   static void destruct_TaDataBase(void *p) {
      typedef ::TaDataBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaDataBase

//______________________________________________________________________________
void TaBlind::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaBlind.

   ::Error("TaBlind::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaBlind::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaBlind.
      TClass *R__cl = ::TaBlind::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fASign", &fASign);
      R__insp.Inspect(R__cl, R__parent, "fAMean", &fAMean);
      R__insp.Inspect(R__cl, R__parent, "fAOffScale", &fAOffScale);
      R__insp.Inspect(R__cl, R__parent, "fBlindSign", &fBlindSign);
      R__insp.Inspect(R__cl, R__parent, "fBlindOffset", &fBlindOffset);
      ::ROOT::GenericShowMembers("string", ( ::string *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaBlind(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaBlind : new ::TaBlind;
   }
   static void *newArray_TaBlind(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaBlind[nElements] : new ::TaBlind[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaBlind(void *p) {
      delete ((::TaBlind*)p);
   }
   static void deleteArray_TaBlind(void *p) {
      delete [] ((::TaBlind*)p);
   }
   static void destruct_TaBlind(void *p) {
      typedef ::TaBlind current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaBlind

//______________________________________________________________________________
void TaCutInterval::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaCutInterval.

   ::Error("TaCutInterval::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaCutInterval::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaCutInterval.
      TClass *R__cl = ::TaCutInterval::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fCut", &fCut);
      R__insp.Inspect(R__cl, R__parent, "fVal", &fVal);
      R__insp.Inspect(R__cl, R__parent, "fBegin", &fBegin);
      R__insp.Inspect(R__cl, R__parent, "fEnd", &fEnd);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaCutInterval(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaCutInterval : new ::TaCutInterval;
   }
   static void *newArray_TaCutInterval(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaCutInterval[nElements] : new ::TaCutInterval[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaCutInterval(void *p) {
      delete ((::TaCutInterval*)p);
   }
   static void deleteArray_TaCutInterval(void *p) {
      delete [] ((::TaCutInterval*)p);
   }
   static void destruct_TaCutInterval(void *p) {
      typedef ::TaCutInterval current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaCutInterval

//______________________________________________________________________________
void TaCutList::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaCutList.

   ::Error("TaCutList::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaCutList::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaCutList.
      TClass *R__cl = ::TaCutList::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__parent, "*fIntervals", &fIntervals);
      R__insp.Inspect(R__cl, R__parent, "fOpenIntIndices", (void*)&fOpenIntIndices);
      ::ROOT::GenericShowMembers("list<size_t>", (void*)&fOpenIntIndices, R__insp, strcat(R__parent,"fOpenIntIndices."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fNumCuts", &fNumCuts);
      R__insp.Inspect(R__cl, R__parent, "fLowExtension", (void*)&fLowExtension);
      ::ROOT::GenericShowMembers("vector<UInt_t>", (void*)&fLowExtension, R__insp, strcat(R__parent,"fLowExtension."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fHighExtension", (void*)&fHighExtension);
      ::ROOT::GenericShowMembers("vector<UInt_t>", (void*)&fHighExtension, R__insp, strcat(R__parent,"fHighExtension."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTally", (void*)&fTally);
      ::ROOT::GenericShowMembers("vector<UInt_t>", (void*)&fTally, R__insp, strcat(R__parent,"fTally."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCutNames", (void*)&fCutNames);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fCutNames, R__insp, strcat(R__parent,"fCutNames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLoBeamCNo", &fLoBeamCNo);
      R__insp.Inspect(R__cl, R__parent, "fLoBeamNo", &fLoBeamNo);
      R__insp.Inspect(R__cl, R__parent, "fBurpNo", &fBurpNo);
      R__insp.Inspect(R__cl, R__parent, "fSatNo", &fSatNo);
      R__insp.Inspect(R__cl, R__parent, "fMonSatNo", &fMonSatNo);
      R__insp.Inspect(R__cl, R__parent, "fPosBurpNo", &fPosBurpNo);
      R__insp.Inspect(R__cl, R__parent, "fPosBurpENo", &fPosBurpENo);
      R__insp.Inspect(R__cl, R__parent, "fCBurpNo", &fCBurpNo);
      R__insp.Inspect(R__cl, R__parent, "fAdcxDacBurpNo", &fAdcxDacBurpNo);
      R__insp.Inspect(R__cl, R__parent, "fAdcxBadNo", &fAdcxBadNo);
      R__insp.Inspect(R__cl, R__parent, "fScalerBadNo", &fScalerBadNo);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaCutList(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaCutList : new ::TaCutList;
   }
   static void *newArray_TaCutList(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaCutList[nElements] : new ::TaCutList[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaCutList(void *p) {
      delete ((::TaCutList*)p);
   }
   static void deleteArray_TaCutList(void *p) {
      delete [] ((::TaCutList*)p);
   }
   static void destruct_TaCutList(void *p) {
      typedef ::TaCutList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaCutList

//______________________________________________________________________________
void TaDebugAna::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaDebugAna.

   TaStandardAna::Streamer(R__b);
}

//______________________________________________________________________________
void TaDebugAna::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaDebugAna.
      TClass *R__cl = ::TaDebugAna::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      TaStandardAna::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaDebugAna(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDebugAna : new ::TaDebugAna;
   }
   static void *newArray_TaDebugAna(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDebugAna[nElements] : new ::TaDebugAna[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaDebugAna(void *p) {
      delete ((::TaDebugAna*)p);
   }
   static void deleteArray_TaDebugAna(void *p) {
      delete [] ((::TaDebugAna*)p);
   }
   static void destruct_TaDebugAna(void *p) {
      typedef ::TaDebugAna current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaDebugAna

//______________________________________________________________________________
void TaDevice::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaDevice.

   ::Error("TaDevice::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaDevice::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaDevice.
      TClass *R__cl = ::TaDevice::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fNumRaw", &fNumRaw);
      R__insp.Inspect(R__cl, R__parent, "fNtied", &fNtied);
      R__insp.Inspect(R__cl, R__parent, "fgAdcHeader", &fgAdcHeader);
      R__insp.Inspect(R__cl, R__parent, "fgAdcxHeader", &fgAdcxHeader);
      R__insp.Inspect(R__cl, R__parent, "fgScalHeader", &fgScalHeader);
      R__insp.Inspect(R__cl, R__parent, "fgTbdHeader", &fgTbdHeader);
      R__insp.Inspect(R__cl, R__parent, "fgPvdScaHeader", &fgPvdScaHeader);
      R__insp.Inspect(R__cl, R__parent, "fgPvdSca1Header", &fgPvdSca1Header);
      R__insp.Inspect(R__cl, R__parent, "fgTirHeader", &fgTirHeader);
      R__insp.Inspect(R__cl, R__parent, "fgDaqHeader", &fgDaqHeader);
      R__insp.Inspect(R__cl, R__parent, "fgVqwkHeader", &fgVqwkHeader);
      R__insp.Inspect(R__cl, R__parent, "fgAdcMask", &fgAdcMask);
      R__insp.Inspect(R__cl, R__parent, "fgAdcxMask", &fgAdcxMask);
      R__insp.Inspect(R__cl, R__parent, "fgScalMask", &fgScalMask);
      R__insp.Inspect(R__cl, R__parent, "fgTbdMask", &fgTbdMask);
      R__insp.Inspect(R__cl, R__parent, "fgTirMask", &fgTirMask);
      R__insp.Inspect(R__cl, R__parent, "fgDaqMask", &fgDaqMask);
      R__insp.Inspect(R__cl, R__parent, "fgVqwkMask", &fgVqwkMask);
      R__insp.Inspect(R__cl, R__parent, "fgPvdScaMask", &fgPvdScaMask);
      R__insp.Inspect(R__cl, R__parent, "fgPvdSca1Mask", &fgPvdSca1Mask);
      R__insp.Inspect(R__cl, R__parent, "*fRawKeys", &fRawKeys);
      R__insp.Inspect(R__cl, R__parent, "*fEvPointer", &fEvPointer);
      R__insp.Inspect(R__cl, R__parent, "*fCrate", &fCrate);
      R__insp.Inspect(R__cl, R__parent, "*fReadOut", &fReadOut);
      R__insp.Inspect(R__cl, R__parent, "*fIsUsed", &fIsUsed);
      R__insp.Inspect(R__cl, R__parent, "*fIsRotated", &fIsRotated);
      R__insp.Inspect(R__cl, R__parent, "*fAdcPed", &fAdcPed);
      R__insp.Inspect(R__cl, R__parent, "*fAdcxPed", &fAdcxPed);
      R__insp.Inspect(R__cl, R__parent, "*fScalPed", &fScalPed);
      R__insp.Inspect(R__cl, R__parent, "*fDacSlope", &fDacSlope);
      R__insp.Inspect(R__cl, R__parent, "*fDacxSlope", &fDacxSlope);
      R__insp.Inspect(R__cl, R__parent, "*fVqwkPed", &fVqwkPed);
      R__insp.Inspect(R__cl, R__parent, "*fDevNum", &fDevNum);
      R__insp.Inspect(R__cl, R__parent, "*fChanNum", &fChanNum);
      R__insp.Inspect(R__cl, R__parent, "*fAdcptr", &fAdcptr);
      R__insp.Inspect(R__cl, R__parent, "*fAdcxptr", &fAdcxptr);
      R__insp.Inspect(R__cl, R__parent, "*fScalptr", &fScalptr);
      R__insp.Inspect(R__cl, R__parent, "*fVqwkptr", &fVqwkptr);
      R__insp.Inspect(R__cl, R__parent, "*fTbdptr", &fTbdptr);
      R__insp.Inspect(R__cl, R__parent, "*fTirptr", &fTirptr);
      R__insp.Inspect(R__cl, R__parent, "*fDaqptr", &fDaqptr);
      R__insp.Inspect(R__cl, R__parent, "fKeyToIdx", (void*)&fKeyToIdx);
      ::ROOT::GenericShowMembers("map<string,Int_t>", (void*)&fKeyToIdx, R__insp, strcat(R__parent,"fKeyToIdx."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTiedKeys", (void*)&fTiedKeys);
      ::ROOT::GenericShowMembers("vector<TaKeyMap>", (void*)&fTiedKeys, R__insp, strcat(R__parent,"fTiedKeys."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRevKeyMap", (void*)&fRevKeyMap);
      ::ROOT::GenericShowMembers("map<Int_t,Int_t>", (void*)&fRevKeyMap, R__insp, strcat(R__parent,"fRevKeyMap."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRotateList", (void*)&fRotateList);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fRotateList, R__insp, strcat(R__parent,"fRotateList."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "pvdisKeys", (void*)&pvdisKeys);
      ::ROOT::GenericShowMembers("vector<Int_t>", (void*)&pvdisKeys, R__insp, strcat(R__parent,"pvdisKeys."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "PvdisPmin", &PvdisPmin);
      R__insp.Inspect(R__cl, R__parent, "PvdisPmax", &PvdisPmax);
      R__insp.Inspect(R__cl, R__parent, "PvdisDmin", &PvdisDmin);
      R__insp.Inspect(R__cl, R__parent, "PvdisDmax", &PvdisDmax);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaDevice(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDevice : new ::TaDevice;
   }
   static void *newArray_TaDevice(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaDevice[nElements] : new ::TaDevice[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaDevice(void *p) {
      delete ((::TaDevice*)p);
   }
   static void deleteArray_TaDevice(void *p) {
      delete [] ((::TaDevice*)p);
   }
   static void destruct_TaDevice(void *p) {
      typedef ::TaDevice current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaDevice

//______________________________________________________________________________
void VaEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class VaEvent.

   ::Error("VaEvent::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void VaEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class VaEvent.
      TClass *R__cl = ::VaEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fData", &fData);
      R__insp.Inspect(R__cl, R__parent, "*fEvBuffer", &fEvBuffer);
      R__insp.Inspect(R__cl, R__parent, "*fPrevBuffer", &fPrevBuffer);
      R__insp.Inspect(R__cl, R__parent, "*fPrevAdcxBase", &fPrevAdcxBase);
      R__insp.Inspect(R__cl, R__parent, "fEvType", &fEvType);
      R__insp.Inspect(R__cl, R__parent, "fEvNum", &fEvNum);
      R__insp.Inspect(R__cl, R__parent, "fLastPhyEv", &fLastPhyEv);
      R__insp.Inspect(R__cl, R__parent, "fEvLen", &fEvLen);
      R__insp.Inspect(R__cl, R__parent, "numroc", &numroc);
      R__insp.Inspect(R__cl, R__parent, "*fN1roc", &fN1roc);
      R__insp.Inspect(R__cl, R__parent, "*fLenroc", &fLenroc);
      R__insp.Inspect(R__cl, R__parent, "*fIrn", &fIrn);
      R__insp.Inspect(R__cl, R__parent, "*fCutArray", &fCutArray);
      R__insp.Inspect(R__cl, R__parent, "fFailedACut", &fFailedACut);
      R__insp.Inspect(R__cl, R__parent, "fResults", (void*)&fResults);
      ::ROOT::GenericShowMembers("vector<TaLabelledQuantity>", (void*)&fResults, R__insp, strcat(R__parent,"fResults."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fHel", &fHel);
      R__insp.Inspect(R__cl, R__parent, "fPrevROHel", &fPrevROHel);
      R__insp.Inspect(R__cl, R__parent, "fPrevHel", &fPrevHel);
      R__insp.Inspect(R__cl, R__parent, "adcxbad", &adcxbad);
      R__insp.Inspect(R__cl, R__parent, "adcxglitch", &adcxglitch);
      R__insp.Inspect(R__cl, R__parent, "adcxcrlist", &adcxcrlist);
      R__insp.Inspect(R__cl, R__parent, "scalerbad", &scalerbad);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_VaEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VaEvent : new ::VaEvent;
   }
   static void *newArray_VaEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VaEvent[nElements] : new ::VaEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_VaEvent(void *p) {
      delete ((::VaEvent*)p);
   }
   static void deleteArray_VaEvent(void *p) {
      delete [] ((::VaEvent*)p);
   }
   static void destruct_VaEvent(void *p) {
      typedef ::VaEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::VaEvent

//______________________________________________________________________________
void TaEpics::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaEpics.

   ::Error("TaEpics::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaEpics::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaEpics.
      TClass *R__cl = ::TaEpics::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fTreeVal", &fTreeVal);
      R__insp.Inspect(R__cl, R__parent, "fEpicsData", (void*)&fEpicsData);
      ::ROOT::GenericShowMembers("map<std::string,std::vector<EpicsChan> >", (void*)&fEpicsData, R__insp, strcat(R__parent,"fEpicsData."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fTreeKey", (void*)&fTreeKey);
      ::ROOT::GenericShowMembers("vector<TaString>", (void*)&fTreeKey, R__insp, strcat(R__parent,"fTreeKey."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaEpics(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaEpics : new ::TaEpics;
   }
   static void *newArray_TaEpics(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaEpics[nElements] : new ::TaEpics[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaEpics(void *p) {
      delete ((::TaEpics*)p);
   }
   static void deleteArray_TaEpics(void *p) {
      delete [] ((::TaEpics*)p);
   }
   static void destruct_TaEpics(void *p) {
      typedef ::TaEpics current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaEpics

//______________________________________________________________________________
void TaEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaEvent.

   VaEvent::Streamer(R__b);
}

//______________________________________________________________________________
void TaEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaEvent.
      TClass *R__cl = ::TaEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaEvent::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaEvent : new ::TaEvent;
   }
   static void *newArray_TaEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaEvent[nElements] : new ::TaEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaEvent(void *p) {
      delete ((::TaEvent*)p);
   }
   static void deleteArray_TaEvent(void *p) {
      delete [] ((::TaEvent*)p);
   }
   static void destruct_TaEvent(void *p) {
      typedef ::TaEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaEvent

//______________________________________________________________________________
void TaIResultsFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaIResultsFile.

   ::Error("TaIResultsFile::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaIResultsFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaIResultsFile.
      TClass *R__cl = ::TaIResultsFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fChksum", &fChksum);
      R__insp.Inspect(R__cl, R__parent, "fPtag", (void*)&fPtag);
      ::ROOT::GenericShowMembers("string", (void*)&fPtag, R__insp, strcat(R__parent,"fPtag."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRtag", (void*)&fRtag);
      ::ROOT::GenericShowMembers("string", (void*)&fRtag, R__insp, strcat(R__parent,"fRtag."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fRes", &fRes);
      R__insp.Inspect(R__cl, R__parent, "fErr", &fErr);
      R__insp.Inspect(R__cl, R__parent, "fEv0", &fEv0);
      R__insp.Inspect(R__cl, R__parent, "fEv1", &fEv1);
      R__insp.Inspect(R__cl, R__parent, "fUnits", (void*)&fUnits);
      ::ROOT::GenericShowMembers("string", (void*)&fUnits, R__insp, strcat(R__parent,"fUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fCom", (void*)&fCom);
      ::ROOT::GenericShowMembers("string", (void*)&fCom, R__insp, strcat(R__parent,"fCom."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fLine", (void*)&fLine);
      ::ROOT::GenericShowMembers("string", (void*)&fLine, R__insp, strcat(R__parent,"fLine."),false);
      R__parent[R__ncp] = 0;
      ::ROOT::GenericShowMembers("basic_ifstream<char,char_traits<char> >", ( ::basic_ifstream<char,char_traits<char> > *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TaIResultsFile(void *p) {
      delete ((::TaIResultsFile*)p);
   }
   static void deleteArray_TaIResultsFile(void *p) {
      delete [] ((::TaIResultsFile*)p);
   }
   static void destruct_TaIResultsFile(void *p) {
      typedef ::TaIResultsFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaIResultsFile

//______________________________________________________________________________
void TaSimEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaSimEvent.

   VaEvent::Streamer(R__b);
}

//______________________________________________________________________________
void TaSimEvent::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaSimEvent.
      TClass *R__cl = ::TaSimEvent::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fgR", &fgR);
      fgR.ShowMembers(R__insp, strcat(R__parent,"fgR.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fDetVsBcm[4]", fDetVsBcm);
      R__insp.Inspect(R__cl, R__parent, "fDetNoiseR[4]", fDetNoiseR);
      R__insp.Inspect(R__cl, R__parent, "fBpm4AXvCoil[7]", fBpm4AXvCoil);
      R__insp.Inspect(R__cl, R__parent, "fBpm4AYvCoil[7]", fBpm4AYvCoil);
      R__insp.Inspect(R__cl, R__parent, "fBpm4BXvCoil[7]", fBpm4BXvCoil);
      R__insp.Inspect(R__cl, R__parent, "fBpm4BYvCoil[7]", fBpm4BYvCoil);
      R__insp.Inspect(R__cl, R__parent, "fBpm12XvCoil[7]", fBpm12XvCoil);
      R__insp.Inspect(R__cl, R__parent, "fDetVsBpm12X[4]", fDetVsBpm12X);
      R__insp.Inspect(R__cl, R__parent, "fDetVsBpm4AX[4]", fDetVsBpm4AX);
      R__insp.Inspect(R__cl, R__parent, "fDetVsBpm4BX[4]", fDetVsBpm4BX);
      R__insp.Inspect(R__cl, R__parent, "fDetVsBpm4AY[4]", fDetVsBpm4AY);
      R__insp.Inspect(R__cl, R__parent, "fDetVsBpm4BY[4]", fDetVsBpm4BY);
      R__insp.Inspect(R__cl, R__parent, "fDet12Xoff", &fDet12Xoff);
      R__insp.Inspect(R__cl, R__parent, "fDet4AXoff", &fDet4AXoff);
      R__insp.Inspect(R__cl, R__parent, "fDet4BXoff", &fDet4BXoff);
      R__insp.Inspect(R__cl, R__parent, "fDet4AYoff", &fDet4AYoff);
      R__insp.Inspect(R__cl, R__parent, "fDet4BYoff", &fDet4BYoff);
      VaEvent::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaSimEvent(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaSimEvent : new ::TaSimEvent;
   }
   static void *newArray_TaSimEvent(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaSimEvent[nElements] : new ::TaSimEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaSimEvent(void *p) {
      delete ((::TaSimEvent*)p);
   }
   static void deleteArray_TaSimEvent(void *p) {
      delete [] ((::TaSimEvent*)p);
   }
   static void destruct_TaSimEvent(void *p) {
      typedef ::TaSimEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaSimEvent

//______________________________________________________________________________
void TaFileName::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaFileName.

   ::Error("TaFileName::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaFileName::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaFileName.
      TClass *R__cl = ::TaFileName::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fFileName", (void*)&fFileName);
      ::ROOT::GenericShowMembers("string", (void*)&fFileName, R__insp, strcat(R__parent,"fFileName."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaFileName(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaFileName : new ::TaFileName;
   }
   static void *newArray_TaFileName(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaFileName[nElements] : new ::TaFileName[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaFileName(void *p) {
      delete ((::TaFileName*)p);
   }
   static void deleteArray_TaFileName(void *p) {
      delete [] ((::TaFileName*)p);
   }
   static void destruct_TaFileName(void *p) {
      typedef ::TaFileName current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaFileName

//______________________________________________________________________________
void TaLabelledQuantity::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaLabelledQuantity.

   ::Error("TaLabelledQuantity::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaLabelledQuantity::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaLabelledQuantity.
      TClass *R__cl = ::TaLabelledQuantity::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fName", (void*)&fName);
      ::ROOT::GenericShowMembers("string", (void*)&fName, R__insp, strcat(R__parent,"fName."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fVal", &fVal);
      R__insp.Inspect(R__cl, R__parent, "fUnits", (void*)&fUnits);
      ::ROOT::GenericShowMembers("string", (void*)&fUnits, R__insp, strcat(R__parent,"fUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fFlags", &fFlags);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaLabelledQuantity(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaLabelledQuantity : new ::TaLabelledQuantity;
   }
   static void *newArray_TaLabelledQuantity(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaLabelledQuantity[nElements] : new ::TaLabelledQuantity[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaLabelledQuantity(void *p) {
      delete ((::TaLabelledQuantity*)p);
   }
   static void deleteArray_TaLabelledQuantity(void *p) {
      delete [] ((::TaLabelledQuantity*)p);
   }
   static void destruct_TaLabelledQuantity(void *p) {
      typedef ::TaLabelledQuantity current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaLabelledQuantity

//______________________________________________________________________________
void TaMultiplet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaMultiplet.

   ::Error("TaMultiplet::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaMultiplet::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaMultiplet.
      TClass *R__cl = ::TaMultiplet::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fN", &fN);
      R__insp.Inspect(R__cl, R__parent, "fFull", &fFull);
      R__insp.Inspect(R__cl, R__parent, "fPairs", (void*)&fPairs);
      ::ROOT::GenericShowMembers("vector<VaPair>", (void*)&fPairs, R__insp, strcat(R__parent,"fPairs."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fResults", (void*)&fResults);
      ::ROOT::GenericShowMembers("vector<TaLabelledQuantity>", (void*)&fResults, R__insp, strcat(R__parent,"fResults."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaMultiplet(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaMultiplet : new ::TaMultiplet;
   }
   static void *newArray_TaMultiplet(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaMultiplet[nElements] : new ::TaMultiplet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaMultiplet(void *p) {
      delete ((::TaMultiplet*)p);
   }
   static void deleteArray_TaMultiplet(void *p) {
      delete [] ((::TaMultiplet*)p);
   }
   static void destruct_TaMultiplet(void *p) {
      typedef ::TaMultiplet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaMultiplet

//______________________________________________________________________________
void TaOResultsFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaOResultsFile.

   ::Error("TaOResultsFile::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaOResultsFile::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaOResultsFile.
      TClass *R__cl = ::TaOResultsFile::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fPtag", (void*)&fPtag);
      ::ROOT::GenericShowMembers("string", (void*)&fPtag, R__insp, strcat(R__parent,"fPtag."),false);
      R__parent[R__ncp] = 0;
      ::ROOT::GenericShowMembers("basic_ofstream<char,char_traits<char> >", ( ::basic_ofstream<char,char_traits<char> > *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TaOResultsFile(void *p) {
      delete ((::TaOResultsFile*)p);
   }
   static void deleteArray_TaOResultsFile(void *p) {
      delete [] ((::TaOResultsFile*)p);
   }
   static void destruct_TaOResultsFile(void *p) {
      typedef ::TaOResultsFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaOResultsFile

//______________________________________________________________________________
void TaPairFromOctet::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaPairFromOctet.

   VaPair::Streamer(R__b);
}

//______________________________________________________________________________
void TaPairFromOctet::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaPairFromOctet.
      TClass *R__cl = ::TaPairFromOctet::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaPair::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaPairFromOctet(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromOctet : new ::TaPairFromOctet;
   }
   static void *newArray_TaPairFromOctet(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromOctet[nElements] : new ::TaPairFromOctet[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaPairFromOctet(void *p) {
      delete ((::TaPairFromOctet*)p);
   }
   static void deleteArray_TaPairFromOctet(void *p) {
      delete [] ((::TaPairFromOctet*)p);
   }
   static void destruct_TaPairFromOctet(void *p) {
      typedef ::TaPairFromOctet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaPairFromOctet

//______________________________________________________________________________
void TaPairFromPair::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaPairFromPair.

   VaPair::Streamer(R__b);
}

//______________________________________________________________________________
void TaPairFromPair::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaPairFromPair.
      TClass *R__cl = ::TaPairFromPair::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaPair::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaPairFromPair(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromPair : new ::TaPairFromPair;
   }
   static void *newArray_TaPairFromPair(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromPair[nElements] : new ::TaPairFromPair[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaPairFromPair(void *p) {
      delete ((::TaPairFromPair*)p);
   }
   static void deleteArray_TaPairFromPair(void *p) {
      delete [] ((::TaPairFromPair*)p);
   }
   static void destruct_TaPairFromPair(void *p) {
      typedef ::TaPairFromPair current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaPairFromPair

//______________________________________________________________________________
void TaPairFromQuad::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaPairFromQuad.

   VaPair::Streamer(R__b);
}

//______________________________________________________________________________
void TaPairFromQuad::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaPairFromQuad.
      TClass *R__cl = ::TaPairFromQuad::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaPair::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaPairFromQuad(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromQuad : new ::TaPairFromQuad;
   }
   static void *newArray_TaPairFromQuad(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaPairFromQuad[nElements] : new ::TaPairFromQuad[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaPairFromQuad(void *p) {
      delete ((::TaPairFromQuad*)p);
   }
   static void deleteArray_TaPairFromQuad(void *p) {
      delete [] ((::TaPairFromQuad*)p);
   }
   static void destruct_TaPairFromQuad(void *p) {
      typedef ::TaPairFromQuad current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaPairFromQuad

//______________________________________________________________________________
void TaRootRep::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaRootRep.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> run_num;
      R__b >> i;
      R__b >> j;
      R__b >> jfirst;
      R__b >> fNumchar;
      R__b >> carray;
      R__b >> AnaTDatime;
      R__b.CheckByteCount(R__s, R__c, TaRootRep::IsA());
   } else {
      R__c = R__b.WriteVersion(TaRootRep::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << run_num;
      R__b << i;
      R__b << j;
      R__b << jfirst;
      R__b << fNumchar;
      R__b << carray;
      R__b << AnaTDatime;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void TaRootRep::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaRootRep.
      TClass *R__cl = ::TaRootRep::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "run_num", &run_num);
      R__insp.Inspect(R__cl, R__parent, "i", &i);
      R__insp.Inspect(R__cl, R__parent, "j", &j);
      R__insp.Inspect(R__cl, R__parent, "jfirst", &jfirst);
      R__insp.Inspect(R__cl, R__parent, "fptr", &fptr);
      R__insp.Inspect(R__cl, R__parent, "fNumchar", &fNumchar);
      R__insp.Inspect(R__cl, R__parent, "*carray", &carray);
      R__insp.Inspect(R__cl, R__parent, "*AnaTDatime", &AnaTDatime);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaRootRep(void *p) {
      return  p ? new(p) ::TaRootRep : new ::TaRootRep;
   }
   static void *newArray_TaRootRep(Long_t nElements, void *p) {
      return p ? new(p) ::TaRootRep[nElements] : new ::TaRootRep[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaRootRep(void *p) {
      delete ((::TaRootRep*)p);
   }
   static void deleteArray_TaRootRep(void *p) {
      delete [] ((::TaRootRep*)p);
   }
   static void destruct_TaRootRep(void *p) {
      typedef ::TaRootRep current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaRootRep

//______________________________________________________________________________
void TaRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaRun.

   ::Error("TaRun::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaRun::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaRun.
      TClass *R__cl = ::TaRun::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fRunNumber", &fRunNumber);
      R__insp.Inspect(R__cl, R__parent, "fEventNumber", &fEventNumber);
      R__insp.Inspect(R__cl, R__parent, "fAccumEventNumber", &fAccumEventNumber);
      R__insp.Inspect(R__cl, R__parent, "*fDataBase", &fDataBase);
      R__insp.Inspect(R__cl, R__parent, "*fCutList", &fCutList);
      R__insp.Inspect(R__cl, R__parent, "fOversamp", &fOversamp);
      R__insp.Inspect(R__cl, R__parent, "fCompress", &fCompress);
      R__insp.Inspect(R__cl, R__parent, "*fCoda", &fCoda);
      R__insp.Inspect(R__cl, R__parent, "mymode", &mymode);
      R__insp.Inspect(R__cl, R__parent, "fCodaFileName", (void*)&fCodaFileName);
      ::ROOT::GenericShowMembers("string", (void*)&fCodaFileName, R__insp, strcat(R__parent,"fCodaFileName."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fComputer", (void*)&fComputer);
      ::ROOT::GenericShowMembers("string", (void*)&fComputer, R__insp, strcat(R__parent,"fComputer."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSession", (void*)&fSession);
      ::ROOT::GenericShowMembers("string", (void*)&fSession, R__insp, strcat(R__parent,"fSession."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fEvent", &fEvent);
      R__insp.Inspect(R__cl, R__parent, "*fAccumEvent", &fAccumEvent);
      R__insp.Inspect(R__cl, R__parent, "*fDevices", &fDevices);
      R__insp.Inspect(R__cl, R__parent, "*fEpics", &fEpics);
      R__insp.Inspect(R__cl, R__parent, "*fRootFile", &fRootFile);
      R__insp.Inspect(R__cl, R__parent, "*fEvtree", &fEvtree);
      R__insp.Inspect(R__cl, R__parent, "*fEpicsTree", &fEpicsTree);
      R__insp.Inspect(R__cl, R__parent, "*fESliceStats", &fESliceStats);
      R__insp.Inspect(R__cl, R__parent, "*fPSliceStats", &fPSliceStats);
      R__insp.Inspect(R__cl, R__parent, "*fPOrdSliceStats", &fPOrdSliceStats);
      R__insp.Inspect(R__cl, R__parent, "*fMSliceStats", &fMSliceStats);
      R__insp.Inspect(R__cl, R__parent, "*fERunStats", &fERunStats);
      R__insp.Inspect(R__cl, R__parent, "*fPRunStats", &fPRunStats);
      R__insp.Inspect(R__cl, R__parent, "*fPOrdRunStats", &fPOrdRunStats);
      R__insp.Inspect(R__cl, R__parent, "*fMRunStats", &fMRunStats);
      R__insp.Inspect(R__cl, R__parent, "fEStatsNames", (void*)&fEStatsNames);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fEStatsNames, R__insp, strcat(R__parent,"fEStatsNames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPStatsNames", (void*)&fPStatsNames);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fPStatsNames, R__insp, strcat(R__parent,"fPStatsNames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPOrdStatsNames", (void*)&fPOrdStatsNames);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fPOrdStatsNames, R__insp, strcat(R__parent,"fPOrdStatsNames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMStatsNames", (void*)&fMStatsNames);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fMStatsNames, R__insp, strcat(R__parent,"fMStatsNames."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fEStatsUnits", (void*)&fEStatsUnits);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fEStatsUnits, R__insp, strcat(R__parent,"fEStatsUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPStatsUnits", (void*)&fPStatsUnits);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fPStatsUnits, R__insp, strcat(R__parent,"fPStatsUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPOrdStatsUnits", (void*)&fPOrdStatsUnits);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fPOrdStatsUnits, R__insp, strcat(R__parent,"fPOrdStatsUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fMStatsUnits", (void*)&fMStatsUnits);
      ::ROOT::GenericShowMembers("vector<string>", (void*)&fMStatsUnits, R__insp, strcat(R__parent,"fMStatsUnits."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fFirstPass", &fFirstPass);
      R__insp.Inspect(R__cl, R__parent, "*fResFile", &fResFile);
      R__insp.Inspect(R__cl, R__parent, "fFillDitherOnly", &fFillDitherOnly);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaRun(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaRun : new ::TaRun;
   }
   static void *newArray_TaRun(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaRun[nElements] : new ::TaRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaRun(void *p) {
      delete ((::TaRun*)p);
   }
   static void deleteArray_TaRun(void *p) {
      delete [] ((::TaRun*)p);
   }
   static void destruct_TaRun(void *p) {
      typedef ::TaRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaRun

//______________________________________________________________________________
void TaStandardAna::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaStandardAna.

   VaAnalysis::Streamer(R__b);
}

//______________________________________________________________________________
void TaStandardAna::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaStandardAna.
      TClass *R__cl = ::TaStandardAna::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaStandardAna(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaStandardAna : new ::TaStandardAna;
   }
   static void *newArray_TaStandardAna(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaStandardAna[nElements] : new ::TaStandardAna[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaStandardAna(void *p) {
      delete ((::TaStandardAna*)p);
   }
   static void deleteArray_TaStandardAna(void *p) {
      delete [] ((::TaStandardAna*)p);
   }
   static void destruct_TaStandardAna(void *p) {
      typedef ::TaStandardAna current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaStandardAna

//______________________________________________________________________________
void TaFeedbackAna::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaFeedbackAna.

   VaAnalysis::Streamer(R__b);
}

//______________________________________________________________________________
void TaFeedbackAna::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaFeedbackAna.
      TClass *R__cl = ::TaFeedbackAna::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      VaAnalysis::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaFeedbackAna(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaFeedbackAna : new ::TaFeedbackAna;
   }
   static void *newArray_TaFeedbackAna(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaFeedbackAna[nElements] : new ::TaFeedbackAna[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaFeedbackAna(void *p) {
      delete ((::TaFeedbackAna*)p);
   }
   static void deleteArray_TaFeedbackAna(void *p) {
      delete [] ((::TaFeedbackAna*)p);
   }
   static void destruct_TaFeedbackAna(void *p) {
      typedef ::TaFeedbackAna current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaFeedbackAna

//______________________________________________________________________________
void TaStatistics::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaStatistics.

   ::Error("TaStatistics::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaStatistics::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaStatistics.
      TClass *R__cl = ::TaStatistics::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fGoodErrors", &fGoodErrors);
      R__insp.Inspect(R__cl, R__parent, "fFirstPass", &fFirstPass);
      R__insp.Inspect(R__cl, R__parent, "fN", &fN);
      R__insp.Inspect(R__cl, R__parent, "fN2", &fN2);
      R__insp.Inspect(R__cl, R__parent, "fSumWt", (void*)&fSumWt);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWt, R__insp, strcat(R__parent,"fSumWt."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWt2", (void*)&fSumWt2);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWt2, R__insp, strcat(R__parent,"fSumWt2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWtX", (void*)&fSumWtX);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWtX, R__insp, strcat(R__parent,"fSumWtX."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWtX2", (void*)&fSumWtX2);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWtX2, R__insp, strcat(R__parent,"fSumWtX2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWt2Err2", (void*)&fSumWt2Err2);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWt2Err2, R__insp, strcat(R__parent,"fSumWt2Err2."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fXbar", (void*)&fXbar);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fXbar, R__insp, strcat(R__parent,"fXbar."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWtXs", (void*)&fSumWtXs);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWtXs, R__insp, strcat(R__parent,"fSumWtXs."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fSumWtXs2", (void*)&fSumWtXs2);
      ::ROOT::GenericShowMembers("vector<Double_t>", (void*)&fSumWtXs2, R__insp, strcat(R__parent,"fSumWtXs2."),false);
      R__parent[R__ncp] = 0;
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TaStatistics(void *p) {
      delete ((::TaStatistics*)p);
   }
   static void deleteArray_TaStatistics(void *p) {
      delete [] ((::TaStatistics*)p);
   }
   static void destruct_TaStatistics(void *p) {
      typedef ::TaStatistics current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaStatistics

//______________________________________________________________________________
void TaString::Streamer(TBuffer &R__b)
{
   // Stream an object of class TaString.

   ::Error("TaString::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void TaString::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class TaString.
      TClass *R__cl = ::TaString::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      ::ROOT::GenericShowMembers("string", ( ::string *) (this ), R__insp, R__parent, false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TaString(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaString : new ::TaString;
   }
   static void *newArray_TaString(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TaString[nElements] : new ::TaString[nElements];
   }
   // Wrapper around operator delete
   static void delete_TaString(void *p) {
      delete ((::TaString*)p);
   }
   static void deleteArray_TaString(void *p) {
      delete [] ((::TaString*)p);
   }
   static void destruct_TaString(void *p) {
      typedef ::TaString current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TaString

//______________________________________________________________________________
void VaAnalysis::Streamer(TBuffer &R__b)
{
   // Stream an object of class VaAnalysis.

   ::Error("VaAnalysis::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void VaAnalysis::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class VaAnalysis.
      TClass *R__cl = ::VaAnalysis::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "*fRun", &fRun);
      R__insp.Inspect(R__cl, R__parent, "fMaxNumEv", &fMaxNumEv);
      R__insp.Inspect(R__cl, R__parent, "*fPreEvt", &fPreEvt);
      R__insp.Inspect(R__cl, R__parent, "*fPrePair", &fPrePair);
      R__insp.Inspect(R__cl, R__parent, "fEHelDeque", (void*)&fEHelDeque);
      ::ROOT::GenericShowMembers("deque<VaEvent>", (void*)&fEHelDeque, R__insp, strcat(R__parent,"fEHelDeque."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fEDeque", (void*)&fEDeque);
      ::ROOT::GenericShowMembers("deque<VaEvent>", (void*)&fEDeque, R__insp, strcat(R__parent,"fEDeque."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fPDeque", (void*)&fPDeque);
      ::ROOT::GenericShowMembers("deque<VaPair*>", (void*)&fPDeque, R__insp, strcat(R__parent,"fPDeque."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fEvt", &fEvt);
      R__insp.Inspect(R__cl, R__parent, "*fPair", &fPair);
      R__insp.Inspect(R__cl, R__parent, "*fMultiplet", &fMultiplet);
      R__insp.Inspect(R__cl, R__parent, "fDoMultiplet", &fDoMultiplet);
      R__insp.Inspect(R__cl, R__parent, "fNMultiplet", &fNMultiplet);
      R__insp.Inspect(R__cl, R__parent, "fEHelDequeMax", &fEHelDequeMax);
      R__insp.Inspect(R__cl, R__parent, "fEDequeMax", &fEDequeMax);
      R__insp.Inspect(R__cl, R__parent, "fPDequeMax", &fPDequeMax);
      R__insp.Inspect(R__cl, R__parent, "fTreeList", (void*)&fTreeList);
      ::ROOT::GenericShowMembers("vector<AnaList>", (void*)&fTreeList, R__insp, strcat(R__parent,"fTreeList."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fPairTree", &fPairTree);
      R__insp.Inspect(R__cl, R__parent, "*fMultipletTree", &fMultipletTree);
      R__insp.Inspect(R__cl, R__parent, "*fTreeEvNums", &fTreeEvNums);
      R__insp.Inspect(R__cl, R__parent, "fTreeMEvNum", &fTreeMEvNum);
      R__insp.Inspect(R__cl, R__parent, "fTreeOKCond", &fTreeOKCond);
      R__insp.Inspect(R__cl, R__parent, "fTreeOKCut", &fTreeOKCut);
      R__insp.Inspect(R__cl, R__parent, "fTreeOKCCut", &fTreeOKCCut);
      R__insp.Inspect(R__cl, R__parent, "fTreePrevROHel", &fTreePrevROHel);
      R__insp.Inspect(R__cl, R__parent, "fTreePrevHel", &fTreePrevHel);
      R__insp.Inspect(R__cl, R__parent, "*fTreeSpace", &fTreeSpace);
      R__insp.Inspect(R__cl, R__parent, "fNCuts", &fNCuts);
      R__insp.Inspect(R__cl, R__parent, "*fCutArray", &fCutArray);
      R__insp.Inspect(R__cl, R__parent, "*fCutIntArray", &fCutIntArray);
      R__insp.Inspect(R__cl, R__parent, "fOnlFlag", &fOnlFlag);
      R__insp.Inspect(R__cl, R__parent, "fEvtProc", &fEvtProc);
      R__insp.Inspect(R__cl, R__parent, "fPairProc", &fPairProc);
      R__insp.Inspect(R__cl, R__parent, "fMultipletProc", &fMultipletProc);
      R__insp.Inspect(R__cl, R__parent, "fPairType", &fPairType);
      R__insp.Inspect(R__cl, R__parent, "fSliceLimit", &fSliceLimit);
      R__insp.Inspect(R__cl, R__parent, "fDoSlice", &fDoSlice);
      R__insp.Inspect(R__cl, R__parent, "fDoRun", &fDoRun);
      R__insp.Inspect(R__cl, R__parent, "fDoRoot", &fDoRoot);
      R__insp.Inspect(R__cl, R__parent, "fFirstPass", &fFirstPass);
      R__insp.Inspect(R__cl, R__parent, "fLastPass", &fLastPass);
      R__insp.Inspect(R__cl, R__parent, "*fBlind", &fBlind);
      R__insp.Inspect(R__cl, R__parent, "fRunNum", &fRunNum);
      R__insp.Inspect(R__cl, R__parent, "fFdbkName[5]", fFdbkName);
      R__insp.Inspect(R__cl, R__parent, "fMonitor[5]", fMonitor);
      R__insp.Inspect(R__cl, R__parent, "fSwitch[5]", fSwitch);
      R__insp.Inspect(R__cl, R__parent, "fSend[5]", fSend);
      R__insp.Inspect(R__cl, R__parent, "fTimeScale[5]", fTimeScale);
      R__insp.Inspect(R__cl, R__parent, "fMonitorKey[5]", fMonitorKey);
      R__insp.Inspect(R__cl, R__parent, "fNPair[5]", fNPair);
      R__insp.Inspect(R__cl, R__parent, "fStartPair[5]", fStartPair);
      R__insp.Inspect(R__cl, R__parent, "fStopPair[5]", fStopPair);
      R__insp.Inspect(R__cl, R__parent, "fFeedNum[5]", fFeedNum);
      R__insp.Inspect(R__cl, R__parent, "fSum[5]", fSum);
      R__insp.Inspect(R__cl, R__parent, "fMean1[5]", fMean1);
      R__insp.Inspect(R__cl, R__parent, "fMean2[5]", fMean2);
      R__insp.Inspect(R__cl, R__parent, "fRMS[5]", fRMS);
      R__insp.Inspect(R__cl, R__parent, "fResult[5]", fResult);
      R__insp.Inspect(R__cl, R__parent, "fResultError[5]", fResultError);
      R__insp.Inspect(R__cl, R__parent, "fIAslope", &fIAslope);
      R__insp.Inspect(R__cl, R__parent, "fIAHallCslope", &fIAHallCslope);
      R__insp.Inspect(R__cl, R__parent, "fPITAslope", &fPITAslope);
      R__insp.Inspect(R__cl, R__parent, "*fPZTMatrix", &fPZTMatrix);
      R__insp.Inspect(R__cl, R__parent, "fLast[5]", fLast);
      R__insp.Inspect(R__cl, R__parent, "fCurMon", &fCurMon);
      R__insp.Inspect(R__cl, R__parent, "fPZTQcoupling", &fPZTQcoupling);
      R__insp.Inspect(R__cl, R__parent, "fPZTQslopes[2]", fPZTQslopes);
      R__insp.Inspect(R__cl, R__parent, "fFillDitherOnly", &fFillDitherOnly);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_VaAnalysis(void *p) {
      delete ((::VaAnalysis*)p);
   }
   static void deleteArray_VaAnalysis(void *p) {
      delete [] ((::VaAnalysis*)p);
   }
   static void destruct_VaAnalysis(void *p) {
      typedef ::VaAnalysis current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::VaAnalysis

//______________________________________________________________________________
void VaPair::Streamer(TBuffer &R__b)
{
   // Stream an object of class VaPair.

   ::Error("VaPair::Streamer", "version id <=0 in ClassDef, dummy Streamer() called"); if (R__b.IsReading()) { }
}

//______________________________________________________________________________
void VaPair::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class VaPair.
      TClass *R__cl = ::VaPair::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fEvLeft", &fEvLeft);
      fEvLeft.ShowMembers(R__insp, strcat(R__parent,"fEvLeft.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fEvRight", &fEvRight);
      fEvRight.ShowMembers(R__insp, strcat(R__parent,"fEvRight.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "fResults", (void*)&fResults);
      ::ROOT::GenericShowMembers("vector<TaLabelledQuantity>", (void*)&fResults, R__insp, strcat(R__parent,"fResults."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "*fEvFirst", &fEvFirst);
      R__insp.Inspect(R__cl, R__parent, "*fEvSecond", &fEvSecond);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_VaPair(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VaPair : new ::VaPair;
   }
   static void *newArray_VaPair(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::VaPair[nElements] : new ::VaPair[nElements];
   }
   // Wrapper around operator delete
   static void delete_VaPair(void *p) {
      delete ((::VaPair*)p);
   }
   static void deleteArray_VaPair(void *p) {
      delete [] ((::VaPair*)p);
   }
   static void destruct_VaPair(void *p) {
      typedef ::VaPair current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::VaPair

namespace ROOT {
   // Wrappers around operator new
   static void *new_string(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) string : new string;
   }
   static void *newArray_string(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) string[nElements] : new string[nElements];
   }
   // Wrapper around operator delete
   static void delete_string(void *p) {
      delete ((string*)p);
   }
   static void deleteArray_string(void *p) {
      delete [] ((string*)p);
   }
   static void destruct_string(void *p) {
      typedef string current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class string

namespace ROOT {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TString>), DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TString>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEstringgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEstringgR_Dictionary();
   static void *new_vectorlEstringgR(void *p = 0);
   static void *newArray_vectorlEstringgR(Long_t size, void *p);
   static void delete_vectorlEstringgR(void *p);
   static void deleteArray_vectorlEstringgR(void *p);
   static void destruct_vectorlEstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<string>*)
   {
      vector<string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<string>", -2, "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<string>), DefineBehavior(ptr, ptr),
                  0, &vectorlEstringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<string>) );
      instance.SetNew(&new_vectorlEstringgR);
      instance.SetNewArray(&newArray_vectorlEstringgR);
      instance.SetDelete(&delete_vectorlEstringgR);
      instance.SetDeleteArray(&deleteArray_vectorlEstringgR);
      instance.SetDestructor(&destruct_vectorlEstringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<string> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string> : new vector<string>;
   }
   static void *newArray_vectorlEstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<string>[nElements] : new vector<string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEstringgR(void *p) {
      delete ((vector<string>*)p);
   }
   static void deleteArray_vectorlEstringgR(void *p) {
      delete [] ((vector<string>*)p);
   }
   static void destruct_vectorlEstringgR(void *p) {
      typedef vector<string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<string>

namespace ROOT {
   void vectorlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEunsignedsPintgR_Dictionary();
   static void *new_vectorlEunsignedsPintgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPintgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPintgR(void *p);
   static void deleteArray_vectorlEunsignedsPintgR(void *p);
   static void destruct_vectorlEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned int>*)
   {
      vector<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned int>", -2, "vector.dll", 0,
                  typeid(vector<unsigned int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned int>) );
      instance.SetNew(&new_vectorlEunsignedsPintgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPintgR);
      instance.SetDelete(&delete_vectorlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPintgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int> : new vector<unsigned int>;
   }
   static void *newArray_vectorlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int>[nElements] : new vector<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPintgR(void *p) {
      delete ((vector<unsigned int>*)p);
   }
   static void deleteArray_vectorlEunsignedsPintgR(void *p) {
      delete [] ((vector<unsigned int>*)p);
   }
   static void destruct_vectorlEunsignedsPintgR(void *p) {
      typedef vector<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned int>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

namespace ROOT {
   void vectorlEvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEvectorlEdoublegRsPgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double> >*)
   {
      vector<vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double> >", -2, "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<double> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double> >) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> > : new vector<vector<double> >;
   }
   static void *newArray_vectorlEvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double> >[nElements] : new vector<vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete ((vector<vector<double> >*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRsPgR(void *p) {
      delete [] ((vector<vector<double> >*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRsPgR(void *p) {
      typedef vector<vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<double> >

namespace ROOT {
   void vectorlEvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlEvectorlEintgRsPgR_Dictionary();
   static void *new_vectorlEvectorlEintgRsPgR(void *p = 0);
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEintgRsPgR(void *p);
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p);
   static void destruct_vectorlEvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<int> >*)
   {
      vector<vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<int> >", -2, "/u/apps/root/5.26-00/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<vector<int> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEintgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<int> >) );
      instance.SetNew(&new_vectorlEvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEintgRsPgR);
      instance.SetDelete(&delete_vectorlEvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> > : new vector<vector<int> >;
   }
   static void *newArray_vectorlEvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<int> >[nElements] : new vector<vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEintgRsPgR(void *p) {
      delete ((vector<vector<int> >*)p);
   }
   static void deleteArray_vectorlEvectorlEintgRsPgR(void *p) {
      delete [] ((vector<vector<int> >*)p);
   }
   static void destruct_vectorlEvectorlEintgRsPgR(void *p) {
      typedef vector<vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<int> >

/********************************************************
* TaDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTaDict();

extern "C" void G__set_cpp_environmentTaDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("TaBlind.hh");
  G__add_compiledheader("TaFileName.hh");
  G__add_compiledheader("TaIResultsFile.hh");
  G__add_compiledheader("TaLabelledQuantity.hh");
  G__add_compiledheader("TaOResultsFile.hh");
  G__add_compiledheader("TaStatistics.hh");
  G__add_compiledheader("TaString.hh");
  G__add_compiledheader("TaAnalysisManager.hh");
  G__add_compiledheader("TaDebugAna.hh");
  G__add_compiledheader("TaDevice.hh");
  G__add_compiledheader("TaDataBase.hh");
  G__add_compiledheader("TaCutInterval.hh");
  G__add_compiledheader("TaCutList.hh");
  G__add_compiledheader("VaEvent.hh");
  G__add_compiledheader("TaEvent.hh");
  G__add_compiledheader("TaSimEvent.hh");
  G__add_compiledheader("TaEpics.hh");
  G__add_compiledheader("TaMultiplet.hh");
  G__add_compiledheader("TaPairFromOctet.hh");
  G__add_compiledheader("TaPairFromPair.hh");
  G__add_compiledheader("TaPairFromQuad.hh");
  G__add_compiledheader("TaRun.hh");
  G__add_compiledheader("TaStandardAna.hh");
  G__add_compiledheader("TaFeedbackAna.hh");
  G__add_compiledheader("VaAnalysis.hh");
  G__add_compiledheader("VaPair.hh");
  G__add_compiledheader("TaADCCalib.hh");
  G__add_compiledheader("PanTypes.hh");
  G__add_compiledheader("DevTypes.hh");
  G__cpp_reset_tagtableTaDict();
}
#include <new>
extern "C" int G__cpp_dllrevTaDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* string */
static int G__TaDict_103_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new string[n];
     } else {
       p = new((void*) gvp) string[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new string;
     } else {
       p = new((void*) gvp) string;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new string(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) string(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new string(
*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) string(
*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new string((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) string((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new string((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) string((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   string* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new string((size_t) G__int(libp->para[0]), (char) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) string((size_t) G__int(libp->para[0]), (char) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_string));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator=(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator=((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator=((char) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator+=(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator+=((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->operator+=((char) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->append(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->append(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->append((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->append((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->append((size_t) G__int(libp->para[0]), (char) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->assign(*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->assign(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->assign((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->assign((const char*) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->assign((size_t) G__int(libp->para[0]), (char) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->insert((size_t) G__int(libp->para[0]), *(string*) libp->para[1].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->insert((size_t) G__int(libp->para[0]), *(string*) libp->para[1].ref
, (size_t) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->insert((size_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->insert((size_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->insert((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (char) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->replace((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->replace((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, *(string*) libp->para[2].ref, (size_t) G__int(libp->para[3])
, (size_t) G__int(libp->para[4]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->replace((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (size_t) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->replace((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((string*) G__getstructoffset())->replace((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2]), (char) G__int(libp->para[3]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const char& obj = ((const string*) G__getstructoffset())->operator[]((size_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'c', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const char& obj = ((string*) G__getstructoffset())->operator[]((size_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'c', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const char& obj = ((const string*) G__getstructoffset())->at((size_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'c', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const char& obj = ((string*) G__getstructoffset())->at((size_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'c', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const string*) G__getstructoffset())->c_str());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const string*) G__getstructoffset())->data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->length());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((string*) G__getstructoffset())->resize((size_t) G__int(libp->para[0]), (char) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((string*) G__getstructoffset())->resize((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((string*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((string*) G__getstructoffset())->reserve((size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 104, (long) ((string*) G__getstructoffset())->copy((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 104, (long) ((string*) G__getstructoffset())->copy((char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->rfind((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_of((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_of((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_first_not_of((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of(*(string*) libp->para[0].ref, (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of(*(string*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])
, (size_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of((const char*) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of((char) G__int(libp->para[0]), (size_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 104, (long) ((const string*) G__getstructoffset())->find_last_not_of((char) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const string* pobj;
         const string xobj = ((const string*) G__getstructoffset())->substr((size_t) G__int(libp->para[0]), (size_t) G__int(libp->para[1]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const string* pobj;
         const string xobj = ((const string*) G__getstructoffset())->substr((size_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const string* pobj;
         const string xobj = ((const string*) G__getstructoffset())->substr();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const string*) G__getstructoffset())->compare(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_103_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const string*) G__getstructoffset())->compare((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef string G__Tstring;
static int G__TaDict_103_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (string*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((string*) (soff+(sizeof(string)*i)))->~G__Tstring();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (string*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((string*) (soff))->~G__Tstring();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaBlind */
static int G__TaDict_146_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaBlind* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaBlind[n];
     } else {
       p = new((void*) gvp) TaBlind[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaBlind;
     } else {
       p = new((void*) gvp) TaBlind;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaBlind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaBlind* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaBlind(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TaBlind(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaBlind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaBlind* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaBlind(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) TaBlind(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const Double_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaBlind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaBlind*) G__getstructoffset())->Blind((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaBlind*) G__getstructoffset())->UnBlind((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaBlind*) G__getstructoffset())->BlindSignOnly((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaBlind*) G__getstructoffset())->Blinding());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaBlind::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaBlind::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaBlind::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaBlind::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaBlind*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaBlind*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaBlind*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaBlind*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaBlind::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaBlind::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaBlind::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_146_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaBlind::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaBlind G__TTaBlind;
static int G__TaDict_146_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaBlind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaBlind*) (soff+(sizeof(TaBlind)*i)))->~G__TTaBlind();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaBlind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaBlind*) (soff))->~G__TTaBlind();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaFileName */
static int G__TaDict_163_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName[n];
     } else {
       p = new((void*) gvp) TaFileName[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName;
     } else {
       p = new((void*) gvp) TaFileName;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), *((const string*) G__int(libp->para[3]))
, *((const string*) G__int(libp->para[4])));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), *((const string*) G__int(libp->para[3]))
, *((const string*) G__int(libp->para[4])));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), *((const string*) G__int(libp->para[3])));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), *((const string*) G__int(libp->para[3])));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const char*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TaFileName(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
*((const string*) G__int(libp->para[0])), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) TaFileName(
*((const string*) G__int(libp->para[0])), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(*((const string*) G__int(libp->para[0])), *((const string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) TaFileName(*((const string*) G__int(libp->para[0])), *((const string*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(*((const string*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) TaFileName(*((const string*) G__int(libp->para[0])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TaFileName(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TaFileName((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFileName((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TaFileName((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFileName* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaFileName(*(TaFileName*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaFileName(*(TaFileName*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaFileName& obj = ((TaFileName*) G__getstructoffset())->operator=(*(TaFileName*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaFileName::Setup((const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaFileName::Setup((const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((TaFileName*) G__getstructoffset())->String();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((TaFileName*) G__getstructoffset())->Tstring();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaFileName::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFileName::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaFileName::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaFileName::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaFileName*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaFileName*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaFileName*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaFileName*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFileName::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaFileName::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFileName::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_163_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaFileName::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaFileName G__TTaFileName;
static int G__TaDict_163_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaFileName*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaFileName*) (soff+(sizeof(TaFileName)*i)))->~G__TTaFileName();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaFileName*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaFileName*) (soff))->~G__TTaFileName();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaIResultsFile */
static int G__TaDict_164_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaIResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile((const char*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TaIResultsFile((const char*) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TaIResultsFile((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaIResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     } else {
       p = new((void*) gvp) TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1]))
, *((const string*) G__int(libp->para[2])));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile((const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) TaIResultsFile((const RunNumber_t) G__int(libp->para[0]), *((const string*) G__int(libp->para[1])));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaIResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TaIResultsFile(
(const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaIResultsFile((const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TaIResultsFile((const RunNumber_t) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaIResultsFile*) G__getstructoffset())->ReadNextLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaIResultsFile*) G__getstructoffset())->GetChksum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaIResultsFile*) G__getstructoffset())->GetPtag();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaIResultsFile*) G__getstructoffset())->GetPtagTS();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaIResultsFile*) G__getstructoffset())->GetRtag();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaIResultsFile*) G__getstructoffset())->GetRtagTS();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaIResultsFile*) G__getstructoffset())->GetRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaIResultsFile*) G__getstructoffset())->GetErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaIResultsFile*) G__getstructoffset())->GetEv0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaIResultsFile*) G__getstructoffset())->GetEv1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaIResultsFile*) G__getstructoffset())->GetUnits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaIResultsFile*) G__getstructoffset())->GetUnitsTS();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaIResultsFile*) G__getstructoffset())->GetCom();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaIResultsFile*) G__getstructoffset())->GetComTS();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaIResultsFile*) G__getstructoffset())->GetLine();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaIResultsFile*) G__getstructoffset())->GetLineTS();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaIResultsFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaIResultsFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaIResultsFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaIResultsFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaIResultsFile*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaIResultsFile*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaIResultsFile*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaIResultsFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaIResultsFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaIResultsFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaIResultsFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_164_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaIResultsFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaIResultsFile G__TTaIResultsFile;
static int G__TaDict_164_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaIResultsFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaIResultsFile*) (soff+(sizeof(TaIResultsFile)*i)))->~G__TTaIResultsFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaIResultsFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaIResultsFile*) (soff))->~G__TTaIResultsFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaLabelledQuantity */
static int G__TaDict_165_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaLabelledQuantity* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaLabelledQuantity(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, *(string*) libp->para[2].ref, (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaLabelledQuantity(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, *(string*) libp->para[2].ref, (const UInt_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaLabelledQuantity(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, *(string*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) TaLabelledQuantity(
*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1])
, *(string*) libp->para[2].ref);
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaLabelledQuantity(*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) TaLabelledQuantity(*(string*) libp->para[0].ref, (const Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaLabelledQuantity(*(string*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) TaLabelledQuantity(*(string*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TaLabelledQuantity[n];
       } else {
         p = new((void*) gvp) TaLabelledQuantity[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TaLabelledQuantity;
       } else {
         p = new((void*) gvp) TaLabelledQuantity;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaLabelledQuantity* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaLabelledQuantity(*(TaLabelledQuantity*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaLabelledQuantity(*(TaLabelledQuantity*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaLabelledQuantity& obj = ((TaLabelledQuantity*) G__getstructoffset())->operator=(*(TaLabelledQuantity*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaLabelledQuantity*) G__getstructoffset())->SetVal((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaLabelledQuantity*) G__getstructoffset())->GetName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaLabelledQuantity*) G__getstructoffset())->GetVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaLabelledQuantity*) G__getstructoffset())->GetUnits();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaLabelledQuantity*) G__getstructoffset())->TestFlags((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaLabelledQuantity::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaLabelledQuantity::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaLabelledQuantity::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaLabelledQuantity::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaLabelledQuantity*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaLabelledQuantity*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaLabelledQuantity*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaLabelledQuantity*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaLabelledQuantity::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaLabelledQuantity::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaLabelledQuantity::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_165_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaLabelledQuantity::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaLabelledQuantity G__TTaLabelledQuantity;
static int G__TaDict_165_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaLabelledQuantity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaLabelledQuantity*) (soff+(sizeof(TaLabelledQuantity)*i)))->~G__TTaLabelledQuantity();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaLabelledQuantity*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaLabelledQuantity*) (soff))->~G__TTaLabelledQuantity();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaOResultsFile */
static int G__TaDict_166_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaOResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const RunNumber_t) G__int(libp->para[1])
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3])
, *((const string*) G__int(libp->para[4])));
     } else {
       p = new((void*) gvp) TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const RunNumber_t) G__int(libp->para[1])
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3])
, *((const string*) G__int(libp->para[4])));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const RunNumber_t) G__int(libp->para[1])
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const RunNumber_t) G__int(libp->para[1])
, *((const string*) G__int(libp->para[2])), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaOResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaOResultsFile(
(const char*) G__int(libp->para[0]), (const RunNumber_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TaOResultsFile(
(const char*) G__int(libp->para[0]), (const RunNumber_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3])
, (const char*) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaOResultsFile(
(const char*) G__int(libp->para[0]), (const RunNumber_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TaOResultsFile(
(const char*) G__int(libp->para[0]), (const RunNumber_t) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (const UInt_t) G__int(libp->para[3]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaOResultsFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) TaOResultsFile(
*((const string*) G__int(libp->para[0])), (const char*) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaOResultsFile*) G__getstructoffset())->WriteNextLine(
*((const string*) G__int(libp->para[0])), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const EventNumber_t) G__int(libp->para[3])
, (const EventNumber_t) G__int(libp->para[4]), *((const string*) G__int(libp->para[5]))
, *((const string*) G__int(libp->para[6])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaOResultsFile*) G__getstructoffset())->WriteNextLine(
(const char*) G__int(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]), (const EventNumber_t) G__int(libp->para[3])
, (const EventNumber_t) G__int(libp->para[4]), (const char*) G__int(libp->para[5])
, (const char*) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaOResultsFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaOResultsFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaOResultsFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaOResultsFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaOResultsFile*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaOResultsFile*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaOResultsFile*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaOResultsFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaOResultsFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaOResultsFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaOResultsFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_166_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaOResultsFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaOResultsFile G__TTaOResultsFile;
static int G__TaDict_166_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaOResultsFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaOResultsFile*) (soff+(sizeof(TaOResultsFile)*i)))->~G__TTaOResultsFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaOResultsFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaOResultsFile*) (soff))->~G__TTaOResultsFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaStatistics */
static int G__TaDict_167_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaStatistics* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaStatistics((const size_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TaStatistics((const size_t) G__int(libp->para[0]), (const Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaStatistics((const size_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TaStatistics((const size_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaStatistics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaStatistics* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaStatistics(*(TaStatistics*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaStatistics(*(TaStatistics*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaStatistics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaStatistics& obj = ((TaStatistics*) G__getstructoffset())->operator=(*(TaStatistics*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStatistics*) G__getstructoffset())->Zero();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TaStatistics*) G__getstructoffset())->Update(*(vector<Double_t>*) libp->para[0].ref, *(vector<Double_t>*) libp->para[1].ref
, *(vector<Double_t>*) libp->para[2].ref);
      G__setnull(result7);
      break;
   case 2:
      ((TaStatistics*) G__getstructoffset())->Update(*(vector<Double_t>*) libp->para[0].ref, *(vector<Double_t>*) libp->para[1].ref);
      G__setnull(result7);
      break;
   case 1:
      ((TaStatistics*) G__getstructoffset())->Update(*(vector<Double_t>*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((TaStatistics*) G__getstructoffset())->Update((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1])
, (const Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((TaStatistics*) G__getstructoffset())->Update((const Double_t) G__double(libp->para[0]), (const Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((TaStatistics*) G__getstructoffset())->Update((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaStatistics& obj = ((TaStatistics*) G__getstructoffset())->operator+=(*(TaStatistics*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaStatistics*) G__getstructoffset())->N());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaStatistics*) G__getstructoffset())->Size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->DataRMS();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->Mean();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->MeanVar();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->MeanErr();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pair<Double_t,Double_t> >* pobj;
         const vector<pair<Double_t,Double_t> > xobj = ((const TaStatistics*) G__getstructoffset())->MeanAndErr();
         pobj = new vector<pair<Double_t,Double_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->Neff();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaStatistics*) G__getstructoffset())->DataRMS((const size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaStatistics*) G__getstructoffset())->Mean((const size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaStatistics*) G__getstructoffset())->MeanVar((const size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaStatistics*) G__getstructoffset())->MeanErr((const size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<Double_t,Double_t>* pobj;
         const pair<Double_t,Double_t> xobj = ((const TaStatistics*) G__getstructoffset())->MeanAndErr((const size_t) G__int(libp->para[0]));
         pobj = new pair<Double_t,Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaStatistics*) G__getstructoffset())->Neff((const size_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStatistics*) G__getstructoffset())->SetFirstPass((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaStatistics*) G__getstructoffset())->DumpSums((const size_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaStatistics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStatistics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaStatistics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaStatistics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaStatistics*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStatistics*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStatistics*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStatistics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStatistics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaStatistics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStatistics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_167_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaStatistics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaStatistics G__TTaStatistics;
static int G__TaDict_167_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaStatistics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaStatistics*) (soff+(sizeof(TaStatistics)*i)))->~G__TTaStatistics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaStatistics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaStatistics*) (soff))->~G__TTaStatistics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaString */
static int G__TaDict_173_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaString* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaString[n];
     } else {
       p = new((void*) gvp) TaString[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaString;
     } else {
       p = new((void*) gvp) TaString;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaString* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaString(*((const string*) G__int(libp->para[0])));
   } else {
     p = new((void*) gvp) TaString(*((const string*) G__int(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaString* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaString((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TaString((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaString));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaString*) G__getstructoffset())->CmpNoCase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const vector<string>* pobj;
         const vector<string> xobj = ((const TaString*) G__getstructoffset())->Split((size_t) G__int(libp->para[0]));
         pobj = new vector<string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const vector<string>* pobj;
         const vector<string> xobj = ((const TaString*) G__getstructoffset())->Split();
         pobj = new vector<string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaString*) G__getstructoffset())->Hex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaString* pobj;
         const TaString xobj = ((const TaString*) G__getstructoffset())->ToLower();
         pobj = new TaString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaString* pobj;
         const TaString xobj = ((const TaString*) G__getstructoffset())->ToUpper();
         pobj = new TaString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TaString* pobj;
         TaString xobj = ((TaString*) G__getstructoffset())->RemoveChar((const char*) G__int(libp->para[0]));
         pobj = new TaString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaString::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaString::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaString::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaString::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaString*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaString*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaString*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaString*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaString::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaString::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaString::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_173_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaString::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TaDict_173_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TaString* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TaString(*(TaString*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaString));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaString G__TTaString;
static int G__TaDict_173_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaString*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaString*) (soff+(sizeof(TaString)*i)))->~G__TTaString();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaString*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaString*) (soff))->~G__TTaString();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TaDict_173_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaString* dest = (TaString*) G__getstructoffset();
   *dest = *(TaString*) libp->para[0].ref;
   const TaString& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<string,allocator<string> > */
static int G__TaDict_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->at((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->begin();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->end();
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rbegin();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::reverse_iterator* pobj;
         vector<string,allocator<string> >::reverse_iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->rend();
         pobj = new vector<string,allocator<string> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->resize((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *((string*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<string,allocator<string> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator[]((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >[n];
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >;
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]), *(string*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<string,allocator<string> >((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*(vector<string,allocator<string> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<string,allocator<string> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<string,allocator<string> >(*((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string,allocator<string> >& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->operator=(*(vector<string,allocator<string> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->reserve((vector<string,allocator<string> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((vector<string,allocator<string> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->push_back(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->swap(*(vector<string,allocator<string> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<string,allocator<string> >::iterator* pobj;
         vector<string,allocator<string> >::iterator xobj = ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *(string*) libp->para[1].ref);
         pobj = new vector<string,allocator<string> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[1]))
, *((vector<string,allocator<string> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->insert(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), (vector<string,allocator<string> >::size_type) G__int(libp->para[1])
, *(string*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->erase(*((vector<string,allocator<string> >::iterator*) G__int(libp->para[0])), *((vector<string,allocator<string> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_175_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<string,allocator<string> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<string,allocator<string> > G__TvectorlEstringcOallocatorlEstringgRsPgR;
static int G__TaDict_175_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<string,allocator<string> >*) (soff+(sizeof(vector<string,allocator<string> >)*i)))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<string,allocator<string> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<string,allocator<string> >*) (soff))->~G__TvectorlEstringcOallocatorlEstringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaRun */
static int G__TaDict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaRun[n];
     } else {
       p = new((void*) gvp) TaRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaRun;
     } else {
       p = new((void*) gvp) TaRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaRun(*(Int_t*) G__Intref(&libp->para[0]));
   } else {
     p = new((void*) gvp) TaRun(*(Int_t*) G__Intref(&libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaRun(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaRun(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaRun*) G__getstructoffset())->Init(*(vector<string>*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaRun*) G__getstructoffset())->ReInit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaRun*) G__getstructoffset())->NextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->Decode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->AccumEvent(*(VaEvent*) libp->para[0].ref, (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->AccumPair(*(VaPair*) libp->para[0].ref, (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->AccumMultiplet(*(TaMultiplet*) libp->para[0].ref, (const Bool_t) G__int(libp->para[1])
, (const Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->PrintSlice((EventNumber_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->PrintRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->WriteRun();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->UpdateCutList((const Cut_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (EventNumber_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->Finish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaCutList& obj = ((const TaRun*) G__getstructoffset())->GetCutList();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaRun*) G__getstructoffset())->GetOversample());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaRun*) G__getstructoffset())->GetRate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaRun*) G__getstructoffset())->GetDBValue(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((const TaRun*) G__getstructoffset())->GetEvent();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaRun*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaDataBase& obj = ((const TaRun*) G__getstructoffset())->GetDataBase();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaRun*) G__getstructoffset())->GetKey(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaRun*) G__getstructoffset())->GetKey((Int_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaDevice& obj = ((const TaRun*) G__getstructoffset())->GetDevices();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->InitRoot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaRun*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_178_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaRun G__TTaRun;
static int G__TaDict_178_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaRun*) (soff+(sizeof(TaRun)*i)))->~G__TTaRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaRun*) (soff))->~G__TTaRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VaAnalysis */
static int G__TaDict_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->Init(*(Bool_t*) G__Boolref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaAnalysis*) G__getstructoffset())->InitLastPass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaAnalysis*) G__getstructoffset())->RunIni(*(TaRun*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaAnalysis*) G__getstructoffset())->RunReIni(*(TaRun*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaAnalysis*) G__getstructoffset())->ProcessRun());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->RunFini();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->Finish();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaAnalysis*) G__getstructoffset())->PairsLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VaAnalysis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaAnalysis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VaAnalysis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VaAnalysis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VaAnalysis*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaAnalysis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaAnalysis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaAnalysis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaAnalysis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_179_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaAnalysis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VaAnalysis G__TVaAnalysis;
static int G__TaDict_179_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VaAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VaAnalysis*) (soff+(sizeof(VaAnalysis)*i)))->~G__TVaAnalysis();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VaAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VaAnalysis*) (soff))->~G__TVaAnalysis();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaAnalysisManager */
static int G__TaDict_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaAnalysisManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaAnalysisManager[n];
     } else {
       p = new((void*) gvp) TaAnalysisManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaAnalysisManager;
     } else {
       p = new((void*) gvp) TaAnalysisManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->Init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->Init((RunNumber_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->Init(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaAnalysisManager*) G__getstructoffset())->SetDbCommand(*((vector<string>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->InitPass2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->InitLastPass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->Process());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->EndPass1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaAnalysisManager*) G__getstructoffset())->End());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaAnalysisManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaAnalysisManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaAnalysisManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaAnalysisManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaAnalysisManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaAnalysisManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaAnalysisManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaAnalysisManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaAnalysisManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaAnalysisManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaAnalysisManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_181_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaAnalysisManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaAnalysisManager G__TTaAnalysisManager;
static int G__TaDict_181_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaAnalysisManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaAnalysisManager*) (soff+(sizeof(TaAnalysisManager)*i)))->~G__TTaAnalysisManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaAnalysisManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaAnalysisManager*) (soff))->~G__TTaAnalysisManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaCutList */
static int G__TaDict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaCutList((RunNumber_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) TaCutList((RunNumber_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaCutList[n];
     } else {
       p = new((void*) gvp) TaCutList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaCutList;
     } else {
       p = new((void*) gvp) TaCutList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaCutList(*(TaCutList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaCutList(*(TaCutList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaCutList& obj = ((TaCutList*) G__getstructoffset())->operator=(*(TaCutList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->Init(*(TaDataBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaCutList*) G__getstructoffset())->OK(*(VaEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaCutList*) G__getstructoffset())->OKC(*(VaEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pair<Cut_t,Int_t> >* pobj;
         const vector<pair<Cut_t,Int_t> > xobj = ((const TaCutList*) G__getstructoffset())->CutsFailed(*(VaEvent*) libp->para[0].ref);
         pobj = new vector<pair<Cut_t,Int_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->UpdateCutInterval((const Cut_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const EventNumber_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->AddExtension((const Cut_t) G__int(libp->para[0]), (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->AddName((const Cut_t) G__int(libp->para[0]), *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string& obj = ((const TaCutList*) G__getstructoffset())->GetName((const Cut_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaCutList*) G__getstructoffset())->PrintInt(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaCutList*) G__getstructoffset())->PrintExt(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaCutList*) G__getstructoffset())->PrintTally(*(ostream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaCutList*) G__getstructoffset())->WriteTally(*(TaOResultsFile*) libp->para[0].ref, (const EventNumber_t) G__int(libp->para[1])
, (const EventNumber_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaCutList*) G__getstructoffset())->GetNumCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaCutList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaCutList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaCutList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaCutList*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaCutList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_502_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaCutList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaCutList G__TTaCutList;
static int G__TaDict_502_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaCutList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaCutList*) (soff+(sizeof(TaCutList)*i)))->~G__TTaCutList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaCutList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaCutList*) (soff))->~G__TTaCutList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaMultiplet */
static int G__TaDict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaMultiplet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaMultiplet((const UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TaMultiplet((const UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TaMultiplet[n];
       } else {
         p = new((void*) gvp) TaMultiplet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TaMultiplet;
       } else {
         p = new((void*) gvp) TaMultiplet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaMultiplet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaMultiplet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaMultiplet(*(TaMultiplet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaMultiplet(*(TaMultiplet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaMultiplet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaMultiplet& obj = ((TaMultiplet*) G__getstructoffset())->operator=(*(TaMultiplet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaMultiplet*) G__getstructoffset())->RunInit(*(TaRun*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaMultiplet*) G__getstructoffset())->Fill(*(VaPair*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaPair& obj = ((const TaMultiplet*) G__getstructoffset())->GetPair((const UInt_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaMultiplet*) G__getstructoffset())->AddResult(*(TaLabelledQuantity*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->Full());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaMultiplet*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetRightSum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetLeftSum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetRightSumSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetLeftSumSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetDiff((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetDiffSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetDiffSum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvgSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvgSum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvgN((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvgNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAvgNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyN((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsySum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsySum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyAve(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyAve(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyNAve(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const TaMultiplet*) G__getstructoffset())->GetAsyNAve(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->PassedCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->PassedCutsInt(*(TaCutList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->PassedCCutsInt(*(TaCutList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->BeamCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaMultiplet*) G__getstructoffset())->BeamCCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TaLabelledQuantity>& obj = ((const TaMultiplet*) G__getstructoffset())->GetResults();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaMultiplet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaMultiplet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaMultiplet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaMultiplet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaMultiplet*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaMultiplet*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaMultiplet*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaMultiplet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaMultiplet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaMultiplet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaMultiplet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_503_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaMultiplet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaMultiplet G__TTaMultiplet;
static int G__TaDict_503_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaMultiplet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaMultiplet*) (soff+(sizeof(TaMultiplet)*i)))->~G__TTaMultiplet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaMultiplet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaMultiplet*) (soff))->~G__TTaMultiplet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VaEvent */
static int G__TaDict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VaEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VaEvent[n];
     } else {
       p = new((void*) gvp) VaEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VaEvent;
     } else {
       p = new((void*) gvp) VaEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_VaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VaEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VaEvent(*(VaEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VaEvent(*(VaEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_VaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((VaEvent*) G__getstructoffset())->operator=(*(VaEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((VaEvent*) G__getstructoffset())->CopyInPlace(*(VaEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaEvent*) G__getstructoffset())->RunInit(*(TaRun*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->Load((const Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->Decode(*(TaDevice*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->CheckEvent(*(TaRun*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->AddCut((const Cut_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->AddResult(*(TaLabelledQuantity*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaEvent::BuffSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaEvent::GetMaxEvNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetRawData((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetRawData((Int_t) G__int(libp->para[0]), *(TaDevice*) libp->para[1].ref
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetData((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetDataSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetDataSum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetRawADCData((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetCalADCData((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaEvent*) G__getstructoffset())->GetScalerData((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->CutStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->BeamCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->BeamCCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaEvent*) G__getstructoffset())->GetNCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->CutCond((const Cut_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->IsPrestartEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->IsPhysicsEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaEvent*) G__getstructoffset())->IsEpicsEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaEvent*) G__getstructoffset())->GetEvNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetLastPhyEv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaEvent*) G__getstructoffset())->GetEvLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaEvent*) G__getstructoffset())->GetEvType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const VaEvent*) G__getstructoffset())->GetTimeSlot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->SetHelicity((EHelicity) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetROHelicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetHelicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->SetPrevROHelicity((EHelicity) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->SetPrevHelicity((EHelicity) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetPrevROHelicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetPrevHelicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetPairSynch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const VaEvent*) G__getstructoffset())->GetMultipletSynch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TaLabelledQuantity>& obj = ((const VaEvent*) G__getstructoffset())->GetResults();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VaEvent*) G__getstructoffset())->RawDump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VaEvent*) G__getstructoffset())->RawPrevDump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VaEvent*) G__getstructoffset())->DeviceDump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VaEvent*) G__getstructoffset())->MiniDump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->AddToTree(*(TaDevice*) libp->para[0].ref, *(TaCutList*) libp->para[1].ref
, *(TTree*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->SetCalib((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VaEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VaEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VaEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VaEvent*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_504_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VaEvent G__TVaEvent;
static int G__TaDict_504_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VaEvent*) (soff+(sizeof(VaEvent)*i)))->~G__TVaEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VaEvent*) (soff))->~G__TVaEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* VaPair */
static int G__TaDict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VaPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VaPair[n];
     } else {
       p = new((void*) gvp) VaPair[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new VaPair;
     } else {
       p = new((void*) gvp) VaPair;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_VaPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   VaPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new VaPair(*(VaPair*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) VaPair(*(VaPair*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_VaPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaPair& obj = ((VaPair*) G__getstructoffset())->operator=(*(VaPair*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((VaPair*) G__getstructoffset())->RunInit(*(TaRun*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((VaPair*) G__getstructoffset())->Fill(*(VaEvent*) libp->para[0].ref, *(TaRun*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((const VaPair*) G__getstructoffset())->GetRight();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((const VaPair*) G__getstructoffset())->GetLeft();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((const VaPair*) G__getstructoffset())->GetFirst();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const VaEvent& obj = ((const VaPair*) G__getstructoffset())->GetSecond();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const VaPair*) G__getstructoffset())->QueuePrint();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaPair*) G__getstructoffset())->AddResult(*(TaLabelledQuantity*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetDiff((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetDiffSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetDiffSum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvg((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvgSum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvgSum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvgN((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvgNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAvgNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsy((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyN((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsySum(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsySum(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyNSum(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyAve(*((vector<Int_t>*) G__int(libp->para[0])), *((vector<Double_t>*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyAve(*((vector<Int_t>*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyNAve(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((vector<Double_t>*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((const VaPair*) G__getstructoffset())->GetAsyNAve(*((vector<Int_t>*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaPair*) G__getstructoffset())->PassedCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaPair*) G__getstructoffset())->PassedCutsInt(*(TaCutList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaPair*) G__getstructoffset())->PassedCCutsInt(*(TaCutList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaPair*) G__getstructoffset())->BeamCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const VaPair*) G__getstructoffset())->BeamCCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TaLabelledQuantity>& obj = ((const VaPair*) G__getstructoffset())->GetResults();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) VaPair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaPair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) VaPair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      VaPair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const VaPair*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaPair*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaPair*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((VaPair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaPair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaPair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) VaPair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_505_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) VaPair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef VaPair G__TVaPair;
static int G__TaDict_505_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (VaPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((VaPair*) (soff+(sizeof(VaPair)*i)))->~G__TVaPair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (VaPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((VaPair*) (soff))->~G__TVaPair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__TaDict_507_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >;
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator=(*(vector<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->reserve((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->swap(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1]))
, *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), (vector<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_507_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__TaDict_507_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<int,allocator<int> >*) (soff+(sizeof(vector<int,allocator<int> >)*i)))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<int,allocator<int> >*) (soff))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaStandardAna */
static int G__TaDict_522_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaStandardAna* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaStandardAna[n];
     } else {
       p = new((void*) gvp) TaStandardAna[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaStandardAna;
     } else {
       p = new((void*) gvp) TaStandardAna;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaStandardAna));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaStandardAna::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStandardAna::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaStandardAna::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaStandardAna::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaStandardAna*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStandardAna::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaStandardAna::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaStandardAna::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_522_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaStandardAna::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaStandardAna G__TTaStandardAna;
static int G__TaDict_522_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaStandardAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaStandardAna*) (soff+(sizeof(TaStandardAna)*i)))->~G__TTaStandardAna();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaStandardAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaStandardAna*) (soff))->~G__TTaStandardAna();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaDebugAna */
static int G__TaDict_523_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaDebugAna* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDebugAna[n];
     } else {
       p = new((void*) gvp) TaDebugAna[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDebugAna;
     } else {
       p = new((void*) gvp) TaDebugAna;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaDebugAna));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaDebugAna::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDebugAna::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaDebugAna::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaDebugAna::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDebugAna*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDebugAna::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDebugAna::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDebugAna::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_523_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDebugAna::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaDebugAna G__TTaDebugAna;
static int G__TaDict_523_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaDebugAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaDebugAna*) (soff+(sizeof(TaDebugAna)*i)))->~G__TTaDebugAna();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaDebugAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaDebugAna*) (soff))->~G__TTaDebugAna();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaRootRep */
static int G__TaDict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaRootRep* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaRootRep[n];
     } else {
       p = new((void*) gvp) TaRootRep[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaRootRep;
     } else {
       p = new((void*) gvp) TaRootRep;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaRootRep));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->SetRunNum((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaRootRep*) G__getstructoffset())->GetRunNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->SetAnaTDatime((TDatime*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((TaRootRep*) G__getstructoffset())->GetAnaTDatime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->Put((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaRootRep*) G__getstructoffset())->NextLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((TaRootRep*) G__getstructoffset())->GetLine();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaRootRep::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRootRep::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaRootRep::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaRootRep::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaRootRep*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRootRep::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaRootRep::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaRootRep::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_557_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaRootRep::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TaDict_557_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TaRootRep* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TaRootRep(*(TaRootRep*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaRootRep));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaRootRep G__TTaRootRep;
static int G__TaDict_557_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaRootRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaRootRep*) (soff+(sizeof(TaRootRep)*i)))->~G__TTaRootRep();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaRootRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaRootRep*) (soff))->~G__TTaRootRep();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TaDict_557_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaRootRep* dest = (TaRootRep*) G__getstructoffset();
   *dest = *(TaRootRep*) libp->para[0].ref;
   const TaRootRep& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaDataBase */
static int G__TaDict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaDataBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDataBase[n];
     } else {
       p = new((void*) gvp) TaDataBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDataBase;
     } else {
       p = new((void*) gvp) TaDataBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaDataBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->Read((int) G__int(libp->para[0]), *(vector<string>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->Write();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->ReadRoot(*((TaString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->WriteRoot();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaDataBase*) G__getstructoffset())->SelfCheck());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->Checkout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PrintDataBase();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PrintDataMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetRunNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetAnaType();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaDataBase*) G__getstructoffset())->GetAnaTDatime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetSimulationType();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetTimestamp();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const TaDataBase*) G__getstructoffset())->GetTimeTString();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TDatime* pobj;
         const TDatime xobj = ((const TaDataBase*) G__getstructoffset())->GetTimeTDatime();
         pobj = new TDatime(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetRandomHeli();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetBlindingString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetBlindingParams();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetFdbkSwitch(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetFdbkTimeScale(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetFdbkMonitor(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetDacNoise(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetAdcPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetDacxNoise(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(string*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetAdcxPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetVqwkPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetScalPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaDataBase*) G__getstructoffset())->GetHeader(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaDataBase*) G__getstructoffset())->GetMask(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetData((dtype*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetData(*((string*) G__int(libp->para[0])), *((string*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->DataMapReStart();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaDataBase*) G__getstructoffset())->NextDataMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetDataMapName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetDataMapType();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaKeyMap* pobj;
         const TaKeyMap xobj = ((const TaDataBase*) G__getstructoffset())->GetKeyMap(*((string*) G__int(libp->para[0])));
         pobj = new TaKeyMap(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetCompress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetMaxEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetDelay());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetOverSamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetPairType();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetCurMon();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetCurMonC();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDataBase*) G__getstructoffset())->GetCalVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetCutValue(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetCutValueDVector(*(string*) libp->para[0].ref);
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetNumCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string>* pobj;
         const vector<string> xobj = ((const TaDataBase*) G__getstructoffset())->GetCutNames();
         pobj = new vector<string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<string>* pobj;
         const vector<string> xobj = ((const TaDataBase*) G__getstructoffset())->GetTrees();
         pobj = new vector<string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDataBase*) G__getstructoffset())->GetFillDitherOnly());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetExtLo();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetExtHi();
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetDetWts();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetBlumiWts();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetFlumiWts();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDataBase*) G__getstructoffset())->GetNumBadEv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,vector<Int_t> >* pobj;
         const map<Int_t,vector<Int_t> > xobj = ((const TaDataBase*) G__getstructoffset())->GetCutInt();
         pobj = new map<Int_t,vector<Int_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetData(*((string*) G__int(libp->para[0])), *((vector<string>*) G__int(libp->para[1])));
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetData(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDataBase*) G__getstructoffset())->GetValue(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>* pobj;
         const vector<Int_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetValueVector(*(string*) libp->para[0].ref);
         pobj = new vector<Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetValueDVector(*(string*) libp->para[0].ref);
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDataBase*) G__getstructoffset())->GetString(*(string*) libp->para[0].ref);
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaDataBase*) G__getstructoffset())->GetCutNumber(*((TaString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDataBase*) G__getstructoffset())->GetTreeUsed(*((TaString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaDataBase*) G__getstructoffset())->GetCksum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetQpd1Const();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetLina1Const();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TaString>* pobj;
         const vector<TaString> xobj = ((const TaDataBase*) G__getstructoffset())->GetStringVect(*(string*) libp->para[0].ref);
         pobj = new vector<TaString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TaString>* pobj;
         const vector<TaString> xobj = ((const TaDataBase*) G__getstructoffset())->GetEpicsKeys();
         pobj = new vector<TaString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetCavConst1();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetCavConst2();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Double_t>* pobj;
         const vector<Double_t> xobj = ((const TaDataBase*) G__getstructoffset())->GetCavConst3();
         pobj = new vector<Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutDacNoise(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutAdcPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutDacxNoise(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutAdcxPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutVqwkPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutScalPed(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->PutCutInt(*((const vector<Int_t>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaDataBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDataBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaDataBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaDataBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaDataBase*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDataBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDataBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDataBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDataBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_566_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDataBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaDataBase G__TTaDataBase;
static int G__TaDict_566_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaDataBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaDataBase*) (soff+(sizeof(TaDataBase)*i)))->~G__TTaDataBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaDataBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaDataBase*) (soff))->~G__TTaDataBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaDevice */
static int G__TaDict_623_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaDevice* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDevice[n];
     } else {
       p = new((void*) gvp) TaDevice[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaDevice;
     } else {
       p = new((void*) gvp) TaDevice;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaDevice));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaDevice* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaDevice(*(TaDevice*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaDevice(*(TaDevice*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaDevice));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaDevice& obj = ((TaDevice*) G__getstructoffset())->operator=(*(TaDevice*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetKey(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const TaDevice*) G__getstructoffset())->GetKey((Int_t) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->Init(*(TaDataBase*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetNumRaw());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetRawKey(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetEvPointer(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetCrate(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetOffset(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->FindHeaders(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->PrintHeaders();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDevice*) G__getstructoffset())->GetPedestal(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDevice*) G__getstructoffset())->GetDacSlope(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TaDevice*) G__getstructoffset())->GetDacSlopeA(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetDevNum(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetChanNum(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetRawIndex(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetCalIndex(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaDevice*) G__getstructoffset())->GetCorrIndex(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetNumPvdisDev());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetPvdisDev((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetMinPvdisDKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetMaxPvdisDKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetMinPvdisPKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaDevice*) G__getstructoffset())->GetMaxPvdisPKey());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TaDevice*) G__getstructoffset())->GetVqwkHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((TaDevice*) G__getstructoffset())->GetTirHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsUsed(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsRotated(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsAdc(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsAdcx(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsVqwk(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsScaler(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsTimeboard(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsTir(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaDevice*) G__getstructoffset())->IsDaqFlag(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TaDevice*) G__getstructoffset())->SetUsed(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,Int_t>* pobj;
         const map<string,Int_t> xobj = ((const TaDevice*) G__getstructoffset())->GetKeyList();
         pobj = new map<string,Int_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaDevice::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDevice::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaDevice::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaDevice::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaDevice*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaDevice*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDevice::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDevice::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaDevice::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_623_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaDevice::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaDevice G__TTaDevice;
static int G__TaDict_623_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaDevice*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaDevice*) (soff+(sizeof(TaDevice)*i)))->~G__TTaDevice();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaDevice*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaDevice*) (soff))->~G__TTaDevice();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaCutInterval */
static int G__TaDict_632_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutInterval* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaCutInterval(
(const Cut_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const EventNumber_t) G__int(libp->para[2]), (const EventNumber_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) TaCutInterval(
(const Cut_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const EventNumber_t) G__int(libp->para[2]), (const EventNumber_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutInterval* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaCutInterval[n];
     } else {
       p = new((void*) gvp) TaCutInterval[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaCutInterval;
     } else {
       p = new((void*) gvp) TaCutInterval;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaCutInterval* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaCutInterval(*(TaCutInterval*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaCutInterval(*(TaCutInterval*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaCutInterval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaCutInterval& obj = ((TaCutInterval*) G__getstructoffset())->operator=(*(TaCutInterval*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaCutInterval*) G__getstructoffset())->Inside(*(VaEvent*) libp->para[0].ref, (const UInt_t) G__int(libp->para[1])
, (const UInt_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutInterval*) G__getstructoffset())->SetEnd((const EventNumber_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const TaCutInterval*) G__getstructoffset())->GetCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TaCutInterval*) G__getstructoffset())->GetVal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaCutInterval::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutInterval::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaCutInterval::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaCutInterval::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaCutInterval*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutInterval*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutInterval*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaCutInterval*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutInterval::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaCutInterval::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaCutInterval::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_632_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaCutInterval::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaCutInterval G__TTaCutInterval;
static int G__TaDict_632_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaCutInterval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaCutInterval*) (soff+(sizeof(TaCutInterval)*i)))->~G__TTaCutInterval();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaCutInterval*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaCutInterval*) (soff))->~G__TTaCutInterval();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaEvent */
static int G__TaDict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaEvent[n];
     } else {
       p = new((void*) gvp) TaEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaEvent;
     } else {
       p = new((void*) gvp) TaEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaEvent(*(TaEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaEvent(*(TaEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaEvent& obj = ((TaEvent*) G__getstructoffset())->operator=(*(TaEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaEvent& obj = ((TaEvent*) G__getstructoffset())->CopyInPlace(*(TaEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_666_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaEvent G__TTaEvent;
static int G__TaDict_666_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaEvent*) (soff+(sizeof(TaEvent)*i)))->~G__TTaEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaEvent*) (soff))->~G__TTaEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaSimEvent */
static int G__TaDict_668_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaSimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaSimEvent[n];
     } else {
       p = new((void*) gvp) TaSimEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaSimEvent;
     } else {
       p = new((void*) gvp) TaSimEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaSimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaSimEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaSimEvent(*(TaSimEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaSimEvent(*(TaSimEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaSimEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaSimEvent& obj = ((TaSimEvent*) G__getstructoffset())->operator=(*(TaSimEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaSimEvent& obj = ((TaSimEvent*) G__getstructoffset())->CopyInPlace(*(TaSimEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaSimEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaSimEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaSimEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaSimEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaSimEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaSimEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaSimEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaSimEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_668_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaSimEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaSimEvent G__TTaSimEvent;
static int G__TaDict_668_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaSimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaSimEvent*) (soff+(sizeof(TaSimEvent)*i)))->~G__TTaSimEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaSimEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaSimEvent*) (soff))->~G__TTaSimEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaEpics */
static int G__TaDict_681_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaEpics* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaEpics[n];
     } else {
       p = new((void*) gvp) TaEpics[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaEpics;
     } else {
       p = new((void*) gvp) TaEpics;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaEpics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TaEpics*) G__getstructoffset())->Init(*(TaDataBase*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaEpics*) G__getstructoffset())->GetData((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaEpics*) G__getstructoffset())->GetData((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         const string* pobj;
         const string xobj = ((const TaEpics*) G__getstructoffset())->GetString((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         const string* pobj;
         const string xobj = ((const TaEpics*) G__getstructoffset())->GetString((const char*) G__int(libp->para[0]));
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) ((const TaEpics*) G__getstructoffset())->GetTimeStamp((const char*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((const TaEpics*) G__getstructoffset())->GetTimeStamp((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((TaEpics*) G__getstructoffset())->Process(*(VaEvent*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((TaEpics*) G__getstructoffset())->LoadData((const int*) G__int(libp->para[0]), (int) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((TaEpics*) G__getstructoffset())->LoadData((const int*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEpics*) G__getstructoffset())->AddToTree(*(TTree*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TaEpics*) G__getstructoffset())->IsLoaded((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEpics*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaEpics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEpics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaEpics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaEpics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TaEpics*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEpics*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref, (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEpics*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaEpics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEpics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaEpics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaEpics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_681_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaEpics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaEpics G__TTaEpics;
static int G__TaDict_681_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaEpics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaEpics*) (soff+(sizeof(TaEpics)*i)))->~G__TTaEpics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaEpics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaEpics*) (soff))->~G__TTaEpics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaPairFromOctet */
static int G__TaDict_693_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromOctet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromOctet[n];
     } else {
       p = new((void*) gvp) TaPairFromOctet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromOctet;
     } else {
       p = new((void*) gvp) TaPairFromOctet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromOctet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaPairFromOctet(*(TaPairFromOctet*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaPairFromOctet(*(TaPairFromOctet*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaPairFromOctet& obj = ((TaPairFromOctet*) G__getstructoffset())->operator=(*(TaPairFromOctet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaPairFromOctet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromOctet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaPairFromOctet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaPairFromOctet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaPairFromOctet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromOctet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromOctet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromOctet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_693_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromOctet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaPairFromOctet G__TTaPairFromOctet;
static int G__TaDict_693_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaPairFromOctet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaPairFromOctet*) (soff+(sizeof(TaPairFromOctet)*i)))->~G__TTaPairFromOctet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaPairFromOctet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaPairFromOctet*) (soff))->~G__TTaPairFromOctet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaPairFromPair */
static int G__TaDict_694_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromPair[n];
     } else {
       p = new((void*) gvp) TaPairFromPair[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromPair;
     } else {
       p = new((void*) gvp) TaPairFromPair;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromPair* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaPairFromPair(*(TaPairFromPair*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaPairFromPair(*(TaPairFromPair*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaPairFromPair& obj = ((TaPairFromPair*) G__getstructoffset())->operator=(*(TaPairFromPair*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaPairFromPair::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromPair::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaPairFromPair::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaPairFromPair::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaPairFromPair*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromPair::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromPair::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromPair::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_694_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromPair::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaPairFromPair G__TTaPairFromPair;
static int G__TaDict_694_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaPairFromPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaPairFromPair*) (soff+(sizeof(TaPairFromPair)*i)))->~G__TTaPairFromPair();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaPairFromPair*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaPairFromPair*) (soff))->~G__TTaPairFromPair();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaPairFromQuad */
static int G__TaDict_695_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromQuad* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromQuad[n];
     } else {
       p = new((void*) gvp) TaPairFromQuad[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaPairFromQuad;
     } else {
       p = new((void*) gvp) TaPairFromQuad;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaPairFromQuad* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaPairFromQuad(*(TaPairFromQuad*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaPairFromQuad(*(TaPairFromQuad*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TaPairFromQuad& obj = ((TaPairFromQuad*) G__getstructoffset())->operator=(*(TaPairFromQuad*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaPairFromQuad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromQuad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaPairFromQuad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaPairFromQuad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaPairFromQuad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromQuad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromQuad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaPairFromQuad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_695_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaPairFromQuad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaPairFromQuad G__TTaPairFromQuad;
static int G__TaDict_695_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaPairFromQuad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaPairFromQuad*) (soff+(sizeof(TaPairFromQuad)*i)))->~G__TTaPairFromQuad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaPairFromQuad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaPairFromQuad*) (soff))->~G__TTaPairFromQuad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaFeedbackAna */
static int G__TaDict_697_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaFeedbackAna* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFeedbackAna[n];
     } else {
       p = new((void*) gvp) TaFeedbackAna[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaFeedbackAna;
     } else {
       p = new((void*) gvp) TaFeedbackAna;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaFeedbackAna::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFeedbackAna::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaFeedbackAna::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaFeedbackAna::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaFeedbackAna*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFeedbackAna::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaFeedbackAna::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaFeedbackAna::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_697_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaFeedbackAna::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaFeedbackAna G__TTaFeedbackAna;
static int G__TaDict_697_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaFeedbackAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaFeedbackAna*) (soff+(sizeof(TaFeedbackAna)*i)))->~G__TTaFeedbackAna();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaFeedbackAna*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaFeedbackAna*) (soff))->~G__TTaFeedbackAna();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TaADCCalib */
static int G__TaDict_723_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaADCCalib* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaADCCalib[n];
     } else {
       p = new((void*) gvp) TaADCCalib[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TaADCCalib;
     } else {
       p = new((void*) gvp) TaADCCalib;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaADCCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TaADCCalib* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new TaADCCalib(*(string*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) TaADCCalib(*(string*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_TaADCCalib));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TaADCCalib::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaADCCalib::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TaADCCalib::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TaADCCalib::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TaADCCalib*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaADCCalib::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaADCCalib::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TaADCCalib::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_723_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TaADCCalib::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TaADCCalib G__TTaADCCalib;
static int G__TaDict_723_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TaADCCalib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TaADCCalib*) (soff+(sizeof(TaADCCalib)*i)))->~G__TTaADCCalib();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TaADCCalib*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TaADCCalib*) (soff))->~G__TTaADCCalib();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static int G__TaDict_725_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->at((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->resize((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *((vector<int,allocator<int> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator[]((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]), *(vector<int,allocator<int> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->operator=(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->reserve((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->push_back(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->swap(*(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator* pobj;
         vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator xobj = ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *(vector<int,allocator<int> >*) libp->para[1].ref);
         pobj = new vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->insert(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type) G__int(libp->para[1])
, *(vector<int,allocator<int> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->erase(*((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_725_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR;
static int G__TaDict_725_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff+(sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >)*i)))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*) (soff))->~G__TvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static int G__TaDict_729_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->at((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->begin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->end();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rbegin();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->rend();
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->resize((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *((vector<double,allocator<double> >*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator[]((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]), *(vector<double,allocator<double> >*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->operator=(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->reserve((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->push_back(*(vector<double,allocator<double> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->swap(*(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator* pobj;
         vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator xobj = ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *(vector<double,allocator<double> >*) libp->para[1].ref);
         pobj = new vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[1]))
, *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->insert(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type) G__int(libp->para[1])
, *(vector<double,allocator<double> >*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->erase(*((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[0])), *((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_729_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR;
static int G__TaDict_729_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff+(sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >)*i)))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*) (soff))->~G__TvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<TString,allocator<TString> > */
static int G__TaDict_733_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->at((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString,allocator<TString> >::iterator* pobj;
         vector<TString,allocator<TString> >::iterator xobj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->begin();
         pobj = new vector<TString,allocator<TString> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString,allocator<TString> >::iterator* pobj;
         vector<TString,allocator<TString> >::iterator xobj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->end();
         pobj = new vector<TString,allocator<TString> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString,allocator<TString> >::reverse_iterator* pobj;
         vector<TString,allocator<TString> >::reverse_iterator xobj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->rbegin();
         pobj = new vector<TString,allocator<TString> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString,allocator<TString> >::reverse_iterator* pobj;
         vector<TString,allocator<TString> >::reverse_iterator xobj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->rend();
         pobj = new vector<TString,allocator<TString> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<TString,allocator<TString> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<TString,allocator<TString> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->resize((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->resize((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const vector<TString,allocator<TString> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<TString,allocator<TString> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->operator[]((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TString,allocator<TString> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TString,allocator<TString> >[n];
     } else {
       p = new((void*) gvp) vector<TString,allocator<TString> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TString,allocator<TString> >;
     } else {
       p = new((void*) gvp) vector<TString,allocator<TString> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TString,allocator<TString> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TString,allocator<TString> >((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<TString,allocator<TString> >((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<TString,allocator<TString> >((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<TString,allocator<TString> >((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TString,allocator<TString> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TString,allocator<TString> >(*(vector<TString,allocator<TString> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<TString,allocator<TString> >(*(vector<TString,allocator<TString> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<TString,allocator<TString> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<TString,allocator<TString> >(*((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[0])), *((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<TString,allocator<TString> >(*((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[0])), *((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TString,allocator<TString> >& obj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->operator=(*(vector<TString,allocator<TString> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->reserve((vector<TString,allocator<TString> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->push_back(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->swap(*(vector<TString,allocator<TString> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString,allocator<TString> >::iterator* pobj;
         vector<TString,allocator<TString> >::iterator xobj = ((vector<TString,allocator<TString> >*) G__getstructoffset())->insert(*((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[0])), *(TString*) libp->para[1].ref);
         pobj = new vector<TString,allocator<TString> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->insert(*((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[0])), *((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[1]))
, *((vector<TString,allocator<TString> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->insert(*((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[0])), (vector<TString,allocator<TString> >::size_type) G__int(libp->para[1])
, *(TString*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->erase(*((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->erase(*((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[0])), *((vector<TString,allocator<TString> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TaDict_733_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<TString,allocator<TString> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<TString,allocator<TString> > G__TvectorlETStringcOallocatorlETStringgRsPgR;
static int G__TaDict_733_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<TString,allocator<TString> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<TString,allocator<TString> >*) (soff+(sizeof(vector<TString,allocator<TString> >)*i)))->~G__TvectorlETStringcOallocatorlETStringgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<TString,allocator<TString> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<TString,allocator<TString> >*) (soff))->~G__TvectorlETStringcOallocatorlETStringgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* string */

/* TaBlind */

/* TaFileName */

/* TaIResultsFile */

/* TaLabelledQuantity */

/* TaOResultsFile */

/* TaStatistics */

/* TaString */

/* vector<string,allocator<string> > */

/* TaRun */

/* VaAnalysis */

/* TaAnalysisManager */

/* TaCutList */

/* TaMultiplet */

/* VaEvent */

/* VaPair */

/* vector<int,allocator<int> > */

/* TaStandardAna */

/* TaDebugAna */

/* TaRootRep */

/* TaDataBase */

/* TaDevice */

/* TaCutInterval */

/* TaEvent */

/* TaSimEvent */

/* TaEpics */

/* TaPairFromOctet */

/* TaPairFromPair */

/* TaPairFromQuad */

/* TaFeedbackAna */

/* TaADCCalib */

/* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */

/* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */

/* vector<TString,allocator<TString> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTaDict {
 public:
  G__Sizep2memfuncTaDict(): p(&G__Sizep2memfuncTaDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTaDict::*p)();
};

size_t G__get_sizep2memfuncTaDict()
{
  G__Sizep2memfuncTaDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */
static long G__2vbo_TaIResultsFile_basic_ioslEcharcOchar_traitslEchargRsPgR_2(long pobject) {
  TaIResultsFile *G__Lderived=(TaIResultsFile*)pobject;
  basic_ios<char,char_traits<char> > *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_TaIResultsFile_ios_base_3(long pobject) {
  TaIResultsFile *G__Lderived=(TaIResultsFile*)pobject;
  ios_base *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_TaOResultsFile_basic_ioslEcharcOchar_traitslEchargRsPgR_2(long pobject) {
  TaOResultsFile *G__Lderived=(TaOResultsFile*)pobject;
  basic_ios<char,char_traits<char> > *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_TaOResultsFile_ios_base_3(long pobject) {
  TaOResultsFile *G__Lderived=(TaOResultsFile*)pobject;
  ios_base *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}


/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTaDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaBlind))) {
     TaBlind *G__Lderived;
     G__Lderived=(TaBlind*)0x1000;
     {
       string *G__Lpbase=(string*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaBlind),G__get_linked_tagnum(&G__TaDictLN_string),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile))) {
     TaIResultsFile *G__Lderived;
     G__Lderived=(TaIResultsFile*)0x1000;
     {
       basic_ifstream<char,char_traits<char> > *G__Lpbase=(basic_ifstream<char,char_traits<char> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       basic_istream<char,char_traits<char> > *G__Lpbase=(basic_istream<char,char_traits<char> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR),(long)G__2vbo_TaIResultsFile_basic_ioslEcharcOchar_traitslEchargRsPgR_2,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile),G__get_linked_tagnum(&G__TaDictLN_ios_base),(long)G__2vbo_TaIResultsFile_ios_base_3,1,6);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile))) {
     TaOResultsFile *G__Lderived;
     G__Lderived=(TaOResultsFile*)0x1000;
     {
       basic_ofstream<char,char_traits<char> > *G__Lpbase=(basic_ofstream<char,char_traits<char> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       basic_ostream<char,char_traits<char> > *G__Lpbase=(basic_ostream<char,char_traits<char> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),G__get_linked_tagnum(&G__TaDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR),(long)G__2vbo_TaOResultsFile_basic_ioslEcharcOchar_traitslEchargRsPgR_2,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),G__get_linked_tagnum(&G__TaDictLN_ios_base),(long)G__2vbo_TaOResultsFile_ios_base_3,1,6);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaString))) {
     TaString *G__Lderived;
     G__Lderived=(TaString*)0x1000;
     {
       string *G__Lpbase=(string*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaString),G__get_linked_tagnum(&G__TaDictLN_string),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaStandardAna))) {
     TaStandardAna *G__Lderived;
     G__Lderived=(TaStandardAna*)0x1000;
     {
       VaAnalysis *G__Lpbase=(VaAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaStandardAna),G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna))) {
     TaDebugAna *G__Lderived;
     G__Lderived=(TaDebugAna*)0x1000;
     {
       TaStandardAna *G__Lpbase=(TaStandardAna*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna),G__get_linked_tagnum(&G__TaDictLN_TaStandardAna),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       VaAnalysis *G__Lpbase=(VaAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna),G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaRootRep))) {
     TaRootRep *G__Lderived;
     G__Lderived=(TaRootRep*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaRootRep),G__get_linked_tagnum(&G__TaDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaEvent))) {
     TaEvent *G__Lderived;
     G__Lderived=(TaEvent*)0x1000;
     {
       VaEvent *G__Lpbase=(VaEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaEvent),G__get_linked_tagnum(&G__TaDictLN_VaEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaSimEvent))) {
     TaSimEvent *G__Lderived;
     G__Lderived=(TaSimEvent*)0x1000;
     {
       VaEvent *G__Lpbase=(VaEvent*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaSimEvent),G__get_linked_tagnum(&G__TaDictLN_VaEvent),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet))) {
     TaPairFromOctet *G__Lderived;
     G__Lderived=(TaPairFromOctet*)0x1000;
     {
       VaPair *G__Lpbase=(VaPair*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet),G__get_linked_tagnum(&G__TaDictLN_VaPair),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair))) {
     TaPairFromPair *G__Lderived;
     G__Lderived=(TaPairFromPair*)0x1000;
     {
       VaPair *G__Lpbase=(VaPair*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair),G__get_linked_tagnum(&G__TaDictLN_VaPair),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad))) {
     TaPairFromQuad *G__Lderived;
     G__Lderived=(TaPairFromQuad*)0x1000;
     {
       VaPair *G__Lpbase=(VaPair*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad),G__get_linked_tagnum(&G__TaDictLN_VaPair),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna))) {
     TaFeedbackAna *G__Lderived;
     G__Lderived=(TaFeedbackAna*)0x1000;
     {
       VaAnalysis *G__Lpbase=(VaAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna),G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TaDictLN_TaADCCalib))) {
     TaADCCalib *G__Lderived;
     G__Lderived=(TaADCCalib*)0x1000;
     {
       VaAnalysis *G__Lpbase=(VaAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TaDictLN_TaADCCalib),G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTaDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("value_type",115,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",83,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",83,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",115,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",115,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",114,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",82,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",82,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",114,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",114,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",72,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",72,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",104,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",104,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",102,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",70,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",70,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",102,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",102,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",100,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",68,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",68,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",100,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",100,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",99,-1,0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",67,-1,0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",67,-1,256,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",99,-1,1,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",99,-1,257,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("traits_type",105,-1,0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_stringcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_string));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("RunNumber_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("EventNumber_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SlotNumber_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ErrCode_t",105,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cut_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G__TaDictLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<Double_t,Double_t> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TaDictLN_string),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TaDictLN_string),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TaDictLN_string),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TaDictLN_string),1,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TaDictLN_string),257,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AnaList>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEAnaListcOallocatorlEAnaListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEAnaListcOallocatorlEAnaListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<VaEvent>",117,G__get_linked_tagnum(&G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<VaPair*>",117,G__get_linked_tagnum(&G__TaDictLN_dequelEVaPairmUcOallocatorlEVaPairmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Int_t>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,string,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<Int_t> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> >,less<int> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TaString>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaStringcOallocatorlETaStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaStringcOallocatorlETaStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<dtype*>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<string,vector<dtype*> >",117,G__get_linked_tagnum(&G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<string,vector<dtype*,allocator<dtype*> > >",117,G__get_linked_tagnum(&G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<string,vector<dtype*,allocator<dtype*> >,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TaKeyMap>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TaKeyMap,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Bool_t>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool>",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,bool,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TaDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TaDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TaLabelledQuantity>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TaKeyMap>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaKeyMapcOallocatorlETaKeyMapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaKeyMapcOallocatorlETaKeyMapgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__TaDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Cut_t,Int_t>",117,G__get_linked_tagnum(&G__TaDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<Cut_t,Int_t> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TaCutInterval>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<size_t>",117,G__get_linked_tagnum(&G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<unsigned int>",117,G__get_linked_tagnum(&G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<EpicsChan>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<EpicsChan> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<EpicsChan,allocator<EpicsChan> > >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<EpicsChan,allocator<EpicsChan> >,less<string> >",117,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<VaPair>",117,G__get_linked_tagnum(&G__TaDictLN_dequelEVaPaircOallocatorlEVaPairgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<deque<VaPair> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<deque<VaPair,allocator<VaPair> > >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<VaPair>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEVaPaircOallocatorlEVaPairgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEVaPaircOallocatorlEVaPairgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Int_t> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),1,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),257,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),1,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),257,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<int> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<double> >",117,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TaDictLN_TString),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TaDictLN_TString),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TaDictLN_TString),256,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TaDictLN_TString),1,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TaDictLN_TString),257,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",104,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* string */
static void G__setup_memvarstring(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_string));
   { string *p; p=(string*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("size_t"),-2,1,"npos=-1",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaBlind */
static void G__setup_memvarTaBlind(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaBlind));
   { TaBlind *p; p=(TaBlind*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fASign=",0,"slow helicity reversal sign");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAMean=",0,"value around which we blind");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fAOffScale=",0,"scale of offset");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBlindSign=",0,"secret sign");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBlindOffset=",0,"secret offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaFileName */
static void G__setup_memvarTaFileName(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   { TaFileName *p; p=(TaFileName*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fFileName=",0,"full path and file name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaIResultsFile */
static void G__setup_memvarTaIResultsFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile));
   { TaIResultsFile *p; p=(TaIResultsFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fChksum=",0,"database checksum from the file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fPtag=",0,"program tag from last read");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fRtag=",0,"result tag from last read");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRes=",0,"result from last read");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fErr=",0,"error on result from last read");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,4,"fEv0=",0,"lower event limit from last read");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,4,"fEv1=",0,"upper event limit from last read");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fUnits=",0,"units from last read");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fCom=",0,"comment from last read");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fLine=",0,"line from last read");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaLabelledQuantity */
static void G__setup_memvarTaLabelledQuantity(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity));
   { TaLabelledQuantity *p; p=(TaLabelledQuantity*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fName=",0,"Name of the quantity");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fVal=",0,"Value of the quantity");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fUnits=",0,"Units for the quantity");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fFlags=",0,"Flags for the quantity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaOResultsFile */
static void G__setup_memvarTaOResultsFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile));
   { TaOResultsFile *p; p=(TaOResultsFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fPtag=",0,"program tag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaStatistics */
static void G__setup_memvarTaStatistics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaStatistics));
   { TaStatistics *p; p=(TaStatistics*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fGoodErrors=",0,"update functions will pass good errors");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstPass=",0,"First or second pass?");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN=",0,"sum of 1 (= N)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN2=",0,"sum of 1 (= N) for second pass");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWt=",0,"sum of weights");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWt2=",0,"sum of weights^2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWtX=",0,"sum of weights * x");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWtX2=",0,"sum of weights * x^2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWt2Err2=",0,"sum of weights^2 * error^2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fXbar=",0,"means of x from first pass");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWtXs=",0,"sum of weights * (x-<x>)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumWtXs2=",0,"sum of weights * (x-<x>)^2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaString */
static void G__setup_memvarTaString(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaString));
   { TaString *p; p=(TaString*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<string,allocator<string> > */
static void G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   { vector<string,allocator<string> > *p; p=(vector<string,allocator<string> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TaRun */
static void G__setup_memvarTaRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaRun));
   { TaRun *p; p=(TaRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgTARUN_ERROR=0",0,"returned on error");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgTARUN_OK=0",0,"returned on success");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgTARUN_VERBOSE=0",0,"verbose(1) or not(0) warnings");
   G__memvar_setup((void*)(&TaRun::fNLastSlice),104,0,0,-1,G__defined_typename("EventNumber_t"),-2,1,"fNLastSlice=",0,"event number at last slice reset");
   G__memvar_setup((void*)(&TaRun::fgORDNAME),117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-2,1,"fgORDNAME=",0,"names of orderings");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("RunNumber_t"),-1,4,"fRunNumber=",0,"Number of this run");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNumber=",0,"Number of the recently read event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAccumEventNumber=",0,"Number of the event being accumulated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaDataBase),-1,-1,4,"fDataBase=",0,"Database for this run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaCutList),-1,-1,4,"fCutList=",0,"Cut list for this run");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("SlotNumber_t"),-1,4,"fOversamp=",0,"Oversample value for this run");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCompress=",0,"ROOT file compression for this run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_THaCodaData),-1,-1,4,"fCoda=",0,"CODA data source");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"mymode=",0,"Mode for ET");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fCodaFileName=",0,"Name of CODA data file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fComputer=",0,"Computer to ask for online data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fSession=",0,"CODA session for online data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,4,"fEvent=",0,"The most recently read event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,4,"fAccumEvent=",0,"Event being accumulated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaDevice),-1,-1,4,"fDevices=",0,"Device map for this run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaEpics),-1,-1,4,"fEpics=",0,"EPICS data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TFile),-1,-1,4,"fRootFile=",0,"Root file for analysis results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TTree),-1,-1,4,"fEvtree=",0,"Event tree for Root file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TTree),-1,-1,4,"fEpicsTree=",0,"EPICS tree.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fESliceStats=",0,"Incremental event statistics");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fPSliceStats=",0,"Incremental pair statistics");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fPOrdSliceStats=",0,"Incremental pair statistics, order cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fMSliceStats=",0,"Incremental multiplet statistics");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fERunStats=",0,"Cumulative event statistics");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fPRunStats=",0,"Cumulative pair statistics");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fPOrdRunStats=",0,"Cumulative pair statistics, order cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaStatistics),-1,-1,4,"fMRunStats=",0,"Cumulative multiplet statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fEStatsNames=",0,"Names of event statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fPStatsNames=",0,"Names of pair statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fPOrdStatsNames=",0,"Names of pair statistics, order cuts");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fMStatsNames=",0,"Names of multiplet statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fEStatsUnits=",0,"Units of event statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fPStatsUnits=",0,"Units of pair statistics");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fPOrdStatsUnits=",0,"Units of pair statistics, order cuts");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fMStatsUnits=",0,"Units of multiplet statistics");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstPass=",0,"Pass 1 or 2?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),-1,-1,4,"fResFile=",0,"Results file");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFillDitherOnly=",0,"Fill only dither events to trees?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VaAnalysis */
static void G__setup_memvarVaAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_VaAnalysis));
   { VaAnalysis *p; p=(VaAnalysis*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgNONE=0",0,"dont add anything to the pair tree");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgSTATS=0",0,"Print statistics");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgNO_BEAM_NO_ASY=0",0,"Do not compute asym if lobeam cut fails");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgCOPY=0",0,"Store right and left values as results");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgDIFF=0",0,"Store R-L difference as result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgASY=0",0,"Store asymmetry as result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgASYN=0",0,"Store normalized asymmetry as result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgBLIND=0",0,"Blind this result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgBLINDSIGN=0",0,"Blind sign only of this result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgORDERED=0",0,"Also do order dependent stats");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgAVE=0",0,"Use average asymmetry, not sum");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgNO_BEAM_C_NO_ASY=0",0,"Do not compute asym if lobeamc cut fails");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgAVG=0",0,"Store average as result");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgAVGN=0",0,"Store normalized average as result");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgVAANA_ERROR=0",0,"returned on error");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgVAANA_OK=0",0,"returned on success");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,1,"fgNumBpmFdbk=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("EventNumber_t"),-2,1,"fgSLICELENGTH=0",0,"events in a statistics slice");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaRun),-1,-1,2,"fRun=",0,"Run being analyzed");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fMaxNumEv=",0,"Max number of events to analyze");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fPreEvt=",0,"Event being preprocessed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaPair),-1,-1,2,"fPrePair=",0,"Pair being built");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR),G__defined_typename("deque<VaEvent>"),-1,2,"fEHelDeque=",0,"Helicity delay event deque");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR),G__defined_typename("deque<VaEvent>"),-1,2,"fEDeque=",0,"Cut delay event deque");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_dequelEVaPairmUcOallocatorlEVaPairmUgRsPgR),G__defined_typename("deque<VaPair*>"),-1,2,"fPDeque=",0,"Cut delay pair deque");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fEvt=",0,"Event being analyzed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaPair),-1,-1,2,"fPair=",0,"Pair being analyzed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaMultiplet),-1,-1,2,"fMultiplet=",0,"Multiplet being analyzed");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoMultiplet=",0,"Do multiplet processing?");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNMultiplet=",0,"Size of multiplet");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,2,"fEHelDequeMax=",0,"Max size of helicity delay event deque");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,2,"fEDequeMax=",0,"Max size of cut delay event deque");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("size_t"),-1,2,"fPDequeMax=",0,"Max size of cut delay pair deque");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR),G__defined_typename("vector<AnaList>"),-1,2,"fTreeList=",0,"Quantities to put in the pair results and pair tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TTree),-1,-1,2,"fPairTree=",0,"Pair tree for Root file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TTree),-1,-1,2,"fMultipletTree=",0,"Multiplet tree for Root file");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreeEvNums=",0,"Ev numbers for tree");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTreeMEvNum=",0,"Mean ev number for tree");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreeOKCond=",0,"Pair passes cut conditions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreeOKCut=",0,"Pair not in cut interval");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreeOKCCut=",0,"Pair not in cut interval (hallC)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreePrevROHel=",0,"Readout helicity of prev event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTreePrevHel=",0,"True helicity of prev event");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTreeSpace=",0,"Other data for tree");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNCuts=",0,"Size of cut array");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCutArray=",0,"Array of cut condition values for tree");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCutIntArray=",0,"Array of cut interval values for tree");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOnlFlag=",0,"Flag whether data are online or not. ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fEvtProc=",0,"Number of events processed");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fPairProc=",0,"Number of pairs processed");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fMultipletProc=",0,"Number of multiplets processed");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__TaDictLN_EPairType),-1,-1,2,"fPairType=",0,"Type of beam helicity structure");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,2,"fSliceLimit=",0,"Event number at end of next slice");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoSlice=",0,"To control if slice stats are kept");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoRun=",0,"To control if run stats are kept");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDoRoot=",0,"To control whether ROOT file is made");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFirstPass=",0,"Pass 1 or not?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fLastPass=",0,"Last pass or not?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaBlind),-1,-1,2,"fBlind=",0,"For blinding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRunNum=",0,"current run number ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,2,"fFdbkName[5]=",0,"Feedback name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,2,"fMonitor[5]=",0,"Current/postion Monitor name used for feedback                  ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSwitch[5]=",0,"Enable compute vlaue for feedback");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSend[5]=",0,"Enable send voltage value for feedback ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fTimeScale[5]=",0,"Timescale of feedback");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fMonitorKey[5]=",0,"Current/position Monitor key   ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNPair[5]=",0,"Number of pair for type i feedback  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStartPair[5]=",0,"Feedback pair start ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStopPair[5]=",0,"IA feedback pair stop");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fFeedNum[5]=",0,"feedback number");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,2,"fSum[5]=",0,"Sum of value for feedback i ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMean1[5]=",0,"Feedback Mean value 1st pass  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fMean2[5]=",0,"Feedback Mean value 2st pass  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fRMS[5]=",0,"Feedback RMS");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResult[5]=",0,"(asy or diff) result for feedback i  ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fResultError[5]=",0,"(asy or diff) result error for feedback i ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fIAslope=",0,"IA feedback calibration slope");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fIAHallCslope=",0,"IA feedback calibration slope for Hall-C");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPITAslope=",0,"PITA feedback calibration slope");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPZTMatrix=",0,"PZT matrix");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLast[5]=",0,"Last value of the voltage for feeback i  ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fCurMon=",0,"Index for current monitor for normalization");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPZTQcoupling=",0,"Enable correction for PZT Q coupling");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPZTQslopes[2]=",0,"PZT Q coupling slopes");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFillDitherOnly=",0,"Fill only dither events to trees?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaAnalysisManager */
static void G__setup_memvarTaAnalysisManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager));
   { TaAnalysisManager *p; p=(TaAnalysisManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgTAAM_ERROR=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,1,"fgTAAM_OK=0",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaRun),-1,-1,4,"fRun=",0,"Requested run");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),-1,-1,4,"fAnalysis=",0,"Requested analysis");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fOnlFlag=",0,"Flag indicating data is online");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"dbcommand=",0,"Database command to pass to fRun ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaCutList */
static void G__setup_memvarTaCutList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutList));
   { TaCutList *p; p=(TaCutList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("RunNumber_t"),-1,4,"fRunNumber=",0,"Run number associated with this list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR),G__defined_typename("vector<TaCutInterval>"),-1,4,"fIntervals=",0,"List of cut intervals");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("list<size_t>"),-1,4,"fOpenIntIndices=",0,"Indices of open interval (if any) for each cut type");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fNumCuts=",0,"Number of cuts defined");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fLowExtension=",0,"Low-end extension for each cut type");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fHighExtension=",0,"High-end extension for each cut type");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),G__defined_typename("vector<UInt_t>"),-1,4,"fTally=",0,"tally of cut condition failures");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"fCutNames=",0,"names of cuts");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("size_t"),-2,4,"fgMaxEvent=1000000",0,"Probably should be available from VaEvent, really");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fLoBeamCNo=",0,"cut number for hallC low beam");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fLoBeamNo=",0,"cut number for low beam ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fBurpNo=",0,"cut number for burp beam");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fSatNo=",0,"cut number for detector saturation");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fMonSatNo=",0,"cut number for monitor saturation");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fPosBurpNo=",0,"cut number for pos. burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fPosBurpENo=",0,"cut number for energy burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fCBurpNo=",0,"cut number for C-beam-burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fAdcxDacBurpNo=",0,"cut number for 18-bit DAC burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fAdcxBadNo=",0,"cut number for 18-bit bad cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fScalerBadNo=",0,"cut number for scaler bad cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaMultiplet */
static void G__setup_memvarTaMultiplet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaMultiplet));
   { TaMultiplet *p; p=(TaMultiplet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,2,"fgTAM_ERROR=0",0,"returned on error");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,2,"fgTAM_OK=0",0,"returned on success");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR),G__defined_typename("vector<deque<VaPair> >"),-2,2,"fgPairQueue=",0,"Pairs waiting to be multipleted (1 deque per multiplet member, minus one)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgSkipping=",0,"true until first pair of first full window multiplet/quad/octet etc.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaPair),-1,-2,2,"fgThisWinPair=",0,"first pair of this window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaPair),-1,-2,2,"fgLastWinPair=",0,"first pair of last window");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgMultipletMade=",0,"set in Fill to true if multiplet made, else false");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgNCuts=",0,"number of cuts defined");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fN=",0,"Number in a multiplet");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fFull=",0,"True iff we've filled this multiplet");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR),G__defined_typename("vector<VaPair>"),-1,2,"fPairs=",0,"the helicity pairs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR),G__defined_typename("vector<TaLabelledQuantity>"),-1,2,"fResults=",0,"Multiplet analysis results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VaEvent */
static void G__setup_memvarVaEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_VaEvent));
   { VaEvent *p; p=(VaEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fData=",0,"Decoded/corrected data");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgMaxEvLen=4000",0,"Maximum length for event buffer");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("EventNumber_t"),-2,4,"fgMaxEvNum=10000000",0,"Maximum event number");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("Cut_t"),-2,4,"fgMaxCuts=10",0,"Length of cut values array   ");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgEpicsType=131",0,"EPICS event type");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,4,"fgTAEVT_ERROR=0",0,"returned on error");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,4,"fgTAEVT_OK=0",0,"returned on success");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgMaxNumPosMon=5",0,"Maximum number of position ");
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgMaxNumPosMonE=5",0,"Maximum number of energy");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-2,4,"fgLastEv=",0,"copy of previous event");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgFirstDecode=",0,"true until first event decoded");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgLoBeam=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgLoBeamC=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgBurpCut=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgSatCut=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgMonSatCut=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgAdcxDacBurpCut=",0,"cut threshold from database");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgPosBurp[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgPosBurpE[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgCBurpCut=",0,"cut threshold from data base");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgLoBeamNo=",0,"cut number for low beam");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgLoBeamCNo=",0,"cut number for low beam C");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgBurpNo=",0,"cut number for beam burp");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgSatNo=",0,"cut number for saturation");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgMonSatNo=",0,"cut number for saturation");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgEvtSeqNo=",0,"cut number for event sequence");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgStartupNo=",0,"cut number for startup");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgPosBurpNo=",0,"cut number for pos. burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgPosBurpENo=",0,"cut number for energy burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgCBurpNo=",0,"cut number for C-beam-burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgAdcxDacBurpNo=",0,"cut number for 18-bit DAC burp cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgAdcxBadNo=",0,"cut number for 18-bit bad cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,4,"fgScalerBadNo=",0,"cut number for scaler bad cut");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgOversample=",0,"oversample factor");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgCurMon=",0,"index to current monitor for cuts");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgCurMonC=",0,"index to current monitor for cuts");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgDetRaw[4]=",0,"index to raw detector values for cuts");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgMonRaw[4]=",0,"index to raw monitor values for cuts");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgNPosMon=",0,"number of Position Monitors for Pos Burp cut.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgPosMon[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgNPosMonE=",0,"number of Position Monitors for Energy Burp cut.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgPosMonE[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgSizeConst=",0,"size of first physics event should be size of all");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgNCuts=",0,"Length of cut array");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"fgCalib=",0,"True to include calibration variables");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,4,"fgDetKey[4]=",0,"index to calibrated detector values, used for det combos");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fgCombWt[5][4]=",0,"wts for detector combinations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgDvalue=",0,"Previous divider value seen in UnpackAdcx");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fQPD1Pars[6]=",0,"QPD calibration parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fLINA1pars[10]=",0,"LINA calibration parameters");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-2,4,"fCavPars[4][2]=",0,"Cavity calibration parameters");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEvBuffer=",0,"Raw event data");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPrevBuffer=",0,"Previous event data");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPrevAdcxBase=",0,"Previous base values, ADCX.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEvType=",0,"Event type: 17 = prestart, 1-11 = physics");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,4,"fEvNum=",0,"Event number from data stream");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLastPhyEv=",0,"Last physics event number.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEvLen=",0,"Length of event data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numroc=",0,"Number of ROCs");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN1roc=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fLenroc=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIrn=",0,"Crate pointers");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCutArray=",0,"Array of cut values");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFailedACut=",0,"True iff a cut failed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR),G__defined_typename("vector<TaLabelledQuantity>"),-1,4,"fResults=",0,"Results of event analysis");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__TaDictLN_EHelicity),-1,-1,4,"fHel=",0,"True helicity filled from later event");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__TaDictLN_EHelicity),-1,-1,4,"fPrevROHel=",0,"Readout helicity for previous event");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__TaDictLN_EHelicity),-1,-1,4,"fPrevHel=",0,"True helicity for previous event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"adcxbad=",0,"Flag for whether any ADCX is bad (1) or not (0)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"adcxglitch=",0,"Flag for whether any ADCX has a DAC glitch (1) or not (0)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"adcxcrlist=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"scalerbad=",0,"Flag for whether any Scaler is bad (1) or not (0)");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgCareSize=0",0,"if we care(1) or not(0) about");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fPvdisPhaseShift=0",0,"To shift(1) or not(0) the phase");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fPvdisCheckCrate=0",0,"To check if crate exists and if");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* VaPair */
static void G__setup_memvarVaPair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_VaPair));
   { VaPair *p; p=(VaPair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,2,"fgVAP_ERROR=0",0,"returned on error");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("ErrCode_t"),-2,2,"fgVAP_OK=0",0,"returned on success");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR),G__defined_typename("deque<VaEvent>"),-2,2,"fgEventQueue=",0,"Events waiting to be paired");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgSkipping=",0,"true until first event of first full window pair/quad/octet etc.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-2,2,"fgThisWinEv=",0,"first ev of this window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-2,2,"fgLastWinEv=",0,"first ev of last window");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgShreg=",0,"value for sequence algorithm      ");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgNShreg=",0,"count since fgShreg was reset");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgPairMade=",0,"set in Fill to true if pair made, else false");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgNCuts=",0,"number of cuts defined");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-2,2,"fgSequenceNo=",0,"cut number for sequence");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgOldb=",0,"old bit for non-random seq check");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fgRandom=",0,"random helicity sequence?");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-2,2,"fgRanType=",0,"identifies which random bit generator");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fEvLeft=",0,"\"Left\" helicity event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fEvRight=",0,"\"Right\" helicity event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR),G__defined_typename("vector<TaLabelledQuantity>"),-1,2,"fResults=",0,"Pair analysis results");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fEvFirst=",0,"(pointer to) first event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_VaEvent),-1,-1,2,"fEvSecond=",0,"(pointer to) second event");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fUseRanBitNew30=1",0,"use new helicity board (30 bit)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* TaStandardAna */
static void G__setup_memvarTaStandardAna(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaStandardAna));
   { TaStandardAna *p; p=(TaStandardAna*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaDebugAna */
static void G__setup_memvarTaDebugAna(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna));
   { TaDebugAna *p; p=(TaDebugAna*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaRootRep */
static void G__setup_memvarTaRootRep(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaRootRep));
   { TaRootRep *p; p=(TaRootRep*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,-1,-2,4,"fgMaxChar=150000",0,"!  This is about 2x normal size");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"run_num=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"i=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"j=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"jfirst=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fptr=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"fNumchar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TArrayC),-1,-1,4,"carray=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TDatime),-1,-1,4,"AnaTDatime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaDataBase */
static void G__setup_memvarTaDataBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaDataBase));
   { TaDataBase *p; p=(TaDataBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"runnum=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"tables=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR),G__defined_typename("multimap<string,vector<dtype*> >"),-1,4,"database=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TaRootRep),-1,-1,4,"rootdb=",0,"ROOT representation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TDatime),-1,-1,4,"AnaTDatime=",0,"TDatime of when run was analyzed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_string),-1,-1,4,"fileRead=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,4,"dbcommand=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR),G__defined_typename("map<string,TaKeyMap>"),-1,4,"datamap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR),G__defined_typename("map<string,Bool_t>"),-1,4,"dbput=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgRcLcLiterator),G__defined_typename("const_iterator"),-1,4,"cdmapiter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgRcLcLiterator),-1,-1,4,"dmapiter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,int>"),-1,4,"dbinit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,int>"),-1,4,"colsize=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"didinit=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"didread=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"didput=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"initdm=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"firstiter=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"usemysql=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useroot=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"usectrl=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"dacparam=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"dacxparam=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"adcped=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"adcxped=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"vqwkped=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"scalped=",0,(char*)NULL);
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstgdn=",0,(char*)NULL);
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstAdcPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstAdcxPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstScalPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,71,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstVqwkPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nbadev=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fCksum=",0,"checksum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaDevice */
static void G__setup_memvarTaDevice(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaDevice));
   { TaDevice *p; p=(TaDevice*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNumRaw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNtied=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgAdcHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgAdcxHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgScalHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgTbdHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgPvdScaHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgPvdSca1Header=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgTirHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgDaqHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgVqwkHeader=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgAdcMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgAdcxMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgScalMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgTbdMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgTirMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgDaqMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgVqwkMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgPvdScaMask=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fgPvdSca1Mask=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRawKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEvPointer=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCrate=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fReadOut=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIsUsed=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIsRotated=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAdcPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAdcxPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fScalPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDacSlope=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDacxSlope=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fVqwkPed=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDevNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fChanNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAdcptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAdcxptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fScalptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fVqwkptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTbdptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTirptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDaqptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,Int_t>"),-1,2,"fKeyToIdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR),G__defined_typename("vector<TaKeyMap>"),-1,2,"fTiedKeys=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,2,"fRevKeyMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),G__defined_typename("vector<string>"),-1,2,"fRotateList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"pvdisKeys=",0,"list of pvdis scaler keys");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"PvdisPmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"PvdisPmax=",0,"min, max of primary pvdis keys");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"PvdisDmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"PvdisDmax=",0,"min, max of derived pvdis keys");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"fgPvdKchk=999999",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaCutInterval */
static void G__setup_memvarTaCutInterval(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutInterval));
   { TaCutInterval *p; p=(TaCutInterval*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("Cut_t"),-1,4,"fCut=",0,"Cut type, e.g. low beam, sequence error, malfunction...");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fVal=",0,"Cut value, nonzero, e.g. type of sequence error");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,4,"fBegin=",0,"Number of first event of cut interval");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("EventNumber_t"),-1,4,"fEnd=",0,"Number of first event after end of cut interval");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaEvent */
static void G__setup_memvarTaEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaEvent));
   { TaEvent *p; p=(TaEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaSimEvent */
static void G__setup_memvarTaSimEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaSimEvent));
   { TaSimEvent *p; p=(TaSimEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_TRandom),-1,-1,4,"fgR=",0,"Random number object");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBcm[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetNoiseR[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBpm4AXvCoil[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBpm4AYvCoil[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBpm4BXvCoil[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBpm4BYvCoil[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBpm12XvCoil[7]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBpm12X[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBpm4AX[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBpm4BX[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBpm4AY[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDetVsBpm4BY[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDet12Xoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDet4AXoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDet4BXoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDet4AYoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDet4BYoff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaEpics */
static void G__setup_memvarTaEpics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaEpics));
   { TaEpics *p; p=(TaEpics*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTreeVal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,1,-1,G__defined_typename("UInt_t"),-2,4,"fgINSANE_MAX=10000",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<EpicsChan> >"),-1,4,"fEpicsData=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR),G__defined_typename("vector<TaString>"),-1,4,"fTreeKey=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaPairFromOctet */
static void G__setup_memvarTaPairFromOctet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet));
   { TaPairFromOctet *p; p=(TaPairFromOctet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgOctetCount=",0,"Octet window counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaPairFromPair */
static void G__setup_memvarTaPairFromPair(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair));
   { TaPairFromPair *p; p=(TaPairFromPair*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaPairFromQuad */
static void G__setup_memvarTaPairFromQuad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad));
   { TaPairFromQuad *p; p=(TaPairFromQuad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fgQuadCount=",0,"Quad window counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaFeedbackAna */
static void G__setup_memvarTaFeedbackAna(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna));
   { TaFeedbackAna *p; p=(TaFeedbackAna*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TaADCCalib */
static void G__setup_memvarTaADCCalib(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_TaADCCalib));
   { TaADCCalib *p; p=(TaADCCalib*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"typeFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"chanExists[30][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TFile),-1,-1,4,"hfile=",0,"root histo file");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__TaDictLN_TH1F),-1,-1,4,"phist=",0,"Array of histograms");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumX=",0,"sum of X");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumX2=",0,"sum of X^2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"nEntries=",0,"nEntries for this channel");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumY=",0,"sum of Y needed for linear fit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fSumXY=",0,"sum of XY needed for linear fit");
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-2,4,"MaxNoiseDACBin=65536",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__TaDictLN_TGraphErrors),-1,-1,4,"dgraphs=",0,"array of graphs");
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__TaDictLN_TGraphErrors),-1,-1,4,"rgraphs=",0,"array of graphs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<vector<Int_t> >"),-1,4,"dEntries=",0,"number of entries in each chan#/DAC bin");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,4,"dADCsum=",0,"sum of ADC value for each chan#/DAC bin");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),G__defined_typename("vector<vector<Double_t> >"),-1,4,"dADCsum2=",0,"sum of ADC value-squared");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dDACval[65536]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dEDACval[65536]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dADCavg[65536]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dADCvar[65536]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"dRes[65536]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TaDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
static void G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   { vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > *p; p=(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
static void G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   { vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > *p; p=(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<TString,allocator<TString> > */
static void G__setup_memvarvectorlETStringcOallocatorlETStringgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   { vector<TString,allocator<TString> > *p; p=(vector<TString,allocator<TString> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTaDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncstring(void) {
   /* string */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_string));
   G__memfunc_setup("string",663,G__TaDict_103_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("string",663,G__TaDict_103_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("string",663,G__TaDict_103_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 3, 1, 1, 0, 
"u 'string' - 11 - str h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("string",663,G__TaDict_103_0_4, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 2, 1, 1, 0, 
"C - - 10 - s h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("string",663,G__TaDict_103_0_5, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("string",663,G__TaDict_103_0_6, 105, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - rep c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_103_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_103_0_8, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_103_0_9, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TaDict_103_0_10, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TaDict_103_0_11, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TaDict_103_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__TaDict_103_0_13, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__TaDict_103_0_14, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"u 'string' - 11 - str h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__TaDict_103_0_15, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"C - - 10 - s h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__TaDict_103_0_16, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("append",632,G__TaDict_103_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"h - 'size_t' 0 - rep c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__TaDict_103_0_18, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__TaDict_103_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"u 'string' - 11 - str h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__TaDict_103_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"C - - 10 - s h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__TaDict_103_0_21, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__TaDict_103_0_22, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"h - 'size_t' 0 - rep c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_103_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"h - 'size_t' 0 - pos1 u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_103_0_24, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 4, 1, 1, 0, 
"h - 'size_t' 0 - pos1 u 'string' - 11 - str "
"h - 'size_t' 0 - pos2 h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_103_0_25, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"h - 'size_t' 0 - pos C - - 10 - s "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_103_0_26, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 2, 1, 1, 0, 
"h - 'size_t' 0 - pos C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_103_0_27, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"h - 'size_t' 0 - pos h - 'size_t' 0 - rep "
"c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replace",732,G__TaDict_103_0_28, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"h - 'size_t' 0 - pos1 h - 'size_t' 0 - n1 "
"u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replace",732,G__TaDict_103_0_29, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 5, 1, 1, 0, 
"h - 'size_t' 0 - pos1 h - 'size_t' 0 - n1 "
"u 'string' - 11 - str h - 'size_t' 0 - pos2 "
"h - 'size_t' 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replace",732,G__TaDict_103_0_30, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 4, 1, 1, 0, 
"h - 'size_t' 0 - pos h - 'size_t' 0 - n1 "
"C - - 10 - s h - 'size_t' 0 - n2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replace",732,G__TaDict_103_0_31, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 3, 1, 1, 0, 
"h - 'size_t' 0 - pos h - 'size_t' 0 - n1 "
"C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replace",732,G__TaDict_103_0_32, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 4, 1, 1, 0, 
"h - 'size_t' 0 - pos h - 'size_t' 0 - n "
"h - 'size_t' 0 - rep c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_103_0_33, 99, -1, -1, 1, 1, 1, 1, 9, "h - 'size_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_103_0_34, 99, -1, -1, 1, 1, 1, 1, 0, "h - 'size_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__TaDict_103_0_35, 99, -1, -1, 1, 1, 1, 1, 9, "h - 'size_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__TaDict_103_0_36, 99, -1, -1, 1, 1, 1, 1, 0, "h - 'size_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("c_str",539,G__TaDict_103_0_37, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__TaDict_103_0_38, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("length",642,G__TaDict_103_0_39, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_103_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 0 - n c - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_103_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_103_0_42, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_103_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'size_t' 0 - res_arg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__TaDict_103_0_44, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 0, 
"C - - 0 - s h - 'size_t' 0 - n "
"h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TaDict_103_0_45, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TaDict_103_0_46, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TaDict_103_0_47, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TaDict_103_0_48, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rfind",531,G__TaDict_103_0_49, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rfind",531,G__TaDict_103_0_50, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rfind",531,G__TaDict_103_0_51, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rfind",531,G__TaDict_103_0_52, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_of",1372,G__TaDict_103_0_53, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_of",1372,G__TaDict_103_0_54, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_of",1372,G__TaDict_103_0_55, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_of",1372,G__TaDict_103_0_56, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_of",1256,G__TaDict_103_0_57, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_of",1256,G__TaDict_103_0_58, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_of",1256,G__TaDict_103_0_59, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_of",1256,G__TaDict_103_0_60, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_not_of",1804,G__TaDict_103_0_61, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_not_of",1804,G__TaDict_103_0_62, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_not_of",1804,G__TaDict_103_0_63, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_first_not_of",1804,G__TaDict_103_0_64, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 '0' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_not_of",1688,G__TaDict_103_0_65, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"u 'string' - 11 - str h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_not_of",1688,G__TaDict_103_0_66, 104, -1, G__defined_typename("size_t"), 0, 3, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 - pos "
"h - 'size_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_not_of",1688,G__TaDict_103_0_67, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"C - - 10 - s h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find_last_not_of",1688,G__TaDict_103_0_68, 104, -1, G__defined_typename("size_t"), 0, 2, 1, 1, 8, 
"c - - 0 - c h - 'size_t' 0 'npos' pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("substr",675,G__TaDict_103_0_69, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 2, 1, 1, 8, 
"h - 'size_t' 0 '0' pos h - 'size_t' 0 'npos' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__TaDict_103_0_70, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - str", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__TaDict_103_0_71, 105, -1, -1, 0, 1, 1, 1, 8, "C - - 10 - s", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~string", 789, G__TaDict_103_0_72, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaBlind(void) {
   /* TaBlind */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaBlind));
   G__memfunc_setup("TaBlind",670,G__TaDict_146_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaBlind), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaBlind",670,G__TaDict_146_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaBlind), -1, 0, 4, 1, 1, 0, 
"u 'string' - 11 - s d - 'Double_t' 10 - as "
"d - 'Double_t' 10 - am d - 'Double_t' 10 - ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaBlind",670,G__TaDict_146_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaBlind), -1, 0, 4, 1, 1, 0, 
"C - - 10 - c d - 'Double_t' 10 - as "
"d - 'Double_t' 10 - am d - 'Double_t' 10 - ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Blind",489,G__TaDict_146_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - atrue", "blind a true asymmetry", (void*) NULL, 0);
   G__memfunc_setup("UnBlind",684,G__TaDict_146_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - ablind", "unblind a blinded asymmetry", (void*) NULL, 0);
   G__memfunc_setup("BlindSignOnly",1308,G__TaDict_146_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - atrue", "blind or unblind with no offset", (void*) NULL, 0);
   G__memfunc_setup("Blinding",807,G__TaDict_146_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "is blinding on?", (void*) NULL, 0);
   G__memfunc_setup("TaBlind",670,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaBlind), -1, 0, 1, 1, 4, 0, "u 'TaBlind' - 11 - tb", "no use for copy constructor", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaBlind), -1, 1, 1, 1, 4, 1, "u 'TaBlind' - 11 - tb", "no use for assign", (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 10 - s", "Constructor utility", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_146_0_11, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaBlind::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_146_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaBlind::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_146_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaBlind::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_146_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaBlind::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_146_0_15, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_146_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_146_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_146_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_146_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaBlind::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_146_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaBlind::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_146_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaBlind::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_146_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaBlind::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaBlind", 796, G__TaDict_146_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaFileName(void) {
   /* TaFileName */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaFileName));
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 5, 1, 1, 0, 
"h - 'RunNumber_t' 10 - r u 'string' - 10 - a "
"u 'string' - 10 - s u 'string' - 10 '\"\"' c "
"u 'string' - 10 '\"\"' suf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 5, 1, 1, 0, 
"h - 'RunNumber_t' 10 - r C - - 10 - a "
"C - - 10 - s C - - 10 '\"\"' c "
"C - - 10 '\"\"' suf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_4, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 3, 1, 1, 0, 
"u 'string' - 10 - s u 'string' - 10 '\"\"' c "
"u 'string' - 10 '\"\"' suf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_5, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 3, 1, 1, 0, 
"C - - 10 - s C - - 10 '\"\"' c "
"C - - 10 '\"\"' suf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFileName",950,G__TaDict_163_0_6, 105, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 0, 1, 1, 1, 0, "u 'TaFileName' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_163_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_TaFileName), -1, 1, 1, 1, 1, 0, "u 'TaFileName' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Setup",529,G__TaDict_163_0_8, 121, -1, -1, 0, 2, 3, 1, 0, 
"h - 'RunNumber_t' 10 - r u 'string' - 10 - a", (char*)NULL, (void*) G__func2void( (void (*)(const RunNumber_t, const string))(&TaFileName::Setup) ), 0);
   G__memfunc_setup("Setup",529,G__TaDict_163_0_9, 121, -1, -1, 0, 2, 3, 1, 0, 
"h - 'RunNumber_t' 10 - r C - - 10 - a", (char*)NULL, (void*) G__func2void( (void (*)(const RunNumber_t, const char*))(&TaFileName::Setup) ), 0);
   G__memfunc_setup("String",631,G__TaDict_163_0_10, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Tstring",747,G__TaDict_163_0_11, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"u 'string' - 10 - b u 'string' - 10 - a "
"u 'string' - 10 - s u 'string' - 10 '\"\"' c "
"u 'string' - 10 '\"\"' suf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Basename",796,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 3, 4, 0, "h - 'RunNumber_t' 10 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_163_0_14, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaFileName::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_163_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFileName::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_163_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaFileName::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_163_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaFileName::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_163_0_18, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_163_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_163_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_163_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_163_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFileName::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_163_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaFileName::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_163_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFileName::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_163_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaFileName::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaFileName", 1076, G__TaDict_163_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaIResultsFile(void) {
   /* TaIResultsFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile));
   G__memfunc_setup("TaIResultsFile",1392,G__TaDict_164_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile), -1, 0, 2, 1, 1, 0, 
"C - - 10 - filename h - 'UInt_t' 10 '0' chks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaIResultsFile",1392,G__TaDict_164_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile), -1, 0, 4, 1, 1, 0, 
"h - 'RunNumber_t' 10 - run u 'string' - 10 - atype "
"u 'string' - 10 '\"\"' com h - 'UInt_t' 10 '0' chks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaIResultsFile",1392,G__TaDict_164_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile), -1, 0, 4, 1, 1, 0, 
"h - 'RunNumber_t' 10 - run C - - 10 - atype "
"C - - 10 '\"\"' com h - 'UInt_t' 10 '0' chks", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadNextLine",1187,G__TaDict_164_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "Read a line from the file", (void*) NULL, 0);
   G__memfunc_setup("GetChksum",907,G__TaDict_164_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPtag",684,G__TaDict_164_0_6, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPtagTS",851,G__TaDict_164_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtag",686,G__TaDict_164_0_8, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRtagTS",853,G__TaDict_164_0_9, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRes",586,G__TaDict_164_0_10, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetErr",585,G__TaDict_164_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEv0",523,G__TaDict_164_0_12, 104, -1, G__defined_typename("EventNumber_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEv1",524,G__TaDict_164_0_13, 104, -1, G__defined_typename("EventNumber_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnits",819,G__TaDict_164_0_14, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnitsTS",986,G__TaDict_164_0_15, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCom",575,G__TaDict_164_0_16, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComTS",742,G__TaDict_164_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__TaDict_164_0_18, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLineTS",847,G__TaDict_164_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile), -1, 1, 1, 1, 4, 0, "u 'TaIResultsFile' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"h - 'RunNumber_t' 10 - run u 'string' - 10 - atype "
"u 'string' - 10 - com h - 'UInt_t' 10 '0' chks", "Utility for constructors", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_164_0_22, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaIResultsFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_164_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaIResultsFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_164_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaIResultsFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_164_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaIResultsFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_164_0_26, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_164_0_27, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_164_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_164_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_164_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaIResultsFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_164_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaIResultsFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_164_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaIResultsFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_164_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaIResultsFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaIResultsFile", 1518, G__TaDict_164_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaLabelledQuantity(void) {
   /* TaLabelledQuantity */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity));
   G__memfunc_setup("TaLabelledQuantity",1833,G__TaDict_165_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity), -1, 0, 4, 1, 1, 0, 
"u 'string' - 11 '\"\"' qn d - 'Double_t' 10 '0.0' qv "
"u 'string' - 11 '\"\"' qu h - 'UInt_t' 10 '0' qf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaLabelledQuantity",1833,G__TaDict_165_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity), -1, 0, 1, 1, 1, 0, "u 'TaLabelledQuantity' - 11 - qty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_165_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity), -1, 1, 1, 1, 1, 0, "u 'TaLabelledQuantity' - 11 - qty", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVal",591,G__TaDict_165_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - qv", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__TaDict_165_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVal",579,G__TaDict_165_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUnits",819,G__TaDict_165_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestFlags",909,G__TaDict_165_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - mask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_165_0_9, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaLabelledQuantity::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_165_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaLabelledQuantity::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_165_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaLabelledQuantity::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_165_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaLabelledQuantity::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_165_0_13, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_165_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_165_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_165_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_165_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaLabelledQuantity::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_165_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaLabelledQuantity::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_165_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaLabelledQuantity::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_165_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaLabelledQuantity::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaLabelledQuantity", 1959, G__TaDict_165_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaOResultsFile(void) {
   /* TaOResultsFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile));
   G__memfunc_setup("TaOResultsFile",1398,G__TaDict_166_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile), -1, 0, 5, 1, 1, 0, 
"u 'string' - 10 - ptag h - 'RunNumber_t' 10 - run "
"u 'string' - 10 - atype h - 'UInt_t' 10 - chksum "
"u 'string' - 10 '\"\"' com", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaOResultsFile",1398,G__TaDict_166_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile), -1, 0, 5, 1, 1, 0, 
"C - - 10 - ptag h - 'RunNumber_t' 10 - run "
"C - - 10 - atype h - 'UInt_t' 10 - chksum "
"C - - 10 '\"\"' com", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaOResultsFile",1398,G__TaDict_166_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile), -1, 0, 3, 1, 1, 0, 
"u 'string' - 10 - ptag C - - 10 - filename "
"h - 'UInt_t' 10 - chksum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteNextLine",1330,G__TaDict_166_0_4, 121, -1, -1, 0, 7, 1, 1, 0, 
"u 'string' - 10 - rtag d - 'Double_t' 10 - res "
"d - 'Double_t' 10 - err h - 'EventNumber_t' 10 - ev0 "
"h - 'EventNumber_t' 10 - ev1 u 'string' - 10 - units "
"u 'string' - 10 - com", "Write a line to the file", (void*) NULL, 0);
   G__memfunc_setup("WriteNextLine",1330,G__TaDict_166_0_5, 121, -1, -1, 0, 7, 1, 1, 0, 
"C - - 10 - rtag d - 'Double_t' 10 - res "
"d - 'Double_t' 10 - err h - 'EventNumber_t' 10 - ev0 "
"h - 'EventNumber_t' 10 - ev1 C - - 10 - units "
"C - - 10 - com", "Write a line to the file", (void*) NULL, 0);
   G__memfunc_setup("TaOResultsFile",1398,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile), -1, 0, 1, 1, 4, 0, "u 'TaOResultsFile' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile), -1, 1, 1, 1, 4, 0, "u 'TaOResultsFile' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"u 'string' - 10 - ptag h - 'RunNumber_t' 10 - run "
"u 'string' - 10 - atype h - 'UInt_t' 10 - chksum "
"u 'string' - 10 - com", "Utility for constructors", (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"u 'string' - 10 - ptag C - - 10 - filename "
"h - 'UInt_t' 10 - chksum", "Util for filename specified constructor", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_166_0_10, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaOResultsFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_166_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaOResultsFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_166_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaOResultsFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_166_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaOResultsFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_166_0_14, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_166_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_166_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_166_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_166_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaOResultsFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_166_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaOResultsFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_166_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaOResultsFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_166_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaOResultsFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaOResultsFile", 1524, G__TaDict_166_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaStatistics(void) {
   /* TaStatistics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaStatistics));
   G__memfunc_setup("TaStatistics",1248,G__TaDict_167_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaStatistics), -1, 0, 2, 1, 1, 0, 
"h - 'size_t' 10 - nquant g - 'Bool_t' 10 'true' goodErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaStatistics",1248,G__TaDict_167_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaStatistics), -1, 0, 1, 1, 1, 0, "u 'TaStatistics' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_167_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaStatistics), -1, 1, 1, 1, 1, 1, "u 'TaStatistics' - 11 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Zero",416,G__TaDict_167_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", "Set sums to zero", (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__TaDict_167_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 11 - x u 'vector<double,allocator<double> >' 'vector<Double_t>' 11 'vector<Double_t>(0)' xerr "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 11 'vector<Double_t>(0)' w", "Add a vector", (void*) NULL, 0);
   G__memfunc_setup("Update",611,G__TaDict_167_0_6, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 10 - x d - 'Double_t' 10 '0' xerr "
"d - 'Double_t' 10 '0' w", "Add a single quantity", (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TaDict_167_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_TaStatistics), -1, 1, 1, 1, 1, 0, "u 'TaStatistics' - 11 - s", "Combine statistics             ", (void*) NULL, 0);
   G__memfunc_setup("N",78,G__TaDict_167_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "number of events in stats", (void*) NULL, 0);
   G__memfunc_setup("Size",411,G__TaDict_167_0_9, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", "size of statistics vector (nquant)", (void*) NULL, 0);
   G__memfunc_setup("DataRMS",620,G__TaDict_167_0_10, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", "vector of RMS of x", (void*) NULL, 0);
   G__memfunc_setup("Mean",385,G__TaDict_167_0_11, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", "vector of means of x", (void*) NULL, 0);
   G__memfunc_setup("MeanVar",682,G__TaDict_167_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", "vector of variances of means of x", (void*) NULL, 0);
   G__memfunc_setup("MeanErr",682,G__TaDict_167_0_13, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", "vector of errors of means of x", (void*) NULL, 0);
   G__memfunc_setup("MeanAndErr",957,G__TaDict_167_0_14, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR), G__defined_typename("vector<pair<Double_t,Double_t> >"), 0, 0, 1, 1, 8, "", "vector of means of x and their errors", (void*) NULL, 0);
   G__memfunc_setup("Neff",383,G__TaDict_167_0_15, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", "effective N for all x", (void*) NULL, 0);
   G__memfunc_setup("DataRMS",620,G__TaDict_167_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "RMS of one x", (void*) NULL, 0);
   G__memfunc_setup("Mean",385,G__TaDict_167_0_17, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "mean of one x", (void*) NULL, 0);
   G__memfunc_setup("MeanVar",682,G__TaDict_167_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "variance of mean of one x", (void*) NULL, 0);
   G__memfunc_setup("MeanErr",682,G__TaDict_167_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "error of mean of one x", (void*) NULL, 0);
   G__memfunc_setup("MeanAndErr",957,G__TaDict_167_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_pairlEdoublecOdoublegR), G__defined_typename("pair<Double_t,Double_t>"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "mean of one x and its error", (void*) NULL, 0);
   G__memfunc_setup("Neff",383,G__TaDict_167_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "effective N for one x", (void*) NULL, 0);
   G__memfunc_setup("SetFirstPass",1227,G__TaDict_167_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", "for multipass analysis", (void*) NULL, 0);
   G__memfunc_setup("DumpSums",830,G__TaDict_167_0_23, 121, -1, -1, 0, 1, 1, 1, 8, "h - 'size_t' 10 - i", "For debugging, print raw sums for one quantity.", (void*) NULL, 0);
   G__memfunc_setup("PDataMS",618,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "h - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMean",465,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "h - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PMeanVar",762,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "h - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PNeff",463,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 4, 8, "h - 'size_t' 10 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_167_0_28, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaStatistics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_167_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStatistics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_167_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaStatistics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_167_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaStatistics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_167_0_32, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_167_0_33, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_167_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_167_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_167_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStatistics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_167_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaStatistics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_167_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStatistics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_167_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaStatistics::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaStatistics", 1374, G__TaDict_167_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaString(void) {
   /* TaString */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaString));
   G__memfunc_setup("TaString",812,G__TaDict_173_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaString",812,G__TaDict_173_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 1, 1, 1, 0, "u 'string' - 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaString",812,G__TaDict_173_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 1, 1, 1, 0, "C - - 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CmpNoCase",857,G__TaDict_173_0_4, 105, -1, -1, 0, 1, 1, 1, 8, "u 'string' - 11 - s", "case insensitive compare", (void*) NULL, 0);
   G__memfunc_setup("Split",524,G__TaDict_173_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<string>"), 0, 1, 1, 1, 8, "h - 'size_t' 0 '0' n", "split on whitespace", (void*) NULL, 0);
   G__memfunc_setup("Hex",293,G__TaDict_173_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "conversion to to unsigned interpreting as hex", (void*) NULL, 0);
   G__memfunc_setup("ToLower",716,G__TaDict_173_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 0, 1, 1, 8, "", "conversion to lower case", (void*) NULL, 0);
   G__memfunc_setup("ToUpper",719,G__TaDict_173_0_8, 117, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 0, 1, 1, 8, "", "conversion to upper case", (void*) NULL, 0);
   G__memfunc_setup("RemoveChar",1004,G__TaDict_173_0_9, 117, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 1, 1, 1, 0, "C - - 10 - toremove", "Remove \"toremove\" ", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_173_0_10, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaString::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_173_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaString::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_173_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaString::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_173_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaString::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_173_0_14, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_173_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_173_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_173_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_173_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaString::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_173_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaString::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_173_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaString::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_173_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaString::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TaString", 812, G__TaDict_173_0_22, (int) ('i'), G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 1, 1, 1, 0, "u 'TaString' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TaString", 938, G__TaDict_173_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TaDict_173_0_24, (int) ('u'), G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 1, 1, 1, 1, 0, "u 'TaString' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR(void) {
   /* vector<string,allocator<string> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__memfunc_setup("at",213,G__TaDict_175_0_1, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "h - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TaDict_175_0_2, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TaDict_175_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TaDict_175_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TaDict_175_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR), G__defined_typename("vector<string,allocator<string> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_175_0_6, 104, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TaDict_175_0_7, 104, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_175_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<string,allocator<string> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_175_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<string,allocator<string> >::size_type' 0 - sz u 'string' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TaDict_175_0_10, 104, -1, G__defined_typename("vector<string,allocator<string> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TaDict_175_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_175_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 0, "h - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__TaDict_175_0_13, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__TaDict_175_0_14, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<string,allocator<string> >::size_type' 0 - n u 'string' - 11 'string()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__TaDict_175_0_15, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<string,allocator<string> >",3266,G__TaDict_175_0_16, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_175_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_175_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<string,allocator<string> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TaDict_175_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TaDict_175_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TaDict_175_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TaDict_175_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_175_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_175_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - first "
"u 'vector<string,allocator<string> >::iterator' 'vector<string,allocator<string> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_175_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - position h - 'vector<string,allocator<string> >::size_type' 0 - n "
"u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TaDict_175_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_175_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_175_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<string,allocator<string> >::iterator' - 0 - first u 'vector<string,allocator<string> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TaDict_175_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<string,allocator<string> >", 3392, G__TaDict_175_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaRun(void) {
   /* TaRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaRun));
   G__memfunc_setup("TaRun",490,G__TaDict_178_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaRun",490,G__TaDict_178_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaRun), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaRun",490,G__TaDict_178_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaRun), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_178_0_4, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' 'vector<string>' 11 - dbcommand", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReInit",587,G__TaDict_178_0_5, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NextEvent",929,G__TaDict_178_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,G__TaDict_178_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AccumEvent",1003,G__TaDict_178_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'VaEvent' - 11 - - g - 'Bool_t' 10 - doSlice "
"g - 'Bool_t' 10 - doRun", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AccumPair",885,G__TaDict_178_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'VaPair' - 11 - - g - 'Bool_t' 10 - doSlice "
"g - 'Bool_t' 10 - doRun", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AccumMultiplet",1449,G__TaDict_178_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TaMultiplet' - 11 - - g - 'Bool_t' 10 - doSlice "
"g - 'Bool_t' 10 - doRun", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PrintSlice",1021,G__TaDict_178_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'EventNumber_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintRun",834,G__TaDict_178_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteRun",832,G__TaDict_178_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateCutList",1323,G__TaDict_178_0_14, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'Cut_t' 10 - - i - 'Int_t' 10 - - "
"h - 'EventNumber_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Finish",609,G__TaDict_178_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCutList",1000,G__TaDict_178_0_16, 117, G__get_linked_tagnum(&G__TaDictLN_TaCutList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOversample",1342,G__TaDict_178_0_17, 104, -1, G__defined_typename("SlotNumber_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRate",684,G__TaDict_178_0_18, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "events per second", (void*) NULL, 0);
   G__memfunc_setup("GetDBValue",931,G__TaDict_178_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'string' - 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvent",802,G__TaDict_178_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__TaDict_178_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataBase",1045,G__TaDict_178_0_22, 117, G__get_linked_tagnum(&G__TaDictLN_TaDataBase), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__TaDict_178_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'string' - 0 - keystr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__TaDict_178_0_24, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevices",995,G__TaDict_178_0_25, 117, G__get_linked_tagnum(&G__TaDictLN_TaDevice), -1, 1, 0, 1, 1, 8, "", "Device map for this run", (void*) NULL, 0);
   G__memfunc_setup("InitRoot",824,G__TaDict_178_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TaRun",490,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaRun), -1, 0, 1, 1, 4, 0, "u 'TaRun' - 11 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaRun), -1, 1, 1, 1, 4, 0, "u 'TaRun' - 11 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Uncreate",823,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBuffer",890,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindRunNumber",1311,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintStats",1052,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 8, 
"u 'TaStatistics' - 11 - s u 'vector<string,allocator<string> >' 'vector<string>' 11 - n "
"u 'vector<string,allocator<string> >' 'vector<string>' 11 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteStats",1050,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 8, 
"u 'TaStatistics' - 11 - s u 'vector<string,allocator<string> >' 'vector<string>' 11 - n "
"u 'vector<string,allocator<string> >' 'vector<string>' 11 - u h - 'EventNumber_t' 10 - ev0 "
"h - 'EventNumber_t' 10 - ev1", "Write stats to results file", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_178_0_34, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_178_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_178_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_178_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_178_0_38, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_178_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_178_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_178_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_178_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_178_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_178_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_178_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaRun::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaRun", 616, G__TaDict_178_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVaAnalysis(void) {
   /* VaAnalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_VaAnalysis));
   G__memfunc_setup("Init",404,G__TaDict_179_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitLastPass",1215,G__TaDict_179_0_3, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "Initialization for last pass", (void*) NULL, 1);
   G__memfunc_setup("RunIni",597,G__TaDict_179_0_4, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RunReIni",780,G__TaDict_179_0_5, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessRun",1044,G__TaDict_179_0_6, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RunFini",699,G__TaDict_179_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,G__TaDict_179_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PairsLeft",906,G__TaDict_179_0_9, 104, -1, G__defined_typename("size_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_VaAnalysis), -1, 1, 1, 1, 2, 0, "u 'VaAnalysis' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PreProcessEvt",1333,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessEvt",1038,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProcessPair",1131,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EventAnalysis",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("PairAnalysis",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("MultipletAnalysis",1796,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewPrePair",989,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitChanLists",1309,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitTree",804,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'TaCutList' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ChanList",790,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR), G__defined_typename("vector<AnaList>"), 0, 4, 1, 2, 0, 
"u 'string' - 11 - devtype u 'string' - 11 - channel "
"u 'string' - 11 - other h - 'UInt_t' 10 '0' flags", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChanListFromName",1579,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR), G__defined_typename("vector<AnaList>"), 0, 3, 1, 2, 0, 
"u 'string' - 11 - chanbase u 'string' - 11 - other "
"h - 'UInt_t' 10 '0' flags", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AutoPairAna",1077,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AutoMultipletAna",1641,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PZTSendEPICS",1020,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - fdbkoption", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SendVoltagePZT",1370,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLastSetPt",1188,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitFeedback",1177,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProceedFeedback",1479,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ProceedLastFeedback",1883,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeData",1111,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i 'EFeedbackType' - 0 - fdbk h - 'UInt_t' 0 - timescale "
"i - 'Int_t' 0 - devicekey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ComputeLastData",1515,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i 'EFeedbackType' - 0 - fdbk h - 'UInt_t' 0 - timescale "
"i - 'Int_t' 0 - devicekey", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SendEPICS",766,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i 'EFeedbackType' - 0 - fdbk i - 'Int_t' 0 - fdbkoption", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WtsOK",472,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 - wts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_179_0_35, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VaAnalysis::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_179_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaAnalysis::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_179_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VaAnalysis::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_179_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VaAnalysis::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_179_0_39, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_179_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_179_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_179_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_179_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaAnalysis::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_179_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaAnalysis::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_179_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaAnalysis::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_179_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaAnalysis::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VaAnalysis", 1145, G__TaDict_179_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaAnalysisManager(void) {
   /* TaAnalysisManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager));
   G__memfunc_setup("TaAnalysisManager",1716,G__TaDict_181_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_181_0_2, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "Initialization with online data", (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_181_0_3, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "h - 'RunNumber_t' 0 - -", "Initialization with run number", (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_181_0_4, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'string' - 0 - -", "Initialization with file path", (void*) NULL, 0);
   G__memfunc_setup("SetDbCommand",1169,G__TaDict_181_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<string,allocator<string> >' 'vector<string>' 0 - dbcommand", "Over-ride database ", (void*) NULL, 0);
   G__memfunc_setup("InitPass2",861,G__TaDict_181_0_6, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "Initialization for second pass", (void*) NULL, 0);
   G__memfunc_setup("InitLastPass",1215,G__TaDict_181_0_7, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "Initialization for last pass", (void*) NULL, 0);
   G__memfunc_setup("Process",735,G__TaDict_181_0_8, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "Process all data", (void*) NULL, 0);
   G__memfunc_setup("EndPass1",735,G__TaDict_181_0_9, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "End first pass analysis", (void*) NULL, 0);
   G__memfunc_setup("End",279,G__TaDict_181_0_10, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 1, 0, "", "End all analysis", (void*) NULL, 0);
   G__memfunc_setup("InitCommon",1021,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 4, 0, "", "Code common to all Init routines", (void*) NULL, 0);
   G__memfunc_setup("TaAnalysisManager",1716,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager), -1, 0, 1, 1, 4, 0, "u 'TaAnalysisManager' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager), -1, 1, 1, 1, 4, 0, "u 'TaAnalysisManager' - 11 - -", "Do not use", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_181_0_14, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaAnalysisManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_181_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaAnalysisManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_181_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaAnalysisManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_181_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaAnalysisManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_181_0_18, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_181_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_181_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_181_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_181_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaAnalysisManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_181_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaAnalysisManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_181_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaAnalysisManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_181_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaAnalysisManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaAnalysisManager", 1842, G__TaDict_181_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaCutList(void) {
   /* TaCutList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutList));
   G__memfunc_setup("TaCutList",893,G__TaDict_502_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutList), -1, 0, 1, 1, 1, 0, "h - 'RunNumber_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaCutList",893,G__TaDict_502_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaCutList",893,G__TaDict_502_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutList), -1, 0, 1, 1, 1, 0, "u 'TaCutList' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_502_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_TaCutList), -1, 1, 1, 1, 1, 0, "u 'TaCutList' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_502_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaDataBase' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OK",154,G__TaDict_502_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'VaEvent' - 11 - -", "True if event not in any cut interval", (void*) NULL, 0);
   G__memfunc_setup("OKC",221,G__TaDict_502_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'VaEvent' - 11 - -", "True if event not in any cut interval (hallC)", (void*) NULL, 0);
   G__memfunc_setup("CutsFailed",996,G__TaDict_502_0_8, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR), G__defined_typename("vector<pair<Cut_t,Int_t> >"), 0, 1, 1, 1, 8, "u 'VaEvent' - 11 - -", "Cuts failed by event", (void*) NULL, 0);
   G__memfunc_setup("UpdateCutInterval",1748,G__TaDict_502_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'Cut_t' 10 - - i - 'Int_t' 10 - - "
"h - 'EventNumber_t' 10 - -", "Update interval for this cut type", (void*) NULL, 0);
   G__memfunc_setup("AddExtension",1222,G__TaDict_502_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'Cut_t' 10 - - h - 'UInt_t' 10 - - "
"h - 'UInt_t' 10 - -", "Add extensions to list", (void*) NULL, 0);
   G__memfunc_setup("AddName",650,G__TaDict_502_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'Cut_t' 10 - - u 'string' - 11 - -", "Add name to list", (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__TaDict_502_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 1, 1, 1, 1, 9, "h - 'Cut_t' 10 - -", "Get name from list", (void*) NULL, 0);
   G__memfunc_setup("PrintInt",824,G__TaDict_502_0_13, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", "Print intervals", (void*) NULL, 0);
   G__memfunc_setup("PrintExt",830,G__TaDict_502_0_14, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", "Print extensions", (void*) NULL, 0);
   G__memfunc_setup("PrintTally",1043,G__TaDict_502_0_15, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ostream<char,char_traits<char> >' 'ostream' 1 - -", "Print tally of events failing cuts", (void*) NULL, 0);
   G__memfunc_setup("WriteTally",1041,G__TaDict_502_0_16, 121, -1, -1, 0, 3, 1, 1, 8, 
"u 'TaOResultsFile' - 1 - resFile h - 'EventNumber_t' 10 - ev0 "
"h - 'EventNumber_t' 10 - ev1", "Write tally to results file", (void*) NULL, 0);
   G__memfunc_setup("GetNumCuts",1007,G__TaDict_502_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Number of cuts defined", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_502_0_18, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaCutList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_502_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_502_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaCutList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_502_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaCutList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_502_0_22, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_502_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_502_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_502_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_502_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_502_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaCutList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_502_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_502_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaCutList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaCutList", 1019, G__TaDict_502_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaMultiplet(void) {
   /* TaMultiplet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaMultiplet));
   G__memfunc_setup("TaMultiplet",1141,G__TaDict_503_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaMultiplet), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 10 '4' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaMultiplet",1141,G__TaDict_503_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaMultiplet), -1, 0, 1, 1, 1, 0, "u 'TaMultiplet' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_503_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaMultiplet), -1, 1, 1, 1, 1, 0, "u 'TaMultiplet' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,G__TaDict_503_0_4, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__TaDict_503_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'VaPair' - 1 - -", "check for multiplet and fill", (void*) NULL, 1);
   G__memfunc_setup("GetPair",684,G__TaDict_503_0_6, 117, G__get_linked_tagnum(&G__TaDictLN_VaPair), -1, 1, 1, 1, 1, 9, "h - 'UInt_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddResult",904,G__TaDict_503_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaLabelledQuantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Full",403,G__TaDict_503_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__TaDict_503_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRightSum",1107,G__TaDict_503_0_10, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeftSum",992,G__TaDict_503_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRightSumSum",1416,G__TaDict_503_0_12, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeftSumSum",1301,G__TaDict_503_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiff",665,G__TaDict_503_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiffSum",974,G__TaDict_503_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvg",574,G__TaDict_503_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgSum",883,G__TaDict_503_0_17, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgN",652,G__TaDict_503_0_18, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgNSum",961,G__TaDict_503_0_19, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsy",589,G__TaDict_503_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyN",667,G__TaDict_503_0_21, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsySum",898,G__TaDict_503_0_22, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyNSum",976,G__TaDict_503_0_23, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyAve",873,G__TaDict_503_0_24, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyNAve",951,G__TaDict_503_0_25, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassedCuts",1023,G__TaDict_503_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "True if neither pair has cut condition", (void*) NULL, 0);
   G__memfunc_setup("PassedCutsInt",1322,G__TaDict_503_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TaCutList' - 11 - cl", "True if neither pair is in cut interval", (void*) NULL, 0);
   G__memfunc_setup("PassedCCutsInt",1389,G__TaDict_503_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TaCutList' - 11 - cl", "True if neither pair is in cut interval (hallC)", (void*) NULL, 0);
   G__memfunc_setup("BeamCut",673,G__TaDict_503_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BeamCCut",740,G__TaDict_503_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResults",1042,G__TaDict_503_0_31, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR), G__defined_typename("vector<TaLabelledQuantity>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_503_0_32, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaMultiplet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_503_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaMultiplet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_503_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaMultiplet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_503_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaMultiplet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_503_0_36, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_503_0_37, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_503_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_503_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_503_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaMultiplet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_503_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaMultiplet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_503_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaMultiplet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_503_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaMultiplet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaMultiplet", 1267, G__TaDict_503_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVaEvent(void) {
   /* VaEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_VaEvent));
   G__memfunc_setup("VaEvent",697,G__TaDict_504_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VaEvent",697,G__TaDict_504_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 0, 1, 1, 1, 0, "u 'VaEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_504_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 1, 1, 1, 0, "u 'VaEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyInPlace",1079,G__TaDict_504_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 1, 1, 1, 0, "u 'VaEvent' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,G__TaDict_504_0_5, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - run", "initialization at start of run ", (void*) NULL, 1);
   G__memfunc_setup("Load",384,G__TaDict_504_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 10 - buffer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Decode",580,G__TaDict_504_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaDevice' - 1 - devices", "decode the event ", (void*) NULL, 1);
   G__memfunc_setup("CheckEvent",992,G__TaDict_504_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaRun' - 1 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddCut",565,G__TaDict_504_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'Cut_t' 10 - - i - 'Int_t' 10 - -", "store cut conditions", (void*) NULL, 0);
   G__memfunc_setup("AddResult",904,G__TaDict_504_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaLabelledQuantity' - 11 - result", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BuffSize",798,G__TaDict_504_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&VaEvent::BuffSize) ), 0);
   G__memfunc_setup("GetMaxEvNumber",1386,G__TaDict_504_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", "Maximum event number", (void*) G__func2void( (Int_t (*)())(&VaEvent::GetMaxEvNumber) ), 0);
   G__memfunc_setup("GetRawData",964,G__TaDict_504_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - index", "raw data, index = location in buffer ", (void*) NULL, 0);
   G__memfunc_setup("GetRawData",964,G__TaDict_504_0_14, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - key u 'TaDevice' - 1 - dev "
"i - 'Int_t' 0 - index", "raw data by key and index", (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_504_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - key", "get data by unique key", (void*) NULL, 0);
   G__memfunc_setup("GetDataSum",975,G__TaDict_504_0_16, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", "get weighted sum of data", (void*) NULL, 0);
   G__memfunc_setup("GetRawADCData",1164,G__TaDict_504_0_17, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - slot i - 'Int_t' 0 - chan", "get raw ADC data in slot and chan.", (void*) NULL, 0);
   G__memfunc_setup("GetCalADCData",1138,G__TaDict_504_0_18, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - slot i - 'Int_t' 0 - chan", "get calib. ADC data in slot and chan.", (void*) NULL, 0);
   G__memfunc_setup("GetScalerData",1268,G__TaDict_504_0_19, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - slot i - 'Int_t' 0 - chan", "get scaler data in slot and chan.", (void*) NULL, 0);
   G__memfunc_setup("CutStatus",944,G__TaDict_504_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "Return true iff event failed one or more cut conditions ", (void*) NULL, 0);
   G__memfunc_setup("BeamCut",673,G__TaDict_504_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "Return true iff event failed low beam cut", (void*) NULL, 0);
   G__memfunc_setup("BeamCCut",740,G__TaDict_504_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "Return true iff event failed low beam C cut", (void*) NULL, 0);
   G__memfunc_setup("GetNCuts",781,G__TaDict_504_0_23, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "Return size of cut array", (void*) NULL, 0);
   G__memfunc_setup("CutCond",688,G__TaDict_504_0_24, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "h - 'Cut_t' 10 - c", "Return value of cut condition c", (void*) NULL, 0);
   G__memfunc_setup("IsPrestartEvent",1555,G__TaDict_504_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "run number available in 'prestart' events.", (void*) NULL, 0);
   G__memfunc_setup("IsPhysicsEvent",1441,G__TaDict_504_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEpicsEvent",1202,G__TaDict_504_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvNumber",1092,G__TaDict_504_0_28, 104, -1, G__defined_typename("EventNumber_t"), 0, 0, 1, 1, 8, "", "event number", (void*) NULL, 0);
   G__memfunc_setup("GetLastPhyEv",1184,G__TaDict_504_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "last physics event num.", (void*) NULL, 0);
   G__memfunc_setup("GetEvLength",1085,G__TaDict_504_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "event length", (void*) NULL, 0);
   G__memfunc_setup("GetEvType",893,G__TaDict_504_0_31, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", "event type", (void*) NULL, 0);
   G__memfunc_setup("GetTimeSlot",1105,G__TaDict_504_0_32, 104, -1, G__defined_typename("SlotNumber_t"), 0, 0, 1, 1, 8, "", "time slot", (void*) NULL, 0);
   G__memfunc_setup("SetHelicity",1127,G__TaDict_504_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "i 'EHelicity' - 0 - -", "set true helicity", (void*) NULL, 0);
   G__memfunc_setup("GetROHelicity",1276,G__TaDict_504_0_34, 105, G__get_linked_tagnum(&G__TaDictLN_EHelicity), -1, 0, 0, 1, 1, 8, "", "readout helicity", (void*) NULL, 0);
   G__memfunc_setup("GetHelicity",1115,G__TaDict_504_0_35, 105, G__get_linked_tagnum(&G__TaDictLN_EHelicity), -1, 0, 0, 1, 1, 8, "", "true helicity", (void*) NULL, 0);
   G__memfunc_setup("SetPrevROHelicity",1701,G__TaDict_504_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "i 'EHelicity' - 0 - h", "set readout helicity of prev evt", (void*) NULL, 0);
   G__memfunc_setup("SetPrevHelicity",1540,G__TaDict_504_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "i 'EHelicity' - 0 - h", "set true helicity of prev evt", (void*) NULL, 0);
   G__memfunc_setup("GetPrevROHelicity",1689,G__TaDict_504_0_38, 105, G__get_linked_tagnum(&G__TaDictLN_EHelicity), -1, 0, 0, 1, 1, 8, "", "get readout helicity of prev evt", (void*) NULL, 0);
   G__memfunc_setup("GetPrevHelicity",1528,G__TaDict_504_0_39, 105, G__get_linked_tagnum(&G__TaDictLN_EHelicity), -1, 0, 0, 1, 1, 8, "", "get true helicity of prev evt", (void*) NULL, 0);
   G__memfunc_setup("GetPairSynch",1201,G__TaDict_504_0_40, 105, G__get_linked_tagnum(&G__TaDictLN_EPairSynch), -1, 0, 0, 1, 1, 8, "", "pair synch", (void*) NULL, 0);
   G__memfunc_setup("GetMultipletSynch",1765,G__TaDict_504_0_41, 105, G__get_linked_tagnum(&G__TaDictLN_EMultipletSynch), -1, 0, 0, 1, 1, 8, "", "multiplet synch", (void*) NULL, 0);
   G__memfunc_setup("GetResults",1042,G__TaDict_504_0_42, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR), G__defined_typename("vector<TaLabelledQuantity>"), 1, 0, 1, 1, 9, "", "results for event", (void*) NULL, 0);
   G__memfunc_setup("RawDump",704,G__TaDict_504_0_43, 121, -1, -1, 0, 0, 1, 1, 8, "", "dump raw data for debugging.", (void*) NULL, 0);
   G__memfunc_setup("RawPrevDump",1117,G__TaDict_504_0_44, 121, -1, -1, 0, 0, 1, 1, 8, "", "dump raw data of previous event", (void*) NULL, 0);
   G__memfunc_setup("DeviceDump",998,G__TaDict_504_0_45, 121, -1, -1, 0, 0, 1, 1, 8, "", "dump device data for debugging.", (void*) NULL, 0);
   G__memfunc_setup("MiniDump",803,G__TaDict_504_0_46, 121, -1, -1, 0, 0, 1, 1, 8, "", "dump of selected data on one line", (void*) NULL, 0);
   G__memfunc_setup("AddToTree",860,G__TaDict_504_0_47, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TaDevice' - 1 - dev u 'TaCutList' - 11 - cutlist "
"u 'TTree' - 1 - tree", "Add data to root Tree", (void*) NULL, 0);
   G__memfunc_setup("SetCalib",775,G__TaDict_504_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'VaEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Uncreate",823,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Idx",293,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rotate",623,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 4, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"i - 'Int_t' 0 - xy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DecodeCook",976,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TaDevice' - 1 - devices", "Called by AddToTree", (void*) NULL, 0);
   G__memfunc_setup("DecodeCrates",1190,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'TaDevice' - 1 - devices", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalibDecode",1055,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TaDevice' - 1 - devices", "Called if indicated in database", (void*) NULL, 0);
   G__memfunc_setup("UnpackAdcx",994,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - rawd i - 'Int_t' 0 - key", "Unpack and check ADCX data", (void*) NULL, 0);
   G__memfunc_setup("UnpackVqwk",1035,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"h - 'UInt_t' 0 - rawd i - 'Int_t' 0 - key", "Unpack VQWK data", (void*) NULL, 0);
   G__memfunc_setup("FindEventPhase",1396,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"i - 'Int_t' 0 - key u 'TaDevice' - 1 - devices", "For synching PVDIS and HAPPEX data.", (void*) NULL, 0);
   G__memfunc_setup("CheckPvdisCrates",1606,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", "to check PVDIS crates.", (void*) NULL, 0);
   G__memfunc_setup("CheckAdcxDacBurp",1535,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "To check if any ADCX base had a burp in its DAC.", (void*) NULL, 0);
   G__memfunc_setup("CheckAdcxBad",1125,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", "To check for ADCX bad flags", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_504_0_62, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VaEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_504_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_504_0_64, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VaEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_504_0_65, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VaEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_504_0_66, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_504_0_67, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_504_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_504_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_504_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_504_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_504_0_72, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_504_0_73, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VaEvent", 823, G__TaDict_504_0_74, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVaPair(void) {
   /* VaPair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_VaPair));
   G__memfunc_setup("VaPair",579,G__TaDict_505_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_VaPair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("VaPair",579,G__TaDict_505_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_VaPair), -1, 0, 1, 1, 1, 0, "u 'VaPair' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_505_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_VaPair), -1, 1, 1, 1, 1, 0, "u 'VaPair' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,G__TaDict_505_0_4, 105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fill",391,G__TaDict_505_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'VaEvent' - 1 - - u 'TaRun' - 1 - -", "check for pair and fill", (void*) NULL, 1);
   G__memfunc_setup("GetRight",798,G__TaDict_505_0_6, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLeft",683,G__TaDict_505_0_7, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFirst",808,G__TaDict_505_0_8, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSecond",892,G__TaDict_505_0_9, 117, G__get_linked_tagnum(&G__TaDictLN_VaEvent), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("QueuePrint",1042,G__TaDict_505_0_10, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddResult",904,G__TaDict_505_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaLabelledQuantity' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiff",665,G__TaDict_505_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDiffSum",974,G__TaDict_505_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvg",574,G__TaDict_505_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgSum",883,G__TaDict_505_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgN",652,G__TaDict_505_0_16, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAvgNSum",961,G__TaDict_505_0_17, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsy",589,G__TaDict_505_0_18, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyN",667,G__TaDict_505_0_19, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsySum",898,G__TaDict_505_0_20, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyNSum",976,G__TaDict_505_0_21, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyAve",873,G__TaDict_505_0_22, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAsyNAve",951,G__TaDict_505_0_23, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"u 'vector<int,allocator<int> >' 'vector<Int_t>' 0 - - i - 'Int_t' 0 - - "
"u 'vector<double,allocator<double> >' 'vector<Double_t>' 0 'vector<Double_t>(0)' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PassedCuts",1023,G__TaDict_505_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", "True if neither event has cut condition", (void*) NULL, 0);
   G__memfunc_setup("PassedCutsInt",1322,G__TaDict_505_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TaCutList' - 11 - cl", "True if neither event is in cut interval", (void*) NULL, 0);
   G__memfunc_setup("PassedCCutsInt",1389,G__TaDict_505_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TaCutList' - 11 - cl", "True if neither event is in cut interval (hallC)", (void*) NULL, 0);
   G__memfunc_setup("BeamCut",673,G__TaDict_505_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BeamCCut",740,G__TaDict_505_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetResults",1042,G__TaDict_505_0_29, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR), G__defined_typename("vector<TaLabelledQuantity>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSequence",1303,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'VaEvent' - 1 - - u 'TaRun' - 1 - -", "look for helicity/synch errors", (void*) NULL, 1);
   G__memfunc_setup("RanBit",576,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RanBitOld",863,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RanBit24",678,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RanBit30",675,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HelSeqOK",732,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "i 'EHelicity' - 0 - h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RanBitNew30",973,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_505_0_37, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&VaPair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_505_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaPair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_505_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&VaPair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_505_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&VaPair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_505_0_41, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_505_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_505_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_505_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_505_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaPair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_505_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaPair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_505_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&VaPair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_505_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&VaPair::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~VaPair", 705, G__TaDict_505_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("at",213,G__TaDict_507_0_1, 105, -1, -1, 1, 1, 1, 1, 0, "h - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TaDict_507_0_2, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TaDict_507_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TaDict_507_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TaDict_507_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_507_0_6, 104, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TaDict_507_0_7, 104, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_507_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<int,allocator<int> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_507_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<int,allocator<int> >::size_type' 0 - sz i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TaDict_507_0_10, 104, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TaDict_507_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_507_0_12, 105, -1, -1, 1, 1, 1, 1, 0, "h - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__TaDict_507_0_13, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__TaDict_507_0_14, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__TaDict_507_0_15, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__TaDict_507_0_16, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_507_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_507_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TaDict_507_0_19, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TaDict_507_0_20, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TaDict_507_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TaDict_507_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_507_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_507_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first "
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_507_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position h - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TaDict_507_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_507_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_507_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - first u 'vector<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TaDict_507_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >", 2728, G__TaDict_507_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaStandardAna(void) {
   /* TaStandardAna */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaStandardAna));
   G__memfunc_setup("TaStandardAna",1270,G__TaDict_522_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaStandardAna), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaStandardAna",1270,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaStandardAna), -1, 0, 1, 1, 4, 0, "u 'TaStandardAna' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaStandardAna), -1, 1, 1, 1, 4, 0, "u 'TaStandardAna' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventAnalysis",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PairAnalysis",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MultipletAnalysis",1796,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitChanLists",1309,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_522_0_8, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaStandardAna::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_522_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStandardAna::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_522_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaStandardAna::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_522_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaStandardAna::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_522_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_522_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStandardAna::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_522_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaStandardAna::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_522_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaStandardAna::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_522_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaStandardAna::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaStandardAna", 1396, G__TaDict_522_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaDebugAna(void) {
   /* TaDebugAna */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna));
   G__memfunc_setup("TaDebugAna",940,G__TaDict_523_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaDebugAna), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventAnalysis",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_523_0_3, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaDebugAna::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_523_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDebugAna::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_523_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaDebugAna::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_523_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaDebugAna::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_523_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_523_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDebugAna::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_523_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDebugAna::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_523_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDebugAna::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_523_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDebugAna::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaDebugAna", 1066, G__TaDict_523_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaRootRep(void) {
   /* TaRootRep */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaRootRep));
   G__memfunc_setup("TaRootRep",896,G__TaDict_557_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaRootRep), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__TaDict_557_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNum",913,G__TaDict_557_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNum",901,G__TaDict_557_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAnaTDatime",1252,G__TaDict_557_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TDatime' - 0 - datime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAnaTDatime",1240,G__TaDict_557_0_6, 85, G__get_linked_tagnum(&G__TaDictLN_TDatime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Put",313,G__TaDict_557_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - tline", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NextLine",807,G__TaDict_557_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__TaDict_557_0_9, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TaDict_557_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_557_0_11, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaRootRep::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_557_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRootRep::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_557_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaRootRep::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_557_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaRootRep::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_557_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_557_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRootRep::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_557_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaRootRep::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_557_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaRootRep::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_557_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaRootRep::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TaRootRep", 896, G__TaDict_557_0_23, (int) ('i'), G__get_linked_tagnum(&G__TaDictLN_TaRootRep), -1, 0, 1, 1, 1, 0, "u 'TaRootRep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TaRootRep", 1022, G__TaDict_557_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TaDict_557_0_25, (int) ('u'), G__get_linked_tagnum(&G__TaDictLN_TaRootRep), -1, 1, 1, 1, 1, 0, "u 'TaRootRep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaDataBase(void) {
   /* TaDataBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaDataBase));
   G__memfunc_setup("TaDataBase",938,G__TaDict_566_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaDataBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__TaDict_566_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - run u 'vector<string,allocator<string> >' 'vector<string>' 11 - dbcommand", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,G__TaDict_566_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", "Write database for this run (to ASCII and MYSQL)", (void*) NULL, 0);
   G__memfunc_setup("ReadRoot",800,G__TaDict_566_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaString' - 0 - filename", "Read database from ROOT file", (void*) NULL, 0);
   G__memfunc_setup("WriteRoot",943,G__TaDict_566_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "Write database to the opened ROOT output.", (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TaDict_566_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "Human readable printout (for end-run summary)", (void*) NULL, 0);
   G__memfunc_setup("SelfCheck",872,G__TaDict_566_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Checkout",822,G__TaDict_566_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", "Debug checkout ", (void*) NULL, 0);
   G__memfunc_setup("PrintDataBase",1282,G__TaDict_566_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", "Debug printout of entire database", (void*) NULL, 0);
   G__memfunc_setup("PrintDataMap",1189,G__TaDict_566_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", "Debug printout of datamap", (void*) NULL, 0);
   G__memfunc_setup("GetRunNum",901,G__TaDict_566_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAnaType",978,G__TaDict_566_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAnaTDatime",1240,G__TaDict_566_0_13, 85, G__get_linked_tagnum(&G__TaDictLN_TDatime), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSimulationType",1767,G__TaDict_566_0_14, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimestamp",1236,G__TaDict_566_0_15, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeTString",1402,G__TaDict_566_0_16, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 0, 0, 1, 1, 8, "", "same, but TString", (void*) NULL, 0);
   G__memfunc_setup("GetTimeTDatime",1367,G__TaDict_566_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_TDatime), -1, 0, 0, 1, 1, 8, "", "same, but TDatime", (void*) NULL, 0);
   G__memfunc_setup("GetRandomHeli",1283,G__TaDict_566_0_18, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlindingString",1726,G__TaDict_566_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlindingParams",1707,G__TaDict_566_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFdbkSwitch",1289,G__TaDict_566_0_21, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - fdbktype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFdbkTimeScale",1550,G__TaDict_566_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - fdbktype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFdbkMonitor",1407,G__TaDict_566_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - fdbktype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDacNoise",1062,G__TaDict_566_0_24, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 11 - adc i - 'Int_t' 11 - chan "
"u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcPed",833,G__TaDict_566_0_25, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - adc i - 'Int_t' 11 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDacxNoise",1182,G__TaDict_566_0_26, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 8, 
"i - 'Int_t' 11 - adcx i - 'Int_t' 11 - chan "
"u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAdcxPed",953,G__TaDict_566_0_27, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - adcx i - 'Int_t' 11 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVqwkPed",994,G__TaDict_566_0_28, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - vqwk i - 'Int_t' 11 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScalPed",956,G__TaDict_566_0_29, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - adc i - 'Int_t' 11 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHeader",873,G__TaDict_566_0_30, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - device", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMask",684,G__TaDict_566_0_31, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - device", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_566_0_32, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "U 'dtype' - 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_566_0_33, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 3, 1, 1, 8, 
"u 'string' - 0 - table u 'string' - 0 - key "
"i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DataMapReStart",1373,G__TaDict_566_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NextDataMap",1079,G__TaDict_566_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataMapName",1337,G__TaDict_566_0_36, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataMapType",1370,G__TaDict_566_0_37, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKeyMap",871,G__TaDict_566_0_38, 117, G__get_linked_tagnum(&G__TaDictLN_TaKeyMap), -1, 0, 1, 1, 1, 8, "u 'string' - 0 - device", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCompress",1132,G__TaDict_566_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxEvents",1211,G__TaDict_566_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDelay",783,G__TaDict_566_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverSamp",1101,G__TaDict_566_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPairType",1102,G__TaDict_566_0_43, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", "returns 'pair' or 'quad' or 'octet', etc.", (void*) NULL, 0);
   G__memfunc_setup("GetCurMon",884,G__TaDict_566_0_44, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", "returns 'bcm1', etc.", (void*) NULL, 0);
   G__memfunc_setup("GetCurMonC",951,G__TaDict_566_0_45, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 0, 1, 1, 8, "", "returns 'bcm10', etc.", (void*) NULL, 0);
   G__memfunc_setup("GetCalVar",857,G__TaDict_566_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutValue",1097,G__TaDict_566_0_47, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - cutname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutValueDVector",1792,G__TaDict_566_0_48, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 1, 1, 1, 8, "u 'string' - 11 - cutname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumCuts",1007,G__TaDict_566_0_49, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutNames",1088,G__TaDict_566_0_50, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrees",803,G__TaDict_566_0_51, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<string>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFillDitherOnly",1705,G__TaDict_566_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtLo",780,G__TaDict_566_0_53, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExtHi",770,G__TaDict_566_0_54, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetWts",891,G__TaDict_566_0_55, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBlumiWts",1111,G__TaDict_566_0_56, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFlumiWts",1115,G__TaDict_566_0_57, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumBadEv",1042,G__TaDict_566_0_58, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutInt",887,G__TaDict_566_0_59, 117, G__get_linked_tagnum(&G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,vector<Int_t> >"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_566_0_60, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 2, 1, 1, 8, 
"u 'string' - 0 - table u 'vector<string,allocator<string> >' 'vector<string>' 0 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_566_0_61, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValue",797,G__TaDict_566_0_62, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValueVector",1424,G__TaDict_566_0_63, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 0, 1, 1, 1, 8, "u 'string' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValueDVector",1492,G__TaDict_566_0_64, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 1, 1, 1, 8, "u 'string' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetString",919,G__TaDict_566_0_65, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCutNumber",1205,G__TaDict_566_0_66, 104, -1, G__defined_typename("Cut_t"), 0, 1, 1, 1, 8, "u 'TaString' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeUsed",1089,G__TaDict_566_0_67, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TaString' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCksum",803,G__TaDict_566_0_68, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQpd1Const",1149,G__TaDict_566_0_69, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLina1Const",1244,G__TaDict_566_0_70, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringVect",1321,G__TaDict_566_0_71, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR), G__defined_typename("vector<TaString>"), 0, 1, 1, 1, 8, "u 'string' - 11 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEpicsKeys",1200,G__TaDict_566_0_72, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR), G__defined_typename("vector<TaString>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCavConst1",1138,G__TaDict_566_0_73, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCavConst2",1139,G__TaDict_566_0_74, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCavConst3",1140,G__TaDict_566_0_75, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<Double_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutDacNoise",1087,G__TaDict_566_0_76, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - adc i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - slope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutAdcPed",858,G__TaDict_566_0_77, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - adc i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutDacxNoise",1207,G__TaDict_566_0_78, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - adcx i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - slope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutAdcxPed",978,G__TaDict_566_0_79, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - adcx i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutVqwkPed",1019,G__TaDict_566_0_80, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - vqwk i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutScalPed",981,G__TaDict_566_0_81, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - scal i - 'Int_t' 11 - chan "
"d - 'Double_t' 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PutCutInt",912,G__TaDict_566_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' 'vector<Int_t>' 10 - evint", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitDB",538,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChkDbCommand",1147,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDbCommand",1169,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadTable",872,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'string' - 0 - table u 'vector<dtype*,allocator<dtype*> >' 'vector<dtype*>' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindTable",873,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 4, 0, "u 'string' - 0 - table", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitDataMap",1068,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StripRotate",1153,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 4, 0, "u 'string' - 10 - long_devname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RotateState",1136,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'string' - 10 - long_devname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFirstKey",1202,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"u 'string' - 11 - sb u 'string' - 11 - sc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mysql",534,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 0 - action", "MYSQL interface (action = \"read\", \"write\")", (void*) NULL, 0);
   G__memfunc_setup("PutData",691,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'string' - 0 - table u 'vector<dtype*,allocator<dtype*> >' 'vector<dtype*>' 0 - dvect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToRoot",615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadCksum",899,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'string' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaDataBase",938,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaDataBase), -1, 0, 1, 1, 4, 0, "u 'TaDataBase' - 11 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaDataBase), -1, 1, 1, 1, 4, 0, "u 'TaDataBase' - 11 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_566_0_98, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaDataBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_566_0_99, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDataBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_566_0_100, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaDataBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_566_0_101, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaDataBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_566_0_102, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_566_0_103, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_566_0_104, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_566_0_105, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_566_0_106, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDataBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_566_0_107, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDataBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_566_0_108, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDataBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_566_0_109, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDataBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaDataBase", 1064, G__TaDict_566_0_110, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaDevice(void) {
   /* TaDevice */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaDevice));
   G__memfunc_setup("TaDevice",773,G__TaDict_623_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaDevice), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaDevice",773,G__TaDict_623_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaDevice), -1, 0, 1, 1, 1, 0, "u 'TaDevice' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_623_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaDevice), -1, 1, 1, 1, 1, 0, "u 'TaDevice' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__TaDict_623_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "u 'string' - 0 - keystr", "Get key int corresp. to key string", (void*) NULL, 0);
   G__memfunc_setup("GetKey",585,G__TaDict_623_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - key", "inverse map ", (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_623_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TaDataBase' - 1 - db", "Initalize from database", (void*) NULL, 0);
   G__memfunc_setup("GetNumRaw",890,G__TaDict_623_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawKey",883,G__TaDict_623_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEvPointer",1212,G__TaDict_623_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCrate",783,G__TaDict_623_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__TaDict_623_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindHeaders",1085,G__TaDict_623_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 11 - roc i - 'Int_t' 11 - ipt "
"i - 'Int_t' 11 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintHeaders",1225,G__TaDict_623_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__TaDict_623_0_14, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDacSlope",1067,G__TaDict_623_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDacSlopeA",1132,G__TaDict_623_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDevNum",879,G__TaDict_623_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChanNum",970,G__TaDict_623_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRawIndex",1090,G__TaDict_623_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalIndex",1064,G__TaDict_623_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCorrIndex",1198,G__TaDict_623_0_21, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumPvdisDev",1397,G__TaDict_623_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPvdisDev",1093,G__TaDict_623_0_23, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPvdisDKey",1463,G__TaDict_623_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPvdisDKey",1465,G__TaDict_623_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMinPvdisPKey",1475,G__TaDict_623_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxPvdisPKey",1477,G__TaDict_623_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVqwkHeader",1298,G__TaDict_623_0_28, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", "necessary for problematic VQWK and ROC 31", (void*) NULL, 0);
   G__memfunc_setup("GetTirHeader",1176,G__TaDict_623_0_29, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", "necessary for problematic ROC 31", (void*) NULL, 0);
   G__memfunc_setup("IsUsed",589,G__TaDict_623_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsRotated",911,G__TaDict_623_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAdc",452,G__TaDict_623_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsAdcx",572,G__TaDict_623_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsVqwk",613,G__TaDict_623_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsScaler",790,G__TaDict_623_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTimeboard",1107,G__TaDict_623_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsTir",491,G__TaDict_623_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDaqFlag",844,G__TaDict_623_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUsed",701,G__TaDict_623_0_39, 121, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 11 - key", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetKeyList",997,G__TaDict_623_0_40, 117, G__get_linked_tagnum(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR), G__defined_typename("map<string,Int_t>"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitKeyList",1113,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitPvdisList",1334,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRawKey",860,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'string' - 0 - keyname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTiedDevices",1362,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'TaKeyMap' - 1 - keymap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BpmDefRotate",1181,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TaDevice' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Uncreate",823,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_623_0_48, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaDevice::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_623_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDevice::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_623_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaDevice::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_623_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaDevice::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_623_0_52, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_623_0_53, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_623_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_623_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_623_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDevice::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_623_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDevice::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_623_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaDevice::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_623_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaDevice::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaDevice", 899, G__TaDict_623_0_60, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaCutInterval(void) {
   /* TaCutInterval */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutInterval));
   G__memfunc_setup("TaCutInterval",1318,G__TaDict_632_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutInterval), -1, 0, 4, 1, 1, 0, 
"h - 'Cut_t' 10 - cu i - 'Int_t' 10 - val "
"h - 'EventNumber_t' 10 - e0 h - 'EventNumber_t' 10 - e1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaCutInterval",1318,G__TaDict_632_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutInterval), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaCutInterval",1318,G__TaDict_632_0_3, 105, G__get_linked_tagnum(&G__TaDictLN_TaCutInterval), -1, 0, 1, 1, 1, 0, "u 'TaCutInterval' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_632_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_TaCutInterval), -1, 1, 1, 1, 1, 0, "u 'TaCutInterval' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Inside",604,G__TaDict_632_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"u 'VaEvent' - 11 - ev h - 'UInt_t' 10 - lex "
"h - 'UInt_t' 10 - hex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnd",579,G__TaDict_632_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'EventNumber_t' 10 - e1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCut",588,G__TaDict_632_0_7, 104, -1, G__defined_typename("Cut_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVal",579,G__TaDict_632_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_632_0_9, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaCutInterval::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_632_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutInterval::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_632_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaCutInterval::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_632_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaCutInterval::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_632_0_13, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_632_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_632_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_632_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_632_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutInterval::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_632_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaCutInterval::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_632_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaCutInterval::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_632_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaCutInterval::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaCutInterval", 1444, G__TaDict_632_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaEvent(void) {
   /* TaEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaEvent));
   G__memfunc_setup("TaEvent",695,G__TaDict_666_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaEvent",695,G__TaDict_666_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaEvent), -1, 0, 1, 1, 1, 0, "u 'TaEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_666_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaEvent), -1, 1, 1, 1, 1, 0, "u 'TaEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyInPlace",1079,G__TaDict_666_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_TaEvent), -1, 1, 1, 1, 1, 0, "u 'TaEvent' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - run", "initialization at start of run", (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TaDevice' - 1 - devices", "decode the event ", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_666_0_7, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_666_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_666_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_666_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_666_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_666_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_666_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_666_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_666_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaEvent", 821, G__TaDict_666_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaSimEvent(void) {
   /* TaSimEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaSimEvent));
   G__memfunc_setup("TaSimEvent",992,G__TaDict_668_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaSimEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaSimEvent",992,G__TaDict_668_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaSimEvent), -1, 0, 1, 1, 1, 0, "u 'TaSimEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_668_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaSimEvent), -1, 1, 1, 1, 1, 0, "u 'TaSimEvent' - 11 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyInPlace",1079,G__TaDict_668_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_TaSimEvent), -1, 1, 1, 1, 1, 0, "u 'TaSimEvent' - 11 - rhs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - run", "initialization at start of run", (void*) NULL, 1);
   G__memfunc_setup("Decode",580,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TaDevice' - 1 - devices", "decode the event ", (void*) NULL, 1);
   G__memfunc_setup("Create",596,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TaSimEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSimConstants",1554,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RanBit",576,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RanBitOld",863,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RanBit24",678,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RanBit30",675,(G__InterfaceMethod) NULL, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 '2' hRead", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_668_0_13, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaSimEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_668_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaSimEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_668_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaSimEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_668_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaSimEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_668_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_668_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaSimEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_668_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaSimEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_668_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaSimEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_668_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaSimEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaSimEvent", 1118, G__TaDict_668_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaEpics(void) {
   /* TaEpics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaEpics));
   G__memfunc_setup("TaEpics",681,G__TaDict_681_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaEpics), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__TaDict_681_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TaDataBase' - 11 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__TaDict_681_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"C - - 10 - tag i - - 0 '0' event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetString",919,G__TaDict_681_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_string), -1, 0, 2, 1, 1, 8, 
"C - - 10 - tag i - - 0 '0' event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimeStamp",1204,G__TaDict_681_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 8, 
"C - - 10 - tag i - - 0 '0' event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Process",735,G__TaDict_681_0_6, 105, -1, -1, 0, 1, 1, 1, 0, "u 'VaEvent' - 11 - event", "process an event.", (void*) NULL, 0);
   G__memfunc_setup("LoadData",762,G__TaDict_681_0_7, 105, -1, -1, 0, 2, 1, 1, 0, 
"I - - 10 - evbuffer i - - 0 '0' event", "load a raw data buffer", (void*) NULL, 0);
   G__memfunc_setup("AddToTree",860,G__TaDict_681_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TTree' - 1 - tree", "Add data to root Tree", (void*) NULL, 0);
   G__memfunc_setup("IsLoaded",773,G__TaDict_681_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - - 10 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,G__TaDict_681_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaEpics",681,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaEpics), -1, 0, 1, 1, 4, 0, "u 'TaEpics' - 11 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaEpics), -1, 1, 1, 1, 4, 0, "u 'TaEpics' - 11 - ep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChan",666,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR), G__defined_typename("vector<EpicsChan>"), 0, 1, 1, 4, 8, "C - - 10 - tag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanEpicsName",1368,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaString), -1, 0, 1, 1, 4, 8, "u 'TaString' - 1 - input", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindEvent",899,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 8, 
"u 'vector<EpicsChan,allocator<EpicsChan> >' 'vector<EpicsChan>' 10 - ep i - - 0 '0' event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TaDict_681_0_16, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaEpics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_681_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEpics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_681_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaEpics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_681_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaEpics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__TaDict_681_0_20, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__TaDict_681_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__TaDict_681_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_681_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_681_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEpics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_681_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaEpics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_681_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaEpics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_681_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaEpics::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaEpics", 807, G__TaDict_681_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaPairFromOctet(void) {
   /* TaPairFromOctet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet));
   G__memfunc_setup("TaPairFromOctet",1492,G__TaDict_693_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaPairFromOctet",1492,G__TaDict_693_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet), -1, 0, 1, 1, 1, 0, "u 'TaPairFromOctet' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_693_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet), -1, 1, 1, 1, 1, 0, "u 'TaPairFromOctet' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckSequence",1303,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'VaEvent' - 1 - - u 'TaRun' - 1 - -", "look for helicity/synch errors", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_693_0_6, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaPairFromOctet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_693_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromOctet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_693_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaPairFromOctet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_693_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaPairFromOctet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_693_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_693_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromOctet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_693_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromOctet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_693_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromOctet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_693_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromOctet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaPairFromOctet", 1618, G__TaDict_693_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaPairFromPair(void) {
   /* TaPairFromPair */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair));
   G__memfunc_setup("TaPairFromPair",1377,G__TaDict_694_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaPairFromPair",1377,G__TaDict_694_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair), -1, 0, 1, 1, 1, 0, "u 'TaPairFromPair' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_694_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair), -1, 1, 1, 1, 1, 0, "u 'TaPairFromPair' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckSequence",1303,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'VaEvent' - 1 - - u 'TaRun' - 1 - -", "look for helicity/synch errors", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_694_0_5, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaPairFromPair::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_694_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromPair::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_694_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaPairFromPair::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_694_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaPairFromPair::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_694_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_694_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromPair::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_694_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromPair::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_694_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromPair::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_694_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromPair::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaPairFromPair", 1503, G__TaDict_694_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaPairFromQuad(void) {
   /* TaPairFromQuad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad));
   G__memfunc_setup("TaPairFromQuad",1376,G__TaDict_695_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaPairFromQuad",1376,G__TaDict_695_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad), -1, 0, 1, 1, 1, 0, "u 'TaPairFromQuad' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_695_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad), -1, 1, 1, 1, 1, 0, "u 'TaPairFromQuad' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RunInit",713,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("ErrCode_t"), 0, 1, 1, 1, 0, "u 'TaRun' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckSequence",1303,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'VaEvent' - 1 - - u 'TaRun' - 1 - -", "look for helicity/synch errors", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_695_0_6, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaPairFromQuad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_695_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromQuad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_695_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaPairFromQuad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_695_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaPairFromQuad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_695_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_695_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromQuad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_695_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromQuad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_695_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaPairFromQuad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_695_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaPairFromQuad::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaPairFromQuad", 1502, G__TaDict_695_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaFeedbackAna(void) {
   /* TaFeedbackAna */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna));
   G__memfunc_setup("TaFeedbackAna",1226,G__TaDict_697_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaFeedbackAna",1226,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna), -1, 0, 1, 1, 4, 0, "u 'TaFeedbackAna' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna), -1, 1, 1, 1, 4, 0, "u 'TaFeedbackAna' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventAnalysis",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PairAnalysis",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitChanLists",1309,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_697_0_7, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaFeedbackAna::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_697_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFeedbackAna::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_697_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaFeedbackAna::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_697_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaFeedbackAna::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_697_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_697_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFeedbackAna::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_697_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaFeedbackAna::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_697_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaFeedbackAna::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_697_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaFeedbackAna::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaFeedbackAna", 1352, G__TaDict_697_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTaADCCalib(void) {
   /* TaADCCalib */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_TaADCCalib));
   G__memfunc_setup("TaADCCalib",856,G__TaDict_723_0_1, 105, G__get_linked_tagnum(&G__TaDictLN_TaADCCalib), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaADCCalib",856,G__TaDict_723_0_2, 105, G__get_linked_tagnum(&G__TaDictLN_TaADCCalib), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - anName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TaADCCalib",856,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__TaDictLN_TaADCCalib), -1, 0, 1, 1, 4, 0, "u 'TaADCCalib' - 11 - copy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TaDictLN_TaADCCalib), -1, 1, 1, 1, 4, 0, "u 'TaADCCalib' - 11 - assign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "g - 'Bool_t' 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitPed",685,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitDAC",604,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessRun",1044,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("ErrCode_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinishPed",890,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FinishDAC",809,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventAnalysis",1350,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PairAnalysis",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitChanLists",1309,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TaDict_723_0_15, 85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TaADCCalib::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TaDict_723_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaADCCalib::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TaDict_723_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TaADCCalib::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TaDict_723_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TaADCCalib::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TaDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TaDict_723_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TaDict_723_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaADCCalib::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TaDict_723_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaADCCalib::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TaDict_723_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TaADCCalib::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TaDict_723_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TaADCCalib::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TaADCCalib", 982, G__TaDict_723_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR(void) {
   /* vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__TaDict_725_0_1, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TaDict_725_0_2, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TaDict_725_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TaDict_725_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TaDict_725_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_725_0_6, 104, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TaDict_725_0_7, 104, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_725_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_725_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - sz u 'vector<int,allocator<int> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TaDict_725_0_10, 104, -1, G__defined_typename("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TaDict_725_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_725_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__TaDict_725_0_13, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__TaDict_725_0_14, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n u 'vector<int,allocator<int> >' - 11 '(vector<int,allocator<int> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__TaDict_725_0_15, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >",7176,G__TaDict_725_0_16, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_725_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_725_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TaDict_725_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TaDict_725_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TaDict_725_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TaDict_725_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_725_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_725_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - first "
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_725_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position h - 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::size_type' 0 - n "
"u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TaDict_725_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_725_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_725_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - first u 'vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TaDict_725_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >", 7302, G__TaDict_725_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR(void) {
   /* vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("at",213,G__TaDict_729_0_1, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TaDict_729_0_2, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TaDict_729_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TaDict_729_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TaDict_729_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_729_0_6, 104, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TaDict_729_0_7, 104, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_729_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_729_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - sz u 'vector<double,allocator<double> >' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TaDict_729_0_10, 104, -1, G__defined_typename("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TaDict_729_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_729_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__TaDict_729_0_13, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__TaDict_729_0_14, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n u 'vector<double,allocator<double> >' - 11 '(vector<double,allocator<double> >)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__TaDict_729_0_15, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >",8392,G__TaDict_729_0_16, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_729_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_729_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TaDict_729_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TaDict_729_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TaDict_729_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TaDict_729_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_729_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_729_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - first "
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_729_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position h - 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::size_type' 0 - n "
"u 'vector<double,allocator<double> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TaDict_729_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_729_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_729_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - first u 'vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TaDict_729_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >", 8518, G__TaDict_729_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlETStringcOallocatorlETStringgRsPgR(void) {
   /* vector<TString,allocator<TString> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__memfunc_setup("at",213,G__TaDict_733_0_1, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 1, 1, 1, 1, 0, "h - 'vector<TString,allocator<TString> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TaDict_733_0_2, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TaDict_733_0_3, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TaDict_733_0_4, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR), G__defined_typename("vector<TString,allocator<TString> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TaDict_733_0_5, 117, G__get_linked_tagnum(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR), G__defined_typename("vector<TString,allocator<TString> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TaDict_733_0_6, 104, -1, G__defined_typename("vector<TString,allocator<TString> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TaDict_733_0_7, 104, -1, G__defined_typename("vector<TString,allocator<TString> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_733_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<TString,allocator<TString> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TaDict_733_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'vector<TString,allocator<TString> >::size_type' 0 - sz u 'TString' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TaDict_733_0_10, 104, -1, G__defined_typename("vector<TString,allocator<TString> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TaDict_733_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TaDict_733_0_12, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 1, 1, 1, 1, 0, "h - 'vector<TString,allocator<TString> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TString,allocator<TString> >",3370,G__TaDict_733_0_13, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TString,allocator<TString> >",3370,G__TaDict_733_0_14, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR), -1, 0, 2, 1, 1, 0, 
"h - 'vector<TString,allocator<TString> >::size_type' 0 - n u 'TString' - 11 'TString()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TString,allocator<TString> >",3370,G__TaDict_733_0_15, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<TString,allocator<TString> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<TString,allocator<TString> >",3370,G__TaDict_733_0_16, 105, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<TString,allocator<TString> >::iterator' 'vector<TString,allocator<TString> >::const_iterator' 10 - first u 'vector<TString,allocator<TString> >::iterator' 'vector<TString,allocator<TString> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TaDict_733_0_17, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<TString,allocator<TString> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TaDict_733_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'vector<TString,allocator<TString> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TaDict_733_0_19, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TaDict_733_0_20, 117, G__get_linked_tagnum(&G__TaDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TaDict_733_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TaDict_733_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TString,allocator<TString> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_733_0_23, 117, G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<TString,allocator<TString> >::iterator' - 0 - position u 'TString' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_733_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TString,allocator<TString> >::iterator' - 0 - position u 'vector<TString,allocator<TString> >::iterator' 'vector<TString,allocator<TString> >::const_iterator' 10 - first "
"u 'vector<TString,allocator<TString> >::iterator' 'vector<TString,allocator<TString> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TaDict_733_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<TString,allocator<TString> >::iterator' - 0 - position h - 'vector<TString,allocator<TString> >::size_type' 0 - n "
"u 'TString' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TaDict_733_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_733_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TString,allocator<TString> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TaDict_733_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<TString,allocator<TString> >::iterator' - 0 - first u 'vector<TString,allocator<TString> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TaDict_733_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<TString,allocator<TString> >", 3496, G__TaDict_733_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTaDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTaDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTaDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TaDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator = { "vector<short,allocator<short> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<short,allocator<short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator = { "vector<unsigned short,allocator<unsigned short> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned short,allocator<unsigned short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiterator = { "vector<unsigned int,allocator<unsigned int> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned int,allocator<unsigned int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator = { "vector<float,allocator<float> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<float,allocator<float> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator = { "vector<double,allocator<double> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<double,allocator<double> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_ios_base = { "ios_base" , 99 , -1 };
G__linked_taginfo G__TaDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR = { "basic_istream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR = { "basic_ios<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR = { "basic_ostream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__TaDictLN_stringcLcLiterator = { "string::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR = { "reverse_iterator<string::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaBlind = { "TaBlind" , 99 , -1 };
G__linked_taginfo G__TaDictLN_EHelicity = { "EHelicity" , 101 , -1 };
G__linked_taginfo G__TaDictLN_EPairSynch = { "EPairSynch" , 101 , -1 };
G__linked_taginfo G__TaDictLN_EMultipletSynch = { "EMultipletSynch" , 101 , -1 };
G__linked_taginfo G__TaDictLN_EPairType = { "EPairType" , 101 , -1 };
G__linked_taginfo G__TaDictLN_EFeedbackType = { "EFeedbackType" , 101 , -1 };
G__linked_taginfo G__TaDictLN_TaFileName = { "TaFileName" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaIResultsFile = { "TaIResultsFile" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaLabelledQuantity = { "TaLabelledQuantity" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaOResultsFile = { "TaOResultsFile" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaStatistics = { "TaStatistics" , 99 , -1 };
G__linked_taginfo G__TaDictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaString = { "TaString" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator = { "vector<string,allocator<string> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaRun = { "TaRun" , 99 , -1 };
G__linked_taginfo G__TaDictLN_VaAnalysis = { "VaAnalysis" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaAnalysisManager = { "TaAnalysisManager" , 99 , -1 };
G__linked_taginfo G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TaDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaCutList = { "TaCutList" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaMultiplet = { "TaMultiplet" , 99 , -1 };
G__linked_taginfo G__TaDictLN_VaEvent = { "VaEvent" , 99 , -1 };
G__linked_taginfo G__TaDictLN_VaPair = { "VaPair" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR = { "vector<AnaList,allocator<AnaList> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEAnaListcOallocatorlEAnaListgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<AnaList,allocator<AnaList> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR = { "deque<VaEvent,allocator<VaEvent> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_dequelEVaPairmUcOallocatorlEVaPairmUgRsPgR = { "deque<VaPair*,allocator<VaPair*> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaStandardAna = { "TaStandardAna" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaDebugAna = { "TaDebugAna" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TDatime = { "TDatime" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__TaDictLN_dtype = { "dtype" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaRootRep = { "TaRootRep" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaKeyMap = { "TaKeyMap" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR = { "map<string,string,less<string>,allocator<pair<const string,string> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaDataBase = { "TaDataBase" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<int,vector<int,allocator<int> >,less<int>,allocator<pair<const int,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR = { "vector<TaString,allocator<TaString> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlETaStringcOallocatorlETaStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TaString,allocator<TaString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR = { "vector<dtype*,allocator<dtype*> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<dtype*,allocator<dtype*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR = { "multimap<string,vector<dtype*,allocator<dtype*> >,less<string>,allocator<pair<const string,vector<dtype*,allocator<dtype*> > > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR = { "map<string,TaKeyMap,less<string>,allocator<pair<const string,TaKeyMap> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgRcLcLiterator = { "map<string,TaKeyMap,less<string>,allocator<pair<const string,TaKeyMap> > >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR = { "map<string,bool,less<string>,allocator<pair<const string,bool> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaDevice = { "TaDevice" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR = { "vector<TaLabelledQuantity,allocator<TaLabelledQuantity> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TaLabelledQuantity,allocator<TaLabelledQuantity> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR = { "vector<TaKeyMap,allocator<TaKeyMap> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlETaKeyMapcOallocatorlETaKeyMapgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TaKeyMap,allocator<TaKeyMap> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaCutInterval = { "TaCutInterval" , 99 , -1 };
G__linked_taginfo G__TaDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR = { "vector<TaCutInterval,allocator<TaCutInterval> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TaCutInterval,allocator<TaCutInterval> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "list<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaEvent = { "TaEvent" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaSimEvent = { "TaSimEvent" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR = { "vector<EpicsChan,allocator<EpicsChan> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcLcLiteratorgR = { "reverse_iterator<vector<EpicsChan,allocator<EpicsChan> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR = { "map<string,vector<EpicsChan,allocator<EpicsChan> >,less<string>,allocator<pair<const string,vector<EpicsChan,allocator<EpicsChan> > > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaEpics = { "TaEpics" , 99 , -1 };
G__linked_taginfo G__TaDictLN_dequelEVaPaircOallocatorlEVaPairgRsPgR = { "deque<VaPair,allocator<VaPair> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR = { "vector<deque<VaPair,allocator<VaPair> >,allocator<deque<VaPair,allocator<VaPair> > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<deque<VaPair,allocator<VaPair> >,allocator<deque<VaPair,allocator<VaPair> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR = { "vector<VaPair,allocator<VaPair> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEVaPaircOallocatorlEVaPairgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<VaPair,allocator<VaPair> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaPairFromOctet = { "TaPairFromOctet" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaPairFromPair = { "TaPairFromPair" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaPairFromQuad = { "TaPairFromQuad" , 99 , -1 };
G__linked_taginfo G__TaDictLN_THaCodaData = { "THaCodaData" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaFeedbackAna = { "TaFeedbackAna" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__TaDictLN_TaADCCalib = { "TaADCCalib" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator = { "vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator = { "vector<TString,allocator<TString> >::iterator" , 99 , -1 };
G__linked_taginfo G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTaDict() {
  G__TaDictLN_TClass.tagnum = -1 ;
  G__TaDictLN_TBuffer.tagnum = -1 ;
  G__TaDictLN_TMemberInspector.tagnum = -1 ;
  G__TaDictLN_TObject.tagnum = -1 ;
  G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_ios_base.tagnum = -1 ;
  G__TaDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TaDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TaDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TaDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TaDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TaDictLN_string.tagnum = -1 ;
  G__TaDictLN_stringcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_TString.tagnum = -1 ;
  G__TaDictLN_TaBlind.tagnum = -1 ;
  G__TaDictLN_EHelicity.tagnum = -1 ;
  G__TaDictLN_EPairSynch.tagnum = -1 ;
  G__TaDictLN_EMultipletSynch.tagnum = -1 ;
  G__TaDictLN_EPairType.tagnum = -1 ;
  G__TaDictLN_EFeedbackType.tagnum = -1 ;
  G__TaDictLN_TaFileName.tagnum = -1 ;
  G__TaDictLN_TaIResultsFile.tagnum = -1 ;
  G__TaDictLN_TaLabelledQuantity.tagnum = -1 ;
  G__TaDictLN_TaOResultsFile.tagnum = -1 ;
  G__TaDictLN_TaStatistics.tagnum = -1 ;
  G__TaDictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_TaString.tagnum = -1 ;
  G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_TaRun.tagnum = -1 ;
  G__TaDictLN_VaAnalysis.tagnum = -1 ;
  G__TaDictLN_TaAnalysisManager.tagnum = -1 ;
  G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TaDictLN_TTree.tagnum = -1 ;
  G__TaDictLN_TFile.tagnum = -1 ;
  G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_TaCutList.tagnum = -1 ;
  G__TaDictLN_TaMultiplet.tagnum = -1 ;
  G__TaDictLN_VaEvent.tagnum = -1 ;
  G__TaDictLN_VaPair.tagnum = -1 ;
  G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEAnaListcOallocatorlEAnaListgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR.tagnum = -1 ;
  G__TaDictLN_dequelEVaPairmUcOallocatorlEVaPairmUgRsPgR.tagnum = -1 ;
  G__TaDictLN_TaStandardAna.tagnum = -1 ;
  G__TaDictLN_TaDebugAna.tagnum = -1 ;
  G__TaDictLN_TDatime.tagnum = -1 ;
  G__TaDictLN_TArrayC.tagnum = -1 ;
  G__TaDictLN_dtype.tagnum = -1 ;
  G__TaDictLN_TaRootRep.tagnum = -1 ;
  G__TaDictLN_TaKeyMap.tagnum = -1 ;
  G__TaDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_TaDataBase.tagnum = -1 ;
  G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlETaStringcOallocatorlETaStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TaDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TaDictLN_TH1F.tagnum = -1 ;
  G__TaDictLN_TaDevice.tagnum = -1 ;
  G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlETaKeyMapcOallocatorlETaKeyMapgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_TaCutInterval.tagnum = -1 ;
  G__TaDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__TaDictLN_TaEvent.tagnum = -1 ;
  G__TaDictLN_TRandom.tagnum = -1 ;
  G__TaDictLN_TaSimEvent.tagnum = -1 ;
  G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_TaEpics.tagnum = -1 ;
  G__TaDictLN_dequelEVaPaircOallocatorlEVaPairgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEVaPaircOallocatorlEVaPairgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_TaPairFromOctet.tagnum = -1 ;
  G__TaDictLN_TaPairFromPair.tagnum = -1 ;
  G__TaDictLN_TaPairFromQuad.tagnum = -1 ;
  G__TaDictLN_THaCodaData.tagnum = -1 ;
  G__TaDictLN_TaFeedbackAna.tagnum = -1 ;
  G__TaDictLN_TGraphErrors.tagnum = -1 ;
  G__TaDictLN_TaADCCalib.tagnum = -1 ;
  G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator.tagnum = -1 ;
  G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTaDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TaDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEshortcOallocatorlEshortgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEshortcOallocatorlEshortgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEfloatcOallocatorlEfloatgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEfloatcOallocatorlEfloatgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1,36608,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEdoublecOallocatorlEdoublegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEdoublecOallocatorlEdoublegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_ios_base);
   G__get_linked_tagnum_fwd(&G__TaDictLN_basic_istreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_basic_ioslEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_basic_ostreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_string),sizeof(string),-1,36608,(char*)NULL,G__setup_memvarstring,G__setup_memfuncstring);
   G__get_linked_tagnum_fwd(&G__TaDictLN_stringcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEstringcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TString);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaBlind),sizeof(TaBlind),-1,36608,"Result blinding tools",G__setup_memvarTaBlind,G__setup_memfuncTaBlind);
   G__get_linked_tagnum_fwd(&G__TaDictLN_EHelicity);
   G__get_linked_tagnum_fwd(&G__TaDictLN_EPairSynch);
   G__get_linked_tagnum_fwd(&G__TaDictLN_EMultipletSynch);
   G__get_linked_tagnum_fwd(&G__TaDictLN_EPairType);
   G__get_linked_tagnum_fwd(&G__TaDictLN_EFeedbackType);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaFileName),sizeof(TaFileName),-1,36608,"Pan standard file names",G__setup_memvarTaFileName,G__setup_memfuncTaFileName);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaIResultsFile),sizeof(TaIResultsFile),-1,35840,"Results file for input",G__setup_memvarTaIResultsFile,G__setup_memfuncTaIResultsFile);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaLabelledQuantity),sizeof(TaLabelledQuantity),-1,3840,"Quantity with label and units",G__setup_memvarTaLabelledQuantity,G__setup_memfuncTaLabelledQuantity);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaOResultsFile),sizeof(TaOResultsFile),-1,36352,"Results file for output",G__setup_memvarTaOResultsFile,G__setup_memfuncTaOResultsFile);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaStatistics),sizeof(TaStatistics),-1,36352,"Statistics -- means, widths, etc",G__setup_memvarTaStatistics,G__setup_memfuncTaStatistics);
   G__get_linked_tagnum_fwd(&G__TaDictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaString),sizeof(TaString),-1,34048,"Improved string class",G__setup_memvarTaString,G__setup_memfuncTaString);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgR),sizeof(vector<string,allocator<string> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEstringcOallocatorlEstringgRsPgR,G__setup_memfuncvectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEstringcOallocatorlEstringgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaRun),sizeof(TaRun),-1,36608,"One run of CODA data",G__setup_memvarTaRun,G__setup_memfuncTaRun);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_VaAnalysis),sizeof(VaAnalysis),-1,3842,"Interface class for data analysis",G__setup_memvarVaAnalysis,G__setup_memfuncVaAnalysis);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaAnalysisManager),sizeof(TaAnalysisManager),-1,3840,"Drives the entire analysis.  ",G__setup_memvarTaAnalysisManager,G__setup_memfuncTaAnalysisManager);
   G__get_linked_tagnum_fwd(&G__TaDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutList),sizeof(TaCutList),-1,36608,"List of cuts",G__setup_memvarTaCutList,G__setup_memfuncTaCutList);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaMultiplet),sizeof(TaMultiplet),-1,3840,"Base class for helicity multiplets",G__setup_memvarTaMultiplet,G__setup_memfuncTaMultiplet);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_VaEvent),sizeof(VaEvent),-1,3840,"An event",G__setup_memvarVaEvent,G__setup_memfuncVaEvent);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_VaPair),sizeof(VaPair),-1,3840,"Base class for helicity pairs",G__setup_memvarVaPair,G__setup_memfuncVaPair);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,36608,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEAnaListcOallocatorlEAnaListgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEAnaListcOallocatorlEAnaListgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_dequelEVaEventcOallocatorlEVaEventgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_dequelEVaPairmUcOallocatorlEVaPairmUgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaStandardAna),sizeof(TaStandardAna),-1,3840,"Standard data analysis",G__setup_memvarTaStandardAna,G__setup_memfuncTaStandardAna);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaDebugAna),sizeof(TaDebugAna),-1,256,"Debugging data analysis",G__setup_memvarTaDebugAna,G__setup_memfuncTaDebugAna);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TDatime);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TArrayC);
   G__get_linked_tagnum_fwd(&G__TaDictLN_dtype);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaRootRep),sizeof(TaRootRep),-1,29952,"Character data ROOT output for database",G__setup_memvarTaRootRep,G__setup_memfuncTaRootRep);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TaKeyMap);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOstringcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOstringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaDataBase),sizeof(TaDataBase),-1,3840,"Database class",G__setup_memvarTaDataBase,G__setup_memfuncTaDataBase);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlETaStringcOallocatorlETaStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlETaStringcOallocatorlETaStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEdtypemUcOallocatorlEdtypemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_multimaplEstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdtypemUcOallocatorlEdtypemUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOTaKeyMapcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTaKeyMapgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOboolcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOboolgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaDevice),sizeof(TaDevice),-1,3840,"Collection of devices that contain data",G__setup_memvarTaDevice,G__setup_memfuncTaDevice);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlETaLabelledQuantitycOallocatorlETaLabelledQuantitygRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlETaKeyMapcOallocatorlETaKeyMapgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlETaKeyMapcOallocatorlETaKeyMapgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaCutInterval),sizeof(TaCutInterval),-1,36608,"Cut Intervals",G__setup_memvarTaCutInterval,G__setup_memfuncTaCutInterval);
   G__get_linked_tagnum_fwd(&G__TaDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlETaCutIntervalcOallocatorlETaCutIntervalgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_listlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaEvent),sizeof(TaEvent),-1,3840,"A genuine event, with no simulation",G__setup_memvarTaEvent,G__setup_memfuncTaEvent);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TRandom);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaSimEvent),sizeof(TaSimEvent),-1,3840,"An event containing simulated data",G__setup_memvarTaSimEvent,G__setup_memfuncTaSimEvent);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEEpicsChancOallocatorlEEpicsChangRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_maplEstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEEpicsChancOallocatorlEEpicsChangRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaEpics),sizeof(TaEpics),-1,3840,"EPICS data ",G__setup_memvarTaEpics,G__setup_memfuncTaEpics);
   G__get_linked_tagnum_fwd(&G__TaDictLN_dequelEVaPaircOallocatorlEVaPairgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEdequelEVaPaircOallocatorlEVaPairgRsPgRcOallocatorlEdequelEVaPaircOallocatorlEVaPairgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEVaPaircOallocatorlEVaPairgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEVaPaircOallocatorlEVaPairgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromOctet),sizeof(TaPairFromOctet),-1,3840,"Event pair from window octet helicity structure",G__setup_memvarTaPairFromOctet,G__setup_memfuncTaPairFromOctet);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromPair),sizeof(TaPairFromPair),-1,3840,"Event pair from window pair helicity structure",G__setup_memvarTaPairFromPair,G__setup_memfuncTaPairFromPair);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaPairFromQuad),sizeof(TaPairFromQuad),-1,3840,"Event pair from window quadruple helicity structure",G__setup_memvarTaPairFromQuad,G__setup_memfuncTaPairFromQuad);
   G__get_linked_tagnum_fwd(&G__TaDictLN_THaCodaData);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaFeedbackAna),sizeof(TaFeedbackAna),-1,3840,"Analysis of feedback parameters",G__setup_memvarTaFeedbackAna,G__setup_memfuncTaFeedbackAna);
   G__get_linked_tagnum_fwd(&G__TaDictLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_TaADCCalib),sizeof(TaADCCalib),-1,36608,"ADC calibration analysis",G__setup_memvarTaADCCalib,G__setup_memfuncTaADCCalib);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),sizeof(vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),sizeof(vector<vector<double,allocator<double> >,allocator<vector<double,allocator<double> > > >),-1,36608,(char*)NULL,G__setup_memvarvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR,G__setup_memfuncvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgR),sizeof(vector<TString,allocator<TString> >),-1,36608,(char*)NULL,G__setup_memvarvectorlETStringcOallocatorlETStringgRsPgR,G__setup_memfuncvectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TaDictLN_vectorlETStringcOallocatorlETStringgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TaDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupTaDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTaDict()");
  G__set_cpp_environmentTaDict();
  G__cpp_setup_tagtableTaDict();

  G__cpp_setup_inheritanceTaDict();

  G__cpp_setup_typetableTaDict();

  G__cpp_setup_memvarTaDict();

  G__cpp_setup_memfuncTaDict();
  G__cpp_setup_globalTaDict();
  G__cpp_setup_funcTaDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTaDict();
  return;
}
class G__cpp_setup_initTaDict {
  public:
    G__cpp_setup_initTaDict() { G__add_setup_func("TaDict",(G__incsetup)(&G__cpp_setupTaDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTaDict() { G__remove_setup_func("TaDict"); }
};
G__cpp_setup_initTaDict G__cpp_setup_initializerTaDict;

