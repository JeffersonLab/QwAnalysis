# Analyzer for "Pan" (Parity Analyzer)
# for Hall A Parity Experiments.
# R. Michaels, A. Vacheret, R. Holmes
#
# You must have the 'codaclass' library and point DCDIR to the
# directory where codaclass headers are found.  See README.
#
# ONLINE if compiling ET system.  Off-site users may comment this out.
# Environment $LD_LIBRARY_PATH must include $CODA/$OSNAME/lib
# export ONLINE = 1
#
# Uncomment this if profiling (note: it slows down the code)
# export PROFILE = 1
#
# To compile optimized  (10% faster run time but very slow compilation)
# export OPTIMIZE =1
# 
# To use "insure" from parasoft.com.  Must first type "use insure" on ifarml1.
# export INSURE = 1
#
# IMPORTANT: DO NOT UNCOMMENT THE FOLLOWING LINE, unless you are
# sufficiently expert to understand the consequences.
# MAKENODICTIONARY should be defined only to ease debugging during Pan
# development, or to compile with obsolete versions (older than
# 3.02/07) of ROOT.  Of course it's better to install a current
# version of ROOT.
#
###### DO NOT UNCOMMENT ######
# MAKENODICTIONARY = 1  
##############################

# Choose the compiler.
GCC=g++
GLD=g++
ifdef INSURE
  GCC=insure
  GLD=insure
endif

# If ROOTSYS is defined, look for ROOT files under there.  
# If not, look in <prefix>/inc, <prefix>/bin, etc., where
# <prefix> is specified here.
PREFIX=/usr
ifdef ROOTPREFIX
  PREFIX=ROOTPREFIX
endif

ROOTINC=$(PREFIX)/include/root
ROOTBIN=$(PREFIX)/bin
ifdef ROOTSYS
  ROOTINC=$(ROOTSYS)/include
  ROOTBIN=$(ROOTSYS)/bin
endif

export OSNAME := $(shell uname)

ifeq ($(OSNAME),SunOS)

   ROOTCFLAGS    = $(shell root-config --cflags)
   ROOTLIBS      = $(shell root-config --libs)
   ROOTGLIBS     = $(shell root-config --glibs)
   CXX           = $(GCC)
   CXXFLAGS      = -KPIC -DSUNVERS -I$(ROOTINC) -I$(MAINDIR)
   CXXFLAGS     += $(ROOTCFLAGS)
   LD            = $(GLD)
   LDFLAGS       = -g -D
   SOFLAGS       = -G
   LIBCODACLASS=libcoda.a
   GLIB =  -lm -lc -lgen -lw -lnsl -ldl
   SLIB = -L/opt/SUNWspro/SC4.2/lib -lF77 -lM77 -lsunmath
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_THREAD_SEMANTICS
   ET_CFLAGS = -mt -fast -xO5 -KPIC $(ET_AC_FLAGS) -DSUNVERS
# Typically CODA is an environment variable,e.g.
#   CODA = /adaqfs/coda/2.2.1
   LIBET = $(CODA)/SunOS/lib/libet.so
   ONLIBS = $(LIBET) -lposix4 -lnsl -lsocket -lresolv
   LIBS = $(GLIB)

endif

# Linux with egcs

ifeq ($(OSNAME),Linux)
   ROOTLIBS      = $(shell root-config --libs)
   ROOTGLIBS     = $(shell root-config --glibs)
   INCLUDES      = -I$(ROOTINC)
   CXX           = $(GCC)
   CXXFLAGS      = -Wall -fno-exceptions -fPIC $(INCLUDES) 
   LD            = $(GLD)
   LDFLAGS       = 
   SOFLAGS       = -shared 
   GLIBS         = $(ROOTGLIBS) -L/usr/X11R6/lib -lXpm -lX11
   LIBCODACLASS=libcoda.a
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS
   ET_CFLAGS = -02 -fPIC -I. $(ET_AC_FLAGS) -DLINUXVERS
# Typically CODA is an environment variable,e.g.
#   CODA = /adaqfs/coda/2.2.1
   LIBET = $(CODA)/Linux/lib/libet.so
   ONLIBS = $(LIBET) -lieee -lpthread -ldl -lresolv
   LIBS = $(GLIBS) $(ROOTLIBS) $(ROOTGLIBS)

endif

ifeq ($(OSNAME),Darwin)
   ROOTLIBS      = $(shell root-config --libs)
   ROOTGLIBS     = $(shell root-config --glibs)
   INCLUDES      = -I$(ROOTINC) -I./
   CXX           = $(GCC)
   CXXFLAGS      = -Wall -fno-exceptions -fPIC $(INCLUDES) 
   LD            = $(GLD)
   LDFLAGS       = 
   SOFLAGS       = -shared 
   GLIBS         = $(ROOTGLIBS) -L/usr/X11R6/lib -lXpm -lX11
   LIBCODACLASS=libcoda.a
   ET_AC_FLAGS = -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS
   ET_CFLAGS = -02 -fPIC -I. $(ET_AC_FLAGS) -DLINUXVERS
# Typically CODA is an environment variable,e.g.
#   CODA = /adaqfs/coda/2.2.1
   LIBET = $(CODA)/Linux/lib/libet.so
   ONLIBS = $(LIBET) -lieee -lpthread -ldl -lresolv
   LIBS = $(GLIBS) $(ROOTLIBS) $(ROOTGLIBS)

endif


MAKEDEPEND    = $(GCC)

ALL_LIBS = $(LIBS) $(LIBCODACLASS)

DCDIR=../codaclass
INCLUDES += -I$(DCDIR)

# Flag to indicate compilation of Pan executable (not defined for
# ACLIC compilation)

CXXFLAGS += -DPANCOMPILE

ifdef ONLINE
    ALL_LIBS += $(ONLIBS)
    CXXFLAGS += -DONLINE
endif

ifdef PROFILE
   CXXFLAGS += -pg
endif

ifdef OPTIMIZE
   CXXFLAGS += -O
else
   CXXFLAGS += -g
endif

#
# Mysql can be downloaded from http://www.mysql.com 
# It is also found at CUE in /apps/mysql/
# Use Mysql version: mysql-3.23.xx 
# 
# libMySQL.so is a root library found under $(ROOTSYS)/lib
#
# libz.so is a compression library used by libMySQL.so
# and can be found at CUE in /apps/lib/
#
# libDBTools.a is created in ../pandb/DBTools/
#

# Grow the lists of sources here.
# LSRC is the classes that should go into the Pan library
# SRC is all the classes needed for Pan

LSRC = TaBlind.cc TaFileName.cc TaIResultsFile.cc TaLabelledQuantity.cc \
      TaOResultsFile.cc TaStatistics.cc TaString.cc 

SRC = $(LSRC) TaAnalysisManager.cc  \
      TaDebugAna.cc TaDevice.cc TaDataBase.cc \
      TaCutInterval.cc TaCutList.cc VaEvent.cc \
      TaEvent.cc TaSimEvent.cc TaEpics.cc \
      TaMultiplet.cc TaPairFromOctet.cc \
      TaPairFromPair.cc TaPairFromQuad.cc \
      TaRun.cc  TaStandardAna.cc TaFeedbackAna.cc\
      VaAnalysis.cc VaPair.cc TaADCCalib.cc 

LOBJS_NODICT = $(LSRC:.cc=_NODICT.o)
LOBJS = $(LSRC:.cc=.o)
LHEAD = $(LSRC:.cc=.hh) 
LHEAD += PanTypes.hh
LHEAD += DevTypes.hh

DEPS = $(SRC:.cc=.d)
DEP  = $(SRC:.cc=.d)
HEAD = $(SRC:.cc=.hh) 
HEAD += PanTypes.hh
HEAD += DevTypes.hh

PROGS = pan
PANLIBS = libpan.a
PANLIBS_NODICT = libpan_NODICT.a

# Make the dictionary
ifdef MAKENODICTIONARY
  OBJS = $(SRC:.cc=_NODICT.o)
else
  OBJS = $(SRC:.cc=.o)
  OBJS += TaDict.o
endif

install: all
	mv pan ../
	mv libpan.so ../

all: $(PROGS) $(PANLIBS) $(PANLIBS_NODICT) libpan.so

$(PROGS): main.o $(OBJS) $(SRC) $(HEAD) 
	rm -f $@
	$(LD) $(CXXFLAGS) -o $@ main.o $(OBJS)  $(ALL_LIBS)

$(PANLIBS_NODICT): $(LOBJS_NODICT) $(LSRC) $(LHEAD)
	rm -f $@
	ar cr $@ $(LOBJS)

$(PANLIBS): $(LOBJS) $(LSRC) $(LHEAD)
	rm -f $@
	ar cr $@ $(LOBJS)

main.o: main.cc
	$(CXX) -c $(INCLUDES) $(CXXFLAGS) $<	

libpan.so: $(OBJS) $(HEAD)
	$(CXX) $(SOFLAGS) -O -o libpan.so main.o $(OBJS) $(ALL_LIBS)
#	$(CXX) $(SOFLAGS) -O -o libpan.so $(OBJS) $(ALL_LIBS)
# is main needed when building the .so?  -kdp (8/3/09)

# Dictionary

TaDict.cc: $(OBJS) TaLinkDef.hh
	@echo "Generating Decoder Dictionary..."
	$(ROOTBIN)/rootcint -f TaDict.cc -c -p $(HEAD) TaLinkDef.hh

# DevTypes generated by Perl script

DevTypes.hh: genDevTypes.pl
	./genDevTypes.pl > DevTypes.hh

# create a tar file of ./$(VERS)/* (all code)

tarfile: clean version
	tar cvf $(VERS).tar ./$(VERS)

clean:
	rm -f *.o core *~ *.d TaDict* *.tar $(PROGS)

realclean:  clean
	rm -f *.d


%.o:	%.cc
	$(CXX) $(CXXFLAGS) -c $<

%_NODICT.o:	%.cc
	$(CXX) $(CXXFLAGS) -c -DNODICT -o $*_NODICT.o $<

%.d:	%.cc DevTypes.hh
	@echo Creating dependencies for $<
	@$(SHELL) -ec '$(MAKEDEPEND) -MM $(INCLUDES) -c $< \
                | sed '\''s%^.*\.o%$*\.o%g'\'' \
                | sed '\''s%\($*\)\.o[ :]*%\1.o $@ : %g'\'' > $@; \
                [ -s $@ ] || rm -f $@'

-include $(DEPS)
