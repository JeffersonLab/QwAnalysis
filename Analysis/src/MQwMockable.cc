#include "MQwMockable.h"

// Randomness generator: Mersenne twister with period 2^19937 - 1
//
// This is defined as static to avoid getting stuck with 100% correlated
// ADC channels when each channel goes through the same list of pseudo-
// random numbers...
boost::mt19937 MQwMockable::fRandomnessGenerator;
boost::normal_distribution<double> MQwMockable::fNormalDistribution;
// The boost::variate_generator has operator() overloaded to get a new random
// value according to the distribution in the second template argument, based
// on the uniform random value generated by the first template argument.
// For example: fNormalRandomVariable() will return a random normal variable.
boost::variate_generator < boost::mt19937, boost::normal_distribution<double> >
  MQwMockable::fNormalRandomVariable(fRandomnessGenerator, fNormalDistribution);



void MQwMockable::SetRandomEventDriftParameters(Double_t amplitude, Double_t phase, Double_t frequency)
{
  // Clear existing values
  fMockDriftAmplitude.clear();
  fMockDriftFrequency.clear();
  fMockDriftPhase.clear();
  // Add new values
  fMockDriftAmplitude.push_back(amplitude);
  fMockDriftFrequency.push_back(frequency);
  fMockDriftPhase.push_back(phase);
  return;
}

void MQwMockable::AddRandomEventDriftParameters(Double_t amplitude, Double_t phase, Double_t frequency)
{
  // Add new values
  fMockDriftAmplitude.push_back(amplitude);
  fMockDriftFrequency.push_back(frequency);
  fMockDriftPhase.push_back(phase);
  return;
}

void MQwMockable::SetRandomEventParameters(Double_t mean, Double_t sigma)
{
  fMockGaussianMean = mean;
  fMockGaussianSigma = sigma;
  return;
}

void MQwMockable::SetRandomEventAsymmetry(Double_t asymmetry)
{
  fMockAsymmetry = asymmetry;
  return;
}

Double_t MQwMockable::GetRandomValue(){
  Double_t random_variable;
  if (fUseExternalRandomVariable)
    // external normal random variable
    random_variable = fExternalRandomVariable;
  else
    // internal normal random variable
    random_variable = fNormalRandomVariable();
  return random_variable;
}

